d21db41d5e520336cb4e47c327560739
"use strict";
/**
 * Unit tests for PDF Utility Functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
// Mock PDF.js for testing
jest.mock('pdfjs-dist', () => ({
    getDocument: jest.fn(),
    GlobalWorkerOptions: {
        workerSrc: ''
    }
}));
const pdfUtils_1 = require("../../../src/common/utils/pdfUtils");
describe('PDF Utilities', () => {
    describe('validatePDFBytes', () => {
        it('should return true for valid PDF bytes', () => {
            // Create a minimal valid PDF header
            const validPDFBytes = new Uint8Array([
                0x25, 0x50, 0x44, 0x46, 0x2D, 0x31, 0x2E, 0x34, // %PDF-1.4
                0x0A, 0x0A, // newlines
                ...new Array(16).fill(0x20), // padding
                0x25, 0x25, 0x45, 0x4F, 0x46 // %%EOF
            ]);
            const result = (0, pdfUtils_1.validatePDFBytes)(validPDFBytes);
            expect(result).toBe(true);
        });
        it('should return false for null or undefined bytes', () => {
            expect((0, pdfUtils_1.validatePDFBytes)(null)).toBe(false);
            expect((0, pdfUtils_1.validatePDFBytes)(undefined)).toBe(false);
        });
        it('should return false for empty bytes', () => {
            const emptyBytes = new Uint8Array(0);
            expect((0, pdfUtils_1.validatePDFBytes)(emptyBytes)).toBe(false);
        });
        it('should return false for bytes too short', () => {
            const shortBytes = new Uint8Array([0x25, 0x50, 0x44, 0x46]); // Just %PDF
            expect((0, pdfUtils_1.validatePDFBytes)(shortBytes)).toBe(false);
        });
        it('should return false for invalid header', () => {
            const invalidBytes = new Uint8Array(30);
            invalidBytes.fill(0x00);
            // Set first few bytes to something that's not PDF
            invalidBytes[0] = 0x48; // H
            invalidBytes[1] = 0x54; // T
            invalidBytes[2] = 0x4D; // M
            invalidBytes[3] = 0x4C; // L
            expect((0, pdfUtils_1.validatePDFBytes)(invalidBytes)).toBe(false);
        });
        it('should warn about unusual PDF versions but still validate', () => {
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const consoloLogSpy = jest.spyOn(console, 'log').mockImplementation();
            // Create PDF with unusual version
            const unusualVersionPDF = new Uint8Array([
                0x25, 0x50, 0x44, 0x46, 0x2D, 0x33, 0x2E, 0x30, // %PDF-3.0 (unusual)
                0x0A, 0x0A,
                ...new Array(16).fill(0x20),
                0x25, 0x25, 0x45, 0x4F, 0x46 // %%EOF
            ]);
            const result = (0, pdfUtils_1.validatePDFBytes)(unusualVersionPDF);
            expect(result).toBe(true);
            expect(consoleSpy).toHaveBeenCalledWith(expect.stringContaining('Unusual PDF version'));
            consoleSpy.mockRestore();
            consoloLogSpy.mockRestore();
        });
    });
    describe('createSafePDFBytes', () => {
        it('should create a safe copy of valid PDF bytes', () => {
            const originalBytes = new Uint8Array([1, 2, 3, 4, 5]);
            const safeBytes = (0, pdfUtils_1.createSafePDFBytes)(originalBytes);
            expect(safeBytes).toBeInstanceOf(Uint8Array);
            expect(safeBytes.length).toBe(originalBytes.length);
            expect(Array.from(safeBytes)).toEqual(Array.from(originalBytes));
            // Ensure it's a different instance
            expect(safeBytes).not.toBe(originalBytes);
        });
        it('should throw error for null or undefined bytes', () => {
            expect(() => (0, pdfUtils_1.createSafePDFBytes)(null)).toThrow();
            expect(() => (0, pdfUtils_1.createSafePDFBytes)(undefined)).toThrow();
        });
        it('should throw error for empty bytes', () => {
            const emptyBytes = new Uint8Array(0);
            expect(() => (0, pdfUtils_1.createSafePDFBytes)(emptyBytes)).toThrow();
        });
        it('should handle large byte arrays', () => {
            const largeBytes = new Uint8Array(100000);
            largeBytes.fill(0x42); // Fill with 'B'
            const safeBytes = (0, pdfUtils_1.createSafePDFBytes)(largeBytes);
            expect(safeBytes.length).toBe(100000);
            expect(safeBytes[0]).toBe(0x42);
            expect(safeBytes[99999]).toBe(0x42);
        });
    });
    describe('createSafeArrayBuffer', () => {
        it('should create ArrayBuffer from valid Uint8Array', () => {
            // Mock validatePDFBytes to return true for this test
            jest.spyOn(require('../../../src/common/utils/pdfUtils'), 'validatePDFBytes')
                .mockReturnValueOnce(true)
                .mockReturnValueOnce(true); // Called twice in the function
            const uint8Array = new Uint8Array([1, 2, 3, 4, 5]);
            const arrayBuffer = (0, pdfUtils_1.createSafeArrayBuffer)(uint8Array);
            expect(arrayBuffer).toBeInstanceOf(ArrayBuffer);
            expect(arrayBuffer.byteLength).toBe(5);
            const view = new Uint8Array(arrayBuffer);
            expect(Array.from(view)).toEqual([1, 2, 3, 4, 5]);
        });
        it('should throw error for invalid PDF bytes', () => {
            // Mock validatePDFBytes to return false
            jest.spyOn(require('../../../src/common/utils/pdfUtils'), 'validatePDFBytes')
                .mockReturnValueOnce(false);
            const uint8Array = new Uint8Array([1, 2, 3, 4, 5]);
            expect(() => (0, pdfUtils_1.createSafeArrayBuffer)(uint8Array)).toThrow('Invalid PDF data');
        });
        it('should throw error for null or undefined input', () => {
            expect(() => (0, pdfUtils_1.createSafeArrayBuffer)(null)).toThrow();
            expect(() => (0, pdfUtils_1.createSafeArrayBuffer)(undefined)).toThrow();
        });
        it('should throw error for empty array', () => {
            const emptyArray = new Uint8Array(0);
            expect(() => (0, pdfUtils_1.createSafeArrayBuffer)(emptyArray)).toThrow('Empty or null Uint8Array');
        });
    });
    describe('loadPDFSafely', () => {
        const mockPdfJsLib = require('pdfjs-dist');
        beforeEach(() => {
            jest.clearAllMocks();
        });
        it('should load PDF with valid bytes', async () => {
            // Mock successful PDF loading
            const mockPdf = { numPages: 5 };
            const mockLoadingTask = {
                promise: Promise.resolve(mockPdf),
                onProgress: null
            };
            mockPdfJsLib.getDocument = jest.fn().mockReturnValue(mockLoadingTask);
            // Mock validatePDFBytes to return true
            jest.spyOn(require('../../../src/common/utils/pdfUtils'), 'validatePDFBytes')
                .mockReturnValue(true);
            const validBytes = new Uint8Array([1, 2, 3, 4, 5]);
            const result = await (0, pdfUtils_1.loadPDFSafely)(validBytes);
            expect(result).toBe(mockPdf);
            expect(mockPdfJsLib.getDocument).toHaveBeenCalledWith(expect.objectContaining({
                data: expect.any(Uint8Array),
                useWorkerFetch: false,
                isEvalSupported: false,
                useSystemFonts: true
            }));
        });
        it('should throw error for invalid PDF bytes', async () => {
            // Mock validatePDFBytes to return false
            jest.spyOn(require('../../../src/common/utils/pdfUtils'), 'validatePDFBytes')
                .mockReturnValue(false);
            const invalidBytes = new Uint8Array([1, 2, 3, 4, 5]);
            await expect((0, pdfUtils_1.loadPDFSafely)(invalidBytes)).rejects.toThrow('Invalid PDF data provided');
        });
        it('should handle PDF loading errors', async () => {
            // Mock validatePDFBytes to return true
            jest.spyOn(require('../../../src/common/utils/pdfUtils'), 'validatePDFBytes')
                .mockReturnValue(true);
            // Mock PDF loading failure
            const mockLoadingTask = {
                promise: Promise.reject(new Error('PDF loading failed')),
                onProgress: null
            };
            mockPdfJsLib.getDocument = jest.fn().mockReturnValue(mockLoadingTask);
            const validBytes = new Uint8Array([1, 2, 3, 4, 5]);
            return expect((0, pdfUtils_1.loadPDFSafely)(validBytes)).rejects.toThrow('PDF loading failed');
        });
        it('should apply custom options', async () => {
            // Mock successful PDF loading
            const mockPdf = { numPages: 3 };
            const mockLoadingTask = {
                promise: Promise.resolve(mockPdf),
                onProgress: null
            };
            mockPdfJsLib.getDocument = jest.fn().mockReturnValue(mockLoadingTask);
            // Mock validatePDFBytes to return true
            jest.spyOn(require('../../../src/common/utils/pdfUtils'), 'validatePDFBytes')
                .mockReturnValue(true);
            const validBytes = new Uint8Array([1, 2, 3, 4, 5]);
            const customOptions = {
                cMapUrl: './custom-cmaps/',
                verbosity: 1
            };
            await (0, pdfUtils_1.loadPDFSafely)(validBytes, customOptions);
            expect(mockPdfJsLib.getDocument).toHaveBeenCalledWith(expect.objectContaining({
                cMapUrl: './custom-cmaps/',
                verbosity: 1,
                useWorkerFetch: false, // Should still have safe defaults
                isEvalSupported: false
            }));
        });
    });
});
// Clean up console spies after all tests
afterAll(() => {
    jest.restoreAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,