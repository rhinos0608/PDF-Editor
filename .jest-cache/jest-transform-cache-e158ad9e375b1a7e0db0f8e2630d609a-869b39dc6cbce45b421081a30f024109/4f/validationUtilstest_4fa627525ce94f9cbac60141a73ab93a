f03317627ccf204e39f238f989b7b14f
"use strict";
/**
 * Unit tests for Validation Utility Functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
const validationUtils_1 = require("../../../src/common/utils/validationUtils");
describe('Validation Utilities', () => {
    describe('isValidEmail', () => {
        it('should validate correct email formats', () => {
            expect((0, validationUtils_1.isValidEmail)('user@example.com')).toBe(true);
            expect((0, validationUtils_1.isValidEmail)('test.email+tag@domain.co.uk')).toBe(true);
            expect((0, validationUtils_1.isValidEmail)('user123@test-domain.org')).toBe(true);
        });
        it('should reject invalid email formats', () => {
            expect((0, validationUtils_1.isValidEmail)('invalid-email')).toBe(false);
            expect((0, validationUtils_1.isValidEmail)('user@')).toBe(false);
            expect((0, validationUtils_1.isValidEmail)('@domain.com')).toBe(false);
            expect((0, validationUtils_1.isValidEmail)('user space@domain.com')).toBe(false);
        });
    });
    describe('isValidUrl', () => {
        it('should validate correct URL formats', () => {
            expect((0, validationUtils_1.isValidUrl)('https://example.com')).toBe(true);
            expect((0, validationUtils_1.isValidUrl)('http://localhost:3000')).toBe(true);
            expect((0, validationUtils_1.isValidUrl)('ftp://files.example.com/file.pdf')).toBe(true);
        });
        it('should reject invalid URL formats', () => {
            expect((0, validationUtils_1.isValidUrl)('not-a-url')).toBe(false);
            expect((0, validationUtils_1.isValidUrl)('://example.com')).toBe(false);
            expect((0, validationUtils_1.isValidUrl)('')).toBe(false);
        });
    });
    describe('hasValidExtension', () => {
        it('should validate allowed extensions', () => {
            expect((0, validationUtils_1.hasValidExtension)('document.pdf', ['pdf', 'doc'])).toBe(true);
            expect((0, validationUtils_1.hasValidExtension)('image.PNG', ['png', 'jpg'])).toBe(true); // Case insensitive
        });
        it('should reject invalid extensions', () => {
            expect((0, validationUtils_1.hasValidExtension)('document.txt', ['pdf', 'doc'])).toBe(false);
            expect((0, validationUtils_1.hasValidExtension)('file', ['pdf', 'doc'])).toBe(false); // No extension
        });
    });
    describe('isValidFileSize', () => {
        it('should validate file sizes within limits', () => {
            expect((0, validationUtils_1.isValidFileSize)(1024, 1)).toBe(true); // 1KB within 1MB limit
            expect((0, validationUtils_1.isValidFileSize)(1024 * 1024, 1)).toBe(true); // Exactly 1MB
        });
        it('should reject files that are too large', () => {
            expect((0, validationUtils_1.isValidFileSize)(2 * 1024 * 1024, 1)).toBe(false); // 2MB exceeds 1MB limit
        });
        it('should reject zero or negative sizes', () => {
            expect((0, validationUtils_1.isValidFileSize)(0, 1)).toBe(false);
            expect((0, validationUtils_1.isValidFileSize)(-100, 1)).toBe(false);
        });
    });
    describe('isValidString', () => {
        it('should validate strings within length limits', () => {
            expect((0, validationUtils_1.isValidString)('valid', 1, 10)).toBe(true);
            expect((0, validationUtils_1.isValidString)('exactly5', 5, 5)).toBe(true);
        });
        it('should reject strings outside length limits', () => {
            expect((0, validationUtils_1.isValidString)('short', 10, 20)).toBe(false); // Too short
            expect((0, validationUtils_1.isValidString)('verylongstring', 1, 5)).toBe(false); // Too long
        });
        it('should handle whitespace correctly', () => {
            expect((0, validationUtils_1.isValidString)('   ', 1, 10)).toBe(false); // Only whitespace
            expect((0, validationUtils_1.isValidString)(' valid ', 1, 10)).toBe(true); // Valid with whitespace
        });
        it('should reject non-strings', () => {
            expect((0, validationUtils_1.isValidString)(123, 1, 10)).toBe(false);
            expect((0, validationUtils_1.isValidString)(null, 1, 10)).toBe(false);
        });
    });
    describe('isValidNumber', () => {
        it('should validate numbers within range', () => {
            expect((0, validationUtils_1.isValidNumber)(5, 0, 10)).toBe(true);
            expect((0, validationUtils_1.isValidNumber)(0, 0, 10)).toBe(true);
            expect((0, validationUtils_1.isValidNumber)(10, 0, 10)).toBe(true);
        });
        it('should reject numbers outside range', () => {
            expect((0, validationUtils_1.isValidNumber)(-1, 0, 10)).toBe(false);
            expect((0, validationUtils_1.isValidNumber)(11, 0, 10)).toBe(false);
        });
        it('should reject invalid numbers', () => {
            expect((0, validationUtils_1.isValidNumber)(NaN, 0, 10)).toBe(false);
            expect((0, validationUtils_1.isValidNumber)(Infinity, 0, 10)).toBe(false);
            expect((0, validationUtils_1.isValidNumber)('5', 0, 10)).toBe(false);
        });
    });
    describe('hasRequiredProperties', () => {
        it('should validate objects with all required properties', () => {
            const obj = { name: 'test', age: 25, active: true };
            expect((0, validationUtils_1.hasRequiredProperties)(obj, ['name', 'age'])).toBe(true);
        });
        it('should reject objects missing required properties', () => {
            const obj = { name: 'test' };
            expect((0, validationUtils_1.hasRequiredProperties)(obj, ['name', 'age'])).toBe(false);
        });
        it('should reject non-objects', () => {
            expect((0, validationUtils_1.hasRequiredProperties)(null, ['name'])).toBe(false);
            expect((0, validationUtils_1.hasRequiredProperties)('string', ['name'])).toBe(false);
        });
    });
    describe('isValidArray', () => {
        const isStringValidator = (item) => typeof item === 'string';
        it('should validate arrays with valid items', () => {
            expect((0, validationUtils_1.isValidArray)(['a', 'b', 'c'], isStringValidator)).toBe(true);
            expect((0, validationUtils_1.isValidArray)(['single'], isStringValidator, 1, 1)).toBe(true);
        });
        it('should reject arrays with invalid items', () => {
            expect((0, validationUtils_1.isValidArray)(['a', 1, 'c'], isStringValidator)).toBe(false);
        });
        it('should validate array length constraints', () => {
            expect((0, validationUtils_1.isValidArray)(['a'], isStringValidator, 2, 5)).toBe(false); // Too short
            expect((0, validationUtils_1.isValidArray)(['a', 'b', 'c', 'd', 'e', 'f'], isStringValidator, 1, 3)).toBe(false); // Too long
        });
        it('should reject non-arrays', () => {
            expect((0, validationUtils_1.isValidArray)('not-array', isStringValidator)).toBe(false);
            expect((0, validationUtils_1.isValidArray)(null, isStringValidator)).toBe(false);
        });
    });
    describe('isStrongPassword', () => {
        it('should validate strong passwords', () => {
            expect((0, validationUtils_1.isStrongPassword)('StrongP@ss1')).toBe(true);
            expect((0, validationUtils_1.isStrongPassword)('MySecure123!')).toBe(true);
        });
        it('should reject weak passwords', () => {
            expect((0, validationUtils_1.isStrongPassword)('short')).toBe(false); // Too short
            expect((0, validationUtils_1.isStrongPassword)('nouppercase123!')).toBe(false); // No uppercase
            expect((0, validationUtils_1.isStrongPassword)('NOLOWERCASE123!')).toBe(false); // No lowercase
            expect((0, validationUtils_1.isStrongPassword)('NoNumbers!')).toBe(false); // No numbers
            expect((0, validationUtils_1.isStrongPassword)('NoSpecial123')).toBe(false); // No special chars
        });
    });
    describe('isValidHexColor', () => {
        it('should validate correct hex colors', () => {
            expect((0, validationUtils_1.isValidHexColor)('#FF0000')).toBe(true); // 6 digits
            expect((0, validationUtils_1.isValidHexColor)('#f00')).toBe(true); // 3 digits
            expect((0, validationUtils_1.isValidHexColor)('#123ABC')).toBe(true); // Mixed case
        });
        it('should reject invalid hex colors', () => {
            expect((0, validationUtils_1.isValidHexColor)('FF0000')).toBe(false); // No #
            expect((0, validationUtils_1.isValidHexColor)('#GG0000')).toBe(false); // Invalid hex chars
            expect((0, validationUtils_1.isValidHexColor)('#FF00')).toBe(false); // Wrong length
        });
    });
    describe('isValidRGB', () => {
        it('should validate RGB values in range', () => {
            expect((0, validationUtils_1.isValidRGB)(255, 0, 0)).toBe(true);
            expect((0, validationUtils_1.isValidRGB)(128, 128, 128)).toBe(true);
            expect((0, validationUtils_1.isValidRGB)(0, 0, 0)).toBe(true);
        });
        it('should reject RGB values out of range', () => {
            expect((0, validationUtils_1.isValidRGB)(256, 0, 0)).toBe(false);
            expect((0, validationUtils_1.isValidRGB)(-1, 0, 0)).toBe(false);
            expect((0, validationUtils_1.isValidRGB)(128, 300, 128)).toBe(false);
        });
    });
    describe('isValidPageNumber', () => {
        it('should validate page numbers within range', () => {
            expect((0, validationUtils_1.isValidPageNumber)(1, 10)).toBe(true);
            expect((0, validationUtils_1.isValidPageNumber)(10, 10)).toBe(true);
            expect((0, validationUtils_1.isValidPageNumber)(5, 20)).toBe(true);
        });
        it('should reject page numbers out of range', () => {
            expect((0, validationUtils_1.isValidPageNumber)(0, 10)).toBe(false); // Pages start at 1
            expect((0, validationUtils_1.isValidPageNumber)(11, 10)).toBe(false); // Exceeds total
            expect((0, validationUtils_1.isValidPageNumber)(1.5, 10)).toBe(false); // Not integer
        });
    });
    describe('isValidZoom', () => {
        it('should validate zoom levels in range', () => {
            expect((0, validationUtils_1.isValidZoom)(1.0)).toBe(true);
            expect((0, validationUtils_1.isValidZoom)(0.1)).toBe(true); // Minimum
            expect((0, validationUtils_1.isValidZoom)(10.0)).toBe(true); // Maximum
            expect((0, validationUtils_1.isValidZoom)(2.5)).toBe(true);
        });
        it('should reject zoom levels out of range', () => {
            expect((0, validationUtils_1.isValidZoom)(0.05)).toBe(false); // Below minimum
            expect((0, validationUtils_1.isValidZoom)(15.0)).toBe(false); // Above maximum
        });
    });
    describe('isValidRectangle', () => {
        it('should validate correct rectangle objects', () => {
            expect((0, validationUtils_1.isValidRectangle)({ x: 0, y: 0, width: 100, height: 50 })).toBe(true);
            expect((0, validationUtils_1.isValidRectangle)({ x: 10, y: 20, width: 1, height: 1 })).toBe(true);
        });
        it('should reject invalid rectangle objects', () => {
            expect((0, validationUtils_1.isValidRectangle)({ x: 0, y: 0, width: 100 })).toBe(false); // Missing height
            expect((0, validationUtils_1.isValidRectangle)({ x: -1, y: 0, width: 100, height: 50 })).toBe(false); // Negative x
            expect((0, validationUtils_1.isValidRectangle)({ x: 0, y: 0, width: -100, height: 50 })).toBe(false); // Negative width
        });
    });
    describe('isValidPoint', () => {
        it('should validate correct point objects', () => {
            expect((0, validationUtils_1.isValidPoint)({ x: 0, y: 0 })).toBe(true);
            expect((0, validationUtils_1.isValidPoint)({ x: 100, y: 200 })).toBe(true);
        });
        it('should reject invalid point objects', () => {
            expect((0, validationUtils_1.isValidPoint)({ x: 0 })).toBe(false); // Missing y
            expect((0, validationUtils_1.isValidPoint)({ x: -1, y: 0 })).toBe(false); // Negative x
        });
    });
    describe('sanitizeString', () => {
        it('should remove HTML tags and control characters', () => {
            expect((0, validationUtils_1.sanitizeString)('<script>alert("xss")</script>hello')).toBe('alert("xss")hello');
            expect((0, validationUtils_1.sanitizeString)('  test  ')).toBe('test'); // Trim whitespace
        });
        it('should remove control characters', () => {
            const withControlChars = 'hello\x00\x01\x1F\x7Fworld';
            expect((0, validationUtils_1.sanitizeString)(withControlChars)).toBe('helloworld');
        });
    });
    describe('sanitizeFilename', () => {
        it('should replace invalid filename characters', () => {
            expect((0, validationUtils_1.sanitizeFilename)('file<>:"/\\|?*name.pdf')).toBe('file_________name.pdf');
        });
        it('should handle spaces and multiple underscores', () => {
            expect((0, validationUtils_1.sanitizeFilename)('my   file   name.pdf')).toBe('my_file_name.pdf');
        });
        it('should limit filename length', () => {
            const longName = 'a'.repeat(300);
            const sanitized = (0, validationUtils_1.sanitizeFilename)(longName);
            expect(sanitized.length).toBeLessThanOrEqual(255);
        });
    });
    describe('Type Guards', () => {
        describe('isNotNull', () => {
            it('should identify non-null values', () => {
                expect((0, validationUtils_1.isNotNull)('string')).toBe(true);
                expect((0, validationUtils_1.isNotNull)(0)).toBe(true);
                expect((0, validationUtils_1.isNotNull)(false)).toBe(true);
            });
            it('should identify null/undefined values', () => {
                expect((0, validationUtils_1.isNotNull)(null)).toBe(false);
                expect((0, validationUtils_1.isNotNull)(undefined)).toBe(false);
            });
        });
        describe('isString', () => {
            it('should identify string values', () => {
                expect((0, validationUtils_1.isString)('hello')).toBe(true);
                expect((0, validationUtils_1.isString)('')).toBe(true);
            });
            it('should reject non-string values', () => {
                expect((0, validationUtils_1.isString)(123)).toBe(false);
                expect((0, validationUtils_1.isString)(null)).toBe(false);
            });
        });
        describe('isNumber', () => {
            it('should identify valid numbers', () => {
                expect((0, validationUtils_1.isNumber)(123)).toBe(true);
                expect((0, validationUtils_1.isNumber)(0)).toBe(true);
                expect((0, validationUtils_1.isNumber)(-456)).toBe(true);
            });
            it('should reject invalid numbers', () => {
                expect((0, validationUtils_1.isNumber)(NaN)).toBe(false);
                expect((0, validationUtils_1.isNumber)('123')).toBe(false);
                expect((0, validationUtils_1.isNumber)(null)).toBe(false);
            });
        });
        describe('isBoolean', () => {
            it('should identify boolean values', () => {
                expect((0, validationUtils_1.isBoolean)(true)).toBe(true);
                expect((0, validationUtils_1.isBoolean)(false)).toBe(true);
            });
            it('should reject non-boolean values', () => {
                expect((0, validationUtils_1.isBoolean)(0)).toBe(false);
                expect((0, validationUtils_1.isBoolean)('true')).toBe(false);
                expect((0, validationUtils_1.isBoolean)(null)).toBe(false);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxBZG1pblxcRG9jdW1lbnRzXFxSU1RcXFBERiBFZGl0b3JcXF9fdGVzdHNfX1xcY29tbW9uXFx1dGlsc1xcdmFsaWRhdGlvblV0aWxzLnRlc3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILCtFQXNCbUQ7QUFFbkQsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNwQyxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO1lBQy9DLE1BQU0sQ0FBQyxJQUFBLDhCQUFZLEVBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwRCxNQUFNLENBQUMsSUFBQSw4QkFBWSxFQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0QsTUFBTSxDQUFDLElBQUEsOEJBQVksRUFBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtZQUM3QyxNQUFNLENBQUMsSUFBQSw4QkFBWSxFQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxJQUFBLDhCQUFZLEVBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLElBQUEsOEJBQVksRUFBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCxNQUFNLENBQUMsSUFBQSw4QkFBWSxFQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FB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QUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7Z0JBQzFDLE1BQU0sQ0FBQyxJQUFBLDJCQUFTLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pDLE1BQU0sQ0FBQyxJQUFBLDJCQUFTLEVBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RDLE1BQU0sQ0FBQyxJQUFBLDJCQUFTLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcRG9jdW1lbnRzXFxSU1RcXFBERiBFZGl0b3JcXF9fdGVzdHNfX1xcY29tbW9uXFx1dGlsc1xcdmFsaWRhdGlvblV0aWxzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbml0IHRlc3RzIGZvciBWYWxpZGF0aW9uIFV0aWxpdHkgRnVuY3Rpb25zXG4gKi9cblxuaW1wb3J0IHtcbiAgaXNWYWxpZEVtYWlsLFxuICBpc1ZhbGlkVXJsLFxuICBoYXNWYWxpZEV4dGVuc2lvbixcbiAgaXNWYWxpZEZpbGVTaXplLFxuICBpc1ZhbGlkU3RyaW5nLFxuICBpc1ZhbGlkTnVtYmVyLFxuICBoYXNSZXF1aXJlZFByb3BlcnRpZXMsXG4gIGlzVmFsaWRBcnJheSxcbiAgaXNTdHJvbmdQYXNzd29yZCxcbiAgaXNWYWxpZEhleENvbG9yLFxuICBpc1ZhbGlkUkdCLFxuICBpc1ZhbGlkUGFnZU51bWJlcixcbiAgaXNWYWxpZFpvb20sXG4gIGlzVmFsaWRSZWN0YW5nbGUsXG4gIGlzVmFsaWRQb2ludCxcbiAgc2FuaXRpemVTdHJpbmcsXG4gIHNhbml0aXplRmlsZW5hbWUsXG4gIGlzTm90TnVsbCxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW5cbn0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbW1vbi91dGlscy92YWxpZGF0aW9uVXRpbHMnO1xuXG5kZXNjcmliZSgnVmFsaWRhdGlvbiBVdGlsaXRpZXMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdpc1ZhbGlkRW1haWwnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjb3JyZWN0IGVtYWlsIGZvcm1hdHMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZEVtYWlsKCd1c2VyQGV4YW1wbGUuY29tJykpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZEVtYWlsKCd0ZXN0LmVtYWlsK3RhZ0Bkb21haW4uY28udWsnKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkRW1haWwoJ3VzZXIxMjNAdGVzdC1kb21haW4ub3JnJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIGVtYWlsIGZvcm1hdHMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZEVtYWlsKCdpbnZhbGlkLWVtYWlsJykpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRFbWFpbCgndXNlckAnKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZEVtYWlsKCdAZG9tYWluLmNvbScpKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkRW1haWwoJ3VzZXIgc3BhY2VAZG9tYWluLmNvbScpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzVmFsaWRVcmwnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjb3JyZWN0IFVSTCBmb3JtYXRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRVcmwoJ2h0dHBzOi8vZXhhbXBsZS5jb20nKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkVXJsKCdodHRwOi8vbG9jYWxob3N0OjMwMDAnKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkVXJsKCdmdHA6Ly9maWxlcy5leGFtcGxlLmNvbS9maWxlLnBkZicpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBVUkwgZm9ybWF0cycsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkVXJsKCdub3QtYS11cmwnKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZFVybCgnOi8vZXhhbXBsZS5jb20nKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZFVybCgnJykpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaGFzVmFsaWRFeHRlbnNpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBhbGxvd2VkIGV4dGVuc2lvbnMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaGFzVmFsaWRFeHRlbnNpb24oJ2RvY3VtZW50LnBkZicsIFsncGRmJywgJ2RvYyddKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChoYXNWYWxpZEV4dGVuc2lvbignaW1hZ2UuUE5HJywgWydwbmcnLCAnanBnJ10pKS50b0JlKHRydWUpOyAvLyBDYXNlIGluc2Vuc2l0aXZlXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIGV4dGVuc2lvbnMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaGFzVmFsaWRFeHRlbnNpb24oJ2RvY3VtZW50LnR4dCcsIFsncGRmJywgJ2RvYyddKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaGFzVmFsaWRFeHRlbnNpb24oJ2ZpbGUnLCBbJ3BkZicsICdkb2MnXSkpLnRvQmUoZmFsc2UpOyAvLyBObyBleHRlbnNpb25cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzVmFsaWRGaWxlU2l6ZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGZpbGUgc2l6ZXMgd2l0aGluIGxpbWl0cycsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkRmlsZVNpemUoMTAyNCwgMSkpLnRvQmUodHJ1ZSk7IC8vIDFLQiB3aXRoaW4gMU1CIGxpbWl0XG4gICAgICBleHBlY3QoaXNWYWxpZEZpbGVTaXplKDEwMjQgKiAxMDI0LCAxKSkudG9CZSh0cnVlKTsgLy8gRXhhY3RseSAxTUJcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGZpbGVzIHRoYXQgYXJlIHRvbyBsYXJnZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkRmlsZVNpemUoMiAqIDEwMjQgKiAxMDI0LCAxKSkudG9CZShmYWxzZSk7IC8vIDJNQiBleGNlZWRzIDFNQiBsaW1pdFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgemVybyBvciBuZWdhdGl2ZSBzaXplcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkRmlsZVNpemUoMCwgMSkpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRGaWxlU2l6ZSgtMTAwLCAxKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1ZhbGlkU3RyaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgc3RyaW5ncyB3aXRoaW4gbGVuZ3RoIGxpbWl0cycsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkU3RyaW5nKCd2YWxpZCcsIDEsIDEwKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkU3RyaW5nKCdleGFjdGx5NScsIDUsIDUpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3Qgc3RyaW5ncyBvdXRzaWRlIGxlbmd0aCBsaW1pdHMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZFN0cmluZygnc2hvcnQnLCAxMCwgMjApKS50b0JlKGZhbHNlKTsgLy8gVG9vIHNob3J0XG4gICAgICBleHBlY3QoaXNWYWxpZFN0cmluZygndmVyeWxvbmdzdHJpbmcnLCAxLCA1KSkudG9CZShmYWxzZSk7IC8vIFRvbyBsb25nXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB3aGl0ZXNwYWNlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkU3RyaW5nKCcgICAnLCAxLCAxMCkpLnRvQmUoZmFsc2UpOyAvLyBPbmx5IHdoaXRlc3BhY2VcbiAgICAgIGV4cGVjdChpc1ZhbGlkU3RyaW5nKCcgdmFsaWQgJywgMSwgMTApKS50b0JlKHRydWUpOyAvLyBWYWxpZCB3aXRoIHdoaXRlc3BhY2VcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG5vbi1zdHJpbmdzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRTdHJpbmcoMTIzIGFzIGFueSwgMSwgMTApKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkU3RyaW5nKG51bGwgYXMgYW55LCAxLCAxMCkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNWYWxpZE51bWJlcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIG51bWJlcnMgd2l0aGluIHJhbmdlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWROdW1iZXIoNSwgMCwgMTApKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWROdW1iZXIoMCwgMCwgMTApKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWROdW1iZXIoMTAsIDAsIDEwKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG51bWJlcnMgb3V0c2lkZSByYW5nZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkTnVtYmVyKC0xLCAwLCAxMCkpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzVmFsaWROdW1iZXIoMTEsIDAsIDEwKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIG51bWJlcnMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZE51bWJlcihOYU4sIDAsIDEwKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZE51bWJlcihJbmZpbml0eSwgMCwgMTApKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkTnVtYmVyKCc1JyBhcyBhbnksIDAsIDEwKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYXNSZXF1aXJlZFByb3BlcnRpZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBvYmplY3RzIHdpdGggYWxsIHJlcXVpcmVkIHByb3BlcnRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBvYmogPSB7IG5hbWU6ICd0ZXN0JywgYWdlOiAyNSwgYWN0aXZlOiB0cnVlIH07XG4gICAgICBleHBlY3QoaGFzUmVxdWlyZWRQcm9wZXJ0aWVzKG9iaiwgWyduYW1lJywgJ2FnZSddKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG9iamVjdHMgbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb2JqID0geyBuYW1lOiAndGVzdCcgfTtcbiAgICAgIGV4cGVjdChoYXNSZXF1aXJlZFByb3BlcnRpZXMob2JqLCBbJ25hbWUnLCAnYWdlJ10pKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG5vbi1vYmplY3RzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGhhc1JlcXVpcmVkUHJvcGVydGllcyhudWxsLCBbJ25hbWUnXSkpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGhhc1JlcXVpcmVkUHJvcGVydGllcygnc3RyaW5nJywgWyduYW1lJ10pKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzVmFsaWRBcnJheScsICgpID0+IHtcbiAgICBjb25zdCBpc1N0cmluZ1ZhbGlkYXRvciA9IChpdGVtOiBhbnkpOiBpdGVtIGlzIHN0cmluZyA9PiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZyc7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIGFycmF5cyB3aXRoIHZhbGlkIGl0ZW1zJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRBcnJheShbJ2EnLCAnYicsICdjJ10sIGlzU3RyaW5nVmFsaWRhdG9yKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkQXJyYXkoWydzaW5nbGUnXSwgaXNTdHJpbmdWYWxpZGF0b3IsIDEsIDEpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgYXJyYXlzIHdpdGggaW52YWxpZCBpdGVtcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkQXJyYXkoWydhJywgMSwgJ2MnXSwgaXNTdHJpbmdWYWxpZGF0b3IpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgYXJyYXkgbGVuZ3RoIGNvbnN0cmFpbnRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRBcnJheShbJ2EnXSwgaXNTdHJpbmdWYWxpZGF0b3IsIDIsIDUpKS50b0JlKGZhbHNlKTsgLy8gVG9vIHNob3J0XG4gICAgICBleHBlY3QoaXNWYWxpZEFycmF5KFsnYScsICdiJywgJ2MnLCAnZCcsICdlJywgJ2YnXSwgaXNTdHJpbmdWYWxpZGF0b3IsIDEsIDMpKS50b0JlKGZhbHNlKTsgLy8gVG9vIGxvbmdcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IG5vbi1hcnJheXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZEFycmF5KCdub3QtYXJyYXknLCBpc1N0cmluZ1ZhbGlkYXRvcikpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRBcnJheShudWxsLCBpc1N0cmluZ1ZhbGlkYXRvcikpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNTdHJvbmdQYXNzd29yZCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHN0cm9uZyBwYXNzd29yZHMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNTdHJvbmdQYXNzd29yZCgnU3Ryb25nUEBzczEnKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1N0cm9uZ1Bhc3N3b3JkKCdNeVNlY3VyZTEyMyEnKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHdlYWsgcGFzc3dvcmRzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzU3Ryb25nUGFzc3dvcmQoJ3Nob3J0JykpLnRvQmUoZmFsc2UpOyAvLyBUb28gc2hvcnRcbiAgICAgIGV4cGVjdChpc1N0cm9uZ1Bhc3N3b3JkKCdub3VwcGVyY2FzZTEyMyEnKSkudG9CZShmYWxzZSk7IC8vIE5vIHVwcGVyY2FzZVxuICAgICAgZXhwZWN0KGlzU3Ryb25nUGFzc3dvcmQoJ05PTE9XRVJDQVNFMTIzIScpKS50b0JlKGZhbHNlKTsgLy8gTm8gbG93ZXJjYXNlXG4gICAgICBleHBlY3QoaXNTdHJvbmdQYXNzd29yZCgnTm9OdW1iZXJzIScpKS50b0JlKGZhbHNlKTsgLy8gTm8gbnVtYmVyc1xuICAgICAgZXhwZWN0KGlzU3Ryb25nUGFzc3dvcmQoJ05vU3BlY2lhbDEyMycpKS50b0JlKGZhbHNlKTsgLy8gTm8gc3BlY2lhbCBjaGFyc1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNWYWxpZEhleENvbG9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgY29ycmVjdCBoZXggY29sb3JzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRIZXhDb2xvcignI0ZGMDAwMCcpKS50b0JlKHRydWUpOyAvLyA2IGRpZ2l0c1xuICAgICAgZXhwZWN0KGlzVmFsaWRIZXhDb2xvcignI2YwMCcpKS50b0JlKHRydWUpOyAvLyAzIGRpZ2l0c1xuICAgICAgZXhwZWN0KGlzVmFsaWRIZXhDb2xvcignIzEyM0FCQycpKS50b0JlKHRydWUpOyAvLyBNaXhlZCBjYXNlXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIGhleCBjb2xvcnMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZEhleENvbG9yKCdGRjAwMDAnKSkudG9CZShmYWxzZSk7IC8vIE5vICNcbiAgICAgIGV4cGVjdChpc1ZhbGlkSGV4Q29sb3IoJyNHRzAwMDAnKSkudG9CZShmYWxzZSk7IC8vIEludmFsaWQgaGV4IGNoYXJzXG4gICAgICBleHBlY3QoaXNWYWxpZEhleENvbG9yKCcjRkYwMCcpKS50b0JlKGZhbHNlKTsgLy8gV3JvbmcgbGVuZ3RoXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1ZhbGlkUkdCJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgUkdCIHZhbHVlcyBpbiByYW5nZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkUkdCKDI1NSwgMCwgMCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZFJHQigxMjgsIDEyOCwgMTI4KSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkUkdCKDAsIDAsIDApKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgUkdCIHZhbHVlcyBvdXQgb2YgcmFuZ2UnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZFJHQigyNTYsIDAsIDApKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkUkdCKC0xLCAwLCAwKSkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZFJHQigxMjgsIDMwMCwgMTI4KSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1ZhbGlkUGFnZU51bWJlcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHBhZ2UgbnVtYmVycyB3aXRoaW4gcmFuZ2UnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZFBhZ2VOdW1iZXIoMSwgMTApKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRQYWdlTnVtYmVyKDEwLCAxMCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZFBhZ2VOdW1iZXIoNSwgMjApKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgcGFnZSBudW1iZXJzIG91dCBvZiByYW5nZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkUGFnZU51bWJlcigwLCAxMCkpLnRvQmUoZmFsc2UpOyAvLyBQYWdlcyBzdGFydCBhdCAxXG4gICAgICBleHBlY3QoaXNWYWxpZFBhZ2VOdW1iZXIoMTEsIDEwKSkudG9CZShmYWxzZSk7IC8vIEV4Y2VlZHMgdG90YWxcbiAgICAgIGV4cGVjdChpc1ZhbGlkUGFnZU51bWJlcigxLjUsIDEwKSkudG9CZShmYWxzZSk7IC8vIE5vdCBpbnRlZ2VyXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1ZhbGlkWm9vbScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHpvb20gbGV2ZWxzIGluIHJhbmdlJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRab29tKDEuMCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoaXNWYWxpZFpvb20oMC4xKSkudG9CZSh0cnVlKTsgLy8gTWluaW11bVxuICAgICAgZXhwZWN0KGlzVmFsaWRab29tKDEwLjApKS50b0JlKHRydWUpOyAvLyBNYXhpbXVtXG4gICAgICBleHBlY3QoaXNWYWxpZFpvb20oMi41KSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IHpvb20gbGV2ZWxzIG91dCBvZiByYW5nZScsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkWm9vbSgwLjA1KSkudG9CZShmYWxzZSk7IC8vIEJlbG93IG1pbmltdW1cbiAgICAgIGV4cGVjdChpc1ZhbGlkWm9vbSgxNS4wKSkudG9CZShmYWxzZSk7IC8vIEFib3ZlIG1heGltdW1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzVmFsaWRSZWN0YW5nbGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjb3JyZWN0IHJlY3RhbmdsZSBvYmplY3RzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRSZWN0YW5nbGUoeyB4OiAwLCB5OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDUwIH0pKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGlzVmFsaWRSZWN0YW5nbGUoeyB4OiAxMCwgeTogMjAsIHdpZHRoOiAxLCBoZWlnaHQ6IDEgfSkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIHJlY3RhbmdsZSBvYmplY3RzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGlzVmFsaWRSZWN0YW5nbGUoeyB4OiAwLCB5OiAwLCB3aWR0aDogMTAwIH0gYXMgYW55KSkudG9CZShmYWxzZSk7IC8vIE1pc3NpbmcgaGVpZ2h0XG4gICAgICBleHBlY3QoaXNWYWxpZFJlY3RhbmdsZSh7IHg6IC0xLCB5OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDUwIH0pKS50b0JlKGZhbHNlKTsgLy8gTmVnYXRpdmUgeFxuICAgICAgZXhwZWN0KGlzVmFsaWRSZWN0YW5nbGUoeyB4OiAwLCB5OiAwLCB3aWR0aDogLTEwMCwgaGVpZ2h0OiA1MCB9KSkudG9CZShmYWxzZSk7IC8vIE5lZ2F0aXZlIHdpZHRoXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpc1ZhbGlkUG9pbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBjb3JyZWN0IHBvaW50IG9iamVjdHMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoaXNWYWxpZFBvaW50KHsgeDogMCwgeTogMCB9KSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkUG9pbnQoeyB4OiAxMDAsIHk6IDIwMCB9KSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVqZWN0IGludmFsaWQgcG9pbnQgb2JqZWN0cycsICgpID0+IHtcbiAgICAgIGV4cGVjdChpc1ZhbGlkUG9pbnQoeyB4OiAwIH0gYXMgYW55KSkudG9CZShmYWxzZSk7IC8vIE1pc3NpbmcgeVxuICAgICAgZXhwZWN0KGlzVmFsaWRQb2ludCh7IHg6IC0xLCB5OiAwIH0pKS50b0JlKGZhbHNlKTsgLy8gTmVnYXRpdmUgeFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc2FuaXRpemVTdHJpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZW1vdmUgSFRNTCB0YWdzIGFuZCBjb250cm9sIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgICBleHBlY3Qoc2FuaXRpemVTdHJpbmcoJzxzY3JpcHQ+YWxlcnQoXCJ4c3NcIik8L3NjcmlwdD5oZWxsbycpKS50b0JlKCdhbGVydChcInhzc1wiKWhlbGxvJyk7XG4gICAgICBleHBlY3Qoc2FuaXRpemVTdHJpbmcoJyAgdGVzdCAgJykpLnRvQmUoJ3Rlc3QnKTsgLy8gVHJpbSB3aGl0ZXNwYWNlXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlbW92ZSBjb250cm9sIGNoYXJhY3RlcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB3aXRoQ29udHJvbENoYXJzID0gJ2hlbGxvXFx4MDBcXHgwMVxceDFGXFx4N0Z3b3JsZCc7XG4gICAgICBleHBlY3Qoc2FuaXRpemVTdHJpbmcod2l0aENvbnRyb2xDaGFycykpLnRvQmUoJ2hlbGxvd29ybGQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Nhbml0aXplRmlsZW5hbWUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXBsYWNlIGludmFsaWQgZmlsZW5hbWUgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICAgIGV4cGVjdChzYW5pdGl6ZUZpbGVuYW1lKCdmaWxlPD46XCIvXFxcXHw/Km5hbWUucGRmJykpLnRvQmUoJ2ZpbGVfX19fX19fX19uYW1lLnBkZicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3BhY2VzIGFuZCBtdWx0aXBsZSB1bmRlcnNjb3JlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChzYW5pdGl6ZUZpbGVuYW1lKCdteSAgIGZpbGUgICBuYW1lLnBkZicpKS50b0JlKCdteV9maWxlX25hbWUucGRmJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxpbWl0IGZpbGVuYW1lIGxlbmd0aCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGxvbmdOYW1lID0gJ2EnLnJlcGVhdCgzMDApO1xuICAgICAgY29uc3Qgc2FuaXRpemVkID0gc2FuaXRpemVGaWxlbmFtZShsb25nTmFtZSk7XG4gICAgICBleHBlY3Qoc2FuaXRpemVkLmxlbmd0aCkudG9CZUxlc3NUaGFuT3JFcXVhbCgyNTUpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVHlwZSBHdWFyZHMnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2lzTm90TnVsbCcsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgaWRlbnRpZnkgbm9uLW51bGwgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoaXNOb3ROdWxsKCdzdHJpbmcnKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGlzTm90TnVsbCgwKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGlzTm90TnVsbChmYWxzZSkpLnRvQmUodHJ1ZSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBpZGVudGlmeSBudWxsL3VuZGVmaW5lZCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpc05vdE51bGwobnVsbCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoaXNOb3ROdWxsKHVuZGVmaW5lZCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnaXNTdHJpbmcnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGlkZW50aWZ5IHN0cmluZyB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpc1N0cmluZygnaGVsbG8nKSkudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KGlzU3RyaW5nKCcnKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlamVjdCBub24tc3RyaW5nIHZhbHVlcycsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KGlzU3RyaW5nKDEyMykpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoaXNTdHJpbmcobnVsbCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnaXNOdW1iZXInLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGlkZW50aWZ5IHZhbGlkIG51bWJlcnMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpc051bWJlcigxMjMpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXNOdW1iZXIoMCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChpc051bWJlcigtNDU2KSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlamVjdCBpbnZhbGlkIG51bWJlcnMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpc051bWJlcihOYU4pKS50b0JlKGZhbHNlKTtcbiAgICAgICAgZXhwZWN0KGlzTnVtYmVyKCcxMjMnKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGV4cGVjdChpc051bWJlcihudWxsKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdpc0Jvb2xlYW4nLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGlkZW50aWZ5IGJvb2xlYW4gdmFsdWVzJywgKCkgPT4ge1xuICAgICAgICBleHBlY3QoaXNCb29sZWFuKHRydWUpKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoaXNCb29sZWFuKGZhbHNlKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlamVjdCBub24tYm9vbGVhbiB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpc0Jvb2xlYW4oMCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoaXNCb29sZWFuKCd0cnVlJykpLnRvQmUoZmFsc2UpO1xuICAgICAgICBleHBlY3QoaXNCb29sZWFuKG51bGwpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==