22a1ef16eebe1043bdc0121bed8cbc8b
"use strict";
/**
 * Enhanced Common Utilities for Professional PDF Editor
 * Provides robust PDF handling, validation, and error recovery
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePDFBytes = validatePDFBytes;
exports.createSafePDFBytes = createSafePDFBytes;
exports.isElectron = isElectron;
exports.isDevelopment = isDevelopment;
exports.formatFileSize = formatFileSize;
exports.generateId = generateId;
exports.debounce = debounce;
exports.loadPDFSafely = loadPDFSafely;
exports.deepClone = deepClone;
const pdfjsLib = __importStar(require("pdfjs-dist"));
// PDF validation constants
const PDF_HEADER_SIGNATURES = [
    '%PDF-1.0', '%PDF-1.1', '%PDF-1.2', '%PDF-1.3', '%PDF-1.4',
    '%PDF-1.5', '%PDF-1.6', '%PDF-1.7', '%PDF-2.0'
];
const PDF_FOOTER_SIGNATURES = ['%%EOF', 'endobj', 'xref'];
/**
 * Enhanced PDF bytes validation with comprehensive checks
 */
function validatePDFBytes(pdfBytes) {
    try {
        if (!pdfBytes) {
            console.warn('PDF validation failed: null or undefined data');
            return false;
        }
        // Convert ArrayBuffer to Uint8Array if needed
        const bytes = pdfBytes instanceof ArrayBuffer ? new Uint8Array(pdfBytes) : pdfBytes;
        if (bytes.length === 0) {
            console.warn('PDF validation failed: empty data');
            return false;
        }
        // Minimum PDF size check (a valid PDF should be at least 100 bytes)
        if (bytes.length < 100) {
            console.warn('PDF validation failed: file too small');
            return false;
        }
        // Check PDF header
        const headerBytes = bytes.slice(0, 20);
        const headerString = new TextDecoder('ascii', { fatal: false }).decode(headerBytes);
        const hasValidHeader = PDF_HEADER_SIGNATURES.some(signature => headerString.startsWith(signature));
        if (!hasValidHeader) {
            console.warn('PDF validation failed: invalid header');
            return false;
        }
        // Check PDF footer (look in last 1024 bytes)
        const footerSearchSize = Math.min(1024, bytes.length);
        const footerBytes = bytes.slice(-footerSearchSize);
        const footerString = new TextDecoder('ascii', { fatal: false }).decode(footerBytes);
        const hasValidFooter = PDF_FOOTER_SIGNATURES.some(signature => footerString.includes(signature));
        if (!hasValidFooter) {
            console.warn('PDF validation failed: invalid footer');
            return false;
        }
        // Additional structural checks
        const pdfString = new TextDecoder('ascii', { fatal: false }).decode(bytes);
        // Check for essential PDF objects
        if (!pdfString.includes('obj') || !pdfString.includes('endobj')) {
            console.warn('PDF validation failed: missing essential objects');
            return false;
        }
        console.log('‚úÖ PDF validation passed');
        return true;
    }
    catch (error) {
        console.error('PDF validation error:', error);
        return false;
    }
}
/**
 * Create a safe, detachment-resistant copy of PDF bytes
 */
function createSafePDFBytes(originalBytes) {
    try {
        if (!originalBytes) {
            throw new Error('Cannot create safe copy of null/undefined PDF bytes');
        }
        // Convert ArrayBuffer to Uint8Array if needed
        const sourceBytes = originalBytes instanceof ArrayBuffer
            ? new Uint8Array(originalBytes)
            : originalBytes;
        if (sourceBytes.length === 0) {
            throw new Error('Cannot create safe copy of empty PDF bytes');
        }
        // Create multiple safe copies using different methods for maximum reliability
        let safeCopy;
        try {
            // Method 1: Uint8Array.from() - most reliable
            safeCopy = Uint8Array.from(sourceBytes);
            console.log(`‚úÖ Safe PDF copy created using Uint8Array.from (${safeCopy.length} bytes)`);
        }
        catch (fromError) {
            console.warn('‚ö†Ô∏è Uint8Array.from failed, trying alternative method:', fromError);
            try {
                // Method 2: new Uint8Array with set()
                safeCopy = new Uint8Array(sourceBytes.length);
                safeCopy.set(sourceBytes);
                console.log(`‚úÖ Safe PDF copy created using set() method (${safeCopy.length} bytes)`);
            }
            catch (setError) {
                console.warn('‚ö†Ô∏è set() method failed, using manual copy:', setError);
                // Method 3: Manual byte-by-byte copy (most reliable fallback)
                safeCopy = new Uint8Array(sourceBytes.length);
                for (let i = 0; i < sourceBytes.length; i++) {
                    safeCopy[i] = sourceBytes[i];
                }
                console.log(`‚úÖ Safe PDF copy created using manual copy (${safeCopy.length} bytes)`);
            }
        }
        // Verify the copy integrity
        if (safeCopy.length !== sourceBytes.length) {
            throw new Error('Safe copy length mismatch');
        }
        // Sample verification (check first and last 100 bytes)
        const sampleSize = Math.min(100, sourceBytes.length);
        for (let i = 0; i < sampleSize; i++) {
            if (safeCopy[i] !== sourceBytes[i]) {
                throw new Error(`Byte integrity check failed at position ${i}`);
            }
        }
        // Check last bytes
        for (let i = Math.max(0, sourceBytes.length - sampleSize); i < sourceBytes.length; i++) {
            if (safeCopy[i] !== sourceBytes[i]) {
                throw new Error(`Byte integrity check failed at position ${i}`);
            }
        }
        return safeCopy;
    }
    catch (error) {
        console.error('‚ùå Failed to create safe PDF copy:', error);
        throw error;
    }
}
/**
 * Utility to check if we're running in Electron
 */
function isElectron() {
    return typeof window !== 'undefined' && window.electronAPI !== undefined;
}
/**
 * Utility to check if we're in development mode
 */
function isDevelopment() {
    return process.env.NODE_ENV === 'development';
}
/**
 * Format file size for display
 */
function formatFileSize(bytes) {
    if (bytes === 0)
        return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
/**
 * Generate unique ID
 */
function generateId() {
    return `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
/**
 * Debounce function for performance optimization
 */
function debounce(func, wait) {
    let timeout;
    return (...args) => {
        clearTimeout(timeout);
        timeout = setTimeout(() => func(...args), wait);
    };
}
/**
 * Safely load PDF with enhanced error handling and recovery
 */
async function loadPDFSafely(data, options = {}) {
    const maxRetries = 3;
    let lastError = null;
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`üìÑ PDF loading attempt ${attempt}/${maxRetries}`);
            // Create safe copy to prevent detachment issues
            const safeBytes = createSafePDFBytes(data);
            // Enhanced loading options
            const loadingOptions = {
                data: safeBytes,
                cMapUrl: '/cmaps/',
                cMapPacked: true,
                standardFontDataUrl: '/fonts/',
                useSystemFonts: false,
                disableFontFace: false,
                disableRange: false,
                disableStream: false,
                disableAutoFetch: false,
                pdfBug: false,
                maxImageSize: 16777216, // 16MB
                isEvalSupported: false,
                verbosity: 0, // Reduce console noise
                ...options
            };
            const loadingTask = pdfjsLib.getDocument(loadingOptions);
            // Set up progress tracking if available
            if (loadingTask.onProgress) {
                loadingTask.onProgress = (progress) => {
                    console.log(`üìä PDF loading progress: ${Math.round((progress.loaded / progress.total) * 100)}%`);
                };
            }
            const pdf = await loadingTask.promise;
            console.log(`‚úÖ PDF loaded successfully: ${pdf.numPages} pages`);
            return pdf;
        }
        catch (error) {
            lastError = error;
            console.error(`‚ùå PDF loading attempt ${attempt} failed:`, lastError.message);
            // If this is not the last attempt, wait before retrying
            if (attempt < maxRetries) {
                const delay = Math.pow(2, attempt) * 1000; // Exponential backoff
                console.log(`‚è≥ Waiting ${delay}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }
    // All attempts failed
    const errorMessage = `Failed to load PDF after ${maxRetries} attempts: ${lastError?.message || 'Unknown error'}`;
    console.error('‚ùå All PDF loading attempts failed:', errorMessage);
    throw new Error(errorMessage);
}
/**
 * Deep clone utility
 */
function deepClone(obj) {
    if (obj === null || typeof obj !== 'object')
        return obj;
    if (obj instanceof Date)
        return new Date(obj.getTime());
    if (obj instanceof Array)
        return obj.map(item => deepClone(item));
    if (typeof obj === 'object') {
        const clonedObj = {};
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                clonedObj[key] = deepClone(obj[key]);
            }
        }
        return clonedObj;
    }
    return obj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,