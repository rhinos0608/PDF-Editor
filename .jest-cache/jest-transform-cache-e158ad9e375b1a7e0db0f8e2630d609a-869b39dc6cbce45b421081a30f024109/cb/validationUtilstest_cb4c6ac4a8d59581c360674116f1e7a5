bee3dd00c5cb647d8c788aaf754c739f
"use strict";
/**
 * Unit tests for Validation Utility Functions
 */
Object.defineProperty(exports, "__esModule", { value: true });
const validationUtils_1 = require("../../../src/common/utils/validationUtils");
describe('Validation Utilities', () => {
    describe('isValidEmail', () => {
        it('should validate correct email formats', () => {
            expect((0, validationUtils_1.isValidEmail)('user@example.com')).toBe(true);
            expect((0, validationUtils_1.isValidEmail)('test.email+tag@domain.co.uk')).toBe(true);
            expect((0, validationUtils_1.isValidEmail)('user123@test-domain.org')).toBe(true);
        });
        it('should reject invalid email formats', () => {
            expect((0, validationUtils_1.isValidEmail)('invalid-email')).toBe(false);
            expect((0, validationUtils_1.isValidEmail)('user@')).toBe(false);
            expect((0, validationUtils_1.isValidEmail)('@domain.com')).toBe(false);
            expect((0, validationUtils_1.isValidEmail)('user space@domain.com')).toBe(false);
        });
    });
    describe('isValidUrl', () => {
        it('should validate correct URL formats', () => {
            expect((0, validationUtils_1.isValidUrl)('https://example.com')).toBe(true);
            expect((0, validationUtils_1.isValidUrl)('http://localhost:3000')).toBe(true);
            expect((0, validationUtils_1.isValidUrl)('ftp://files.example.com/file.pdf')).toBe(true);
        });
        it('should reject invalid URL formats', () => {
            expect((0, validationUtils_1.isValidUrl)('not-a-url')).toBe(false);
            expect((0, validationUtils_1.isValidUrl)('://example.com')).toBe(false);
            expect((0, validationUtils_1.isValidUrl)('')).toBe(false);
        });
    });
    describe('hasValidExtension', () => {
        it('should validate allowed extensions', () => {
            expect((0, validationUtils_1.hasValidExtension)('document.pdf', ['pdf', 'doc'])).toBe(true);
            expect((0, validationUtils_1.hasValidExtension)('image.PNG', ['png', 'jpg'])).toBe(true); // Case insensitive
        });
        it('should reject invalid extensions', () => {
            expect((0, validationUtils_1.hasValidExtension)('document.txt', ['pdf', 'doc'])).toBe(false);
            expect((0, validationUtils_1.hasValidExtension)('file', ['pdf', 'doc'])).toBe(false); // No extension
        });
    });
    describe('isValidFileSize', () => {
        it('should validate file sizes within limits', () => {
            expect((0, validationUtils_1.isValidFileSize)(1024, 1)).toBe(true); // 1KB within 1MB limit
            expect((0, validationUtils_1.isValidFileSize)(1024 * 1024, 1)).toBe(true); // Exactly 1MB
        });
        it('should reject files that are too large', () => {
            expect((0, validationUtils_1.isValidFileSize)(2 * 1024 * 1024, 1)).toBe(false); // 2MB exceeds 1MB limit
        });
        it('should reject zero or negative sizes', () => {
            expect((0, validationUtils_1.isValidFileSize)(0, 1)).toBe(false);
            expect((0, validationUtils_1.isValidFileSize)(-100, 1)).toBe(false);
        });
    });
    describe('isValidString', () => {
        it('should validate strings within length limits', () => {
            expect((0, validationUtils_1.isValidString)('valid', 1, 10)).toBe(true);
            expect((0, validationUtils_1.isValidString)('exactly', 5, 10)).toBe(true); // 'exactly' has 7 chars, within limit
        });
        it('should reject strings outside length limits', () => {
            expect((0, validationUtils_1.isValidString)('short', 10, 20)).toBe(false); // Too short
            expect((0, validationUtils_1.isValidString)('verylongstring', 1, 5)).toBe(false); // Too long
        });
        it('should handle whitespace correctly', () => {
            expect((0, validationUtils_1.isValidString)('   ', 1, 10)).toBe(false); // Only whitespace
            expect((0, validationUtils_1.isValidString)(' valid ', 1, 10)).toBe(true); // Valid with whitespace
        });
        it('should reject non-strings', () => {
            expect((0, validationUtils_1.isValidString)(123, 1, 10)).toBe(false);
            expect((0, validationUtils_1.isValidString)(null, 1, 10)).toBe(false);
        });
    });
    describe('isValidNumber', () => {
        it('should validate numbers within range', () => {
            expect((0, validationUtils_1.isValidNumber)(5, 0, 10)).toBe(true);
            expect((0, validationUtils_1.isValidNumber)(0, 0, 10)).toBe(true);
            expect((0, validationUtils_1.isValidNumber)(10, 0, 10)).toBe(true);
        });
        it('should reject numbers outside range', () => {
            expect((0, validationUtils_1.isValidNumber)(-1, 0, 10)).toBe(false);
            expect((0, validationUtils_1.isValidNumber)(11, 0, 10)).toBe(false);
        });
        it('should reject invalid numbers', () => {
            expect((0, validationUtils_1.isValidNumber)(NaN, 0, 10)).toBe(false);
            expect((0, validationUtils_1.isValidNumber)(Infinity, 0, 10)).toBe(false);
            expect((0, validationUtils_1.isValidNumber)('5', 0, 10)).toBe(false);
        });
    });
    describe('hasRequiredProperties', () => {
        it('should validate objects with all required properties', () => {
            const obj = { name: 'test', age: 25, active: true };
            expect((0, validationUtils_1.hasRequiredProperties)(obj, ['name', 'age'])).toBe(true);
        });
        it('should reject objects missing required properties', () => {
            const obj = { name: 'test' };
            expect((0, validationUtils_1.hasRequiredProperties)(obj, ['name', 'age'])).toBe(false);
        });
        it('should reject non-objects', () => {
            expect((0, validationUtils_1.hasRequiredProperties)(null, ['name'])).toBe(false);
            expect((0, validationUtils_1.hasRequiredProperties)('string', ['name'])).toBe(false);
        });
    });
    describe('isValidArray', () => {
        const isStringValidator = (item) => typeof item === 'string';
        it('should validate arrays with valid items', () => {
            expect((0, validationUtils_1.isValidArray)(['a', 'b', 'c'], isStringValidator)).toBe(true);
            expect((0, validationUtils_1.isValidArray)(['single'], isStringValidator, 1, 1)).toBe(true);
        });
        it('should reject arrays with invalid items', () => {
            expect((0, validationUtils_1.isValidArray)(['a', 1, 'c'], isStringValidator)).toBe(false);
        });
        it('should validate array length constraints', () => {
            expect((0, validationUtils_1.isValidArray)(['a'], isStringValidator, 2, 5)).toBe(false); // Too short
            expect((0, validationUtils_1.isValidArray)(['a', 'b', 'c', 'd', 'e', 'f'], isStringValidator, 1, 3)).toBe(false); // Too long
        });
        it('should reject non-arrays', () => {
            expect((0, validationUtils_1.isValidArray)('not-array', isStringValidator)).toBe(false);
            expect((0, validationUtils_1.isValidArray)(null, isStringValidator)).toBe(false);
        });
    });
    describe('isStrongPassword', () => {
        it('should validate strong passwords', () => {
            expect((0, validationUtils_1.isStrongPassword)('StrongP@ss1')).toBe(true);
            expect((0, validationUtils_1.isStrongPassword)('MySecure123!')).toBe(true);
        });
        it('should reject weak passwords', () => {
            expect((0, validationUtils_1.isStrongPassword)('short')).toBe(false); // Too short
            expect((0, validationUtils_1.isStrongPassword)('nouppercase123!')).toBe(false); // No uppercase
            expect((0, validationUtils_1.isStrongPassword)('NOLOWERCASE123!')).toBe(false); // No lowercase
            expect((0, validationUtils_1.isStrongPassword)('NoNumbers!')).toBe(false); // No numbers
            expect((0, validationUtils_1.isStrongPassword)('NoSpecial123')).toBe(false); // No special chars
        });
    });
    describe('isValidHexColor', () => {
        it('should validate correct hex colors', () => {
            expect((0, validationUtils_1.isValidHexColor)('#FF0000')).toBe(true); // 6 digits
            expect((0, validationUtils_1.isValidHexColor)('#f00')).toBe(true); // 3 digits
            expect((0, validationUtils_1.isValidHexColor)('#123ABC')).toBe(true); // Mixed case
        });
        it('should reject invalid hex colors', () => {
            expect((0, validationUtils_1.isValidHexColor)('FF0000')).toBe(false); // No #
            expect((0, validationUtils_1.isValidHexColor)('#GG0000')).toBe(false); // Invalid hex chars
            expect((0, validationUtils_1.isValidHexColor)('#FF00')).toBe(false); // Wrong length
        });
    });
    describe('isValidRGB', () => {
        it('should validate RGB values in range', () => {
            expect((0, validationUtils_1.isValidRGB)(255, 0, 0)).toBe(true);
            expect((0, validationUtils_1.isValidRGB)(128, 128, 128)).toBe(true);
            expect((0, validationUtils_1.isValidRGB)(0, 0, 0)).toBe(true);
        });
        it('should reject RGB values out of range', () => {
            expect((0, validationUtils_1.isValidRGB)(256, 0, 0)).toBe(false);
            expect((0, validationUtils_1.isValidRGB)(-1, 0, 0)).toBe(false);
            expect((0, validationUtils_1.isValidRGB)(128, 300, 128)).toBe(false);
        });
    });
    describe('isValidPageNumber', () => {
        it('should validate page numbers within range', () => {
            expect((0, validationUtils_1.isValidPageNumber)(1, 10)).toBe(true);
            expect((0, validationUtils_1.isValidPageNumber)(10, 10)).toBe(true);
            expect((0, validationUtils_1.isValidPageNumber)(5, 20)).toBe(true);
        });
        it('should reject page numbers out of range', () => {
            expect((0, validationUtils_1.isValidPageNumber)(0, 10)).toBe(false); // Pages start at 1
            expect((0, validationUtils_1.isValidPageNumber)(11, 10)).toBe(false); // Exceeds total
            expect((0, validationUtils_1.isValidPageNumber)(1.5, 10)).toBe(false); // Not integer
        });
    });
    describe('isValidZoom', () => {
        it('should validate zoom levels in range', () => {
            expect((0, validationUtils_1.isValidZoom)(1.0)).toBe(true);
            expect((0, validationUtils_1.isValidZoom)(0.1)).toBe(true); // Minimum
            expect((0, validationUtils_1.isValidZoom)(10.0)).toBe(true); // Maximum
            expect((0, validationUtils_1.isValidZoom)(2.5)).toBe(true);
        });
        it('should reject zoom levels out of range', () => {
            expect((0, validationUtils_1.isValidZoom)(0.05)).toBe(false); // Below minimum
            expect((0, validationUtils_1.isValidZoom)(15.0)).toBe(false); // Above maximum
        });
    });
    describe('isValidRectangle', () => {
        it('should validate correct rectangle objects', () => {
            expect((0, validationUtils_1.isValidRectangle)({ x: 0, y: 0, width: 100, height: 50 })).toBe(true);
            expect((0, validationUtils_1.isValidRectangle)({ x: 10, y: 20, width: 1, height: 1 })).toBe(true);
        });
        it('should reject invalid rectangle objects', () => {
            expect((0, validationUtils_1.isValidRectangle)({ x: 0, y: 0, width: 100 })).toBe(false); // Missing height
            expect((0, validationUtils_1.isValidRectangle)({ x: -1, y: 0, width: 100, height: 50 })).toBe(false); // Negative x
            expect((0, validationUtils_1.isValidRectangle)({ x: 0, y: 0, width: -100, height: 50 })).toBe(false); // Negative width
        });
    });
    describe('isValidPoint', () => {
        it('should validate correct point objects', () => {
            expect((0, validationUtils_1.isValidPoint)({ x: 0, y: 0 })).toBe(true);
            expect((0, validationUtils_1.isValidPoint)({ x: 100, y: 200 })).toBe(true);
        });
        it('should reject invalid point objects', () => {
            expect((0, validationUtils_1.isValidPoint)({ x: 0 })).toBe(false); // Missing y
            expect((0, validationUtils_1.isValidPoint)({ x: -1, y: 0 })).toBe(false); // Negative x
        });
    });
    describe('sanitizeString', () => {
        it('should remove HTML tags and control characters', () => {
            // The function only removes < and > characters, not full tags
            expect((0, validationUtils_1.sanitizeString)('<script>alert("xss")</script>hello')).toBe('scriptalert("xss")/scripthello');
            expect((0, validationUtils_1.sanitizeString)('  test  ')).toBe('test'); // Trim whitespace
        });
        it('should remove control characters', () => {
            const withControlChars = 'hello\x00\x01\x1F\x7Fworld';
            expect((0, validationUtils_1.sanitizeString)(withControlChars)).toBe('helloworld');
        });
    });
    describe('sanitizeFilename', () => {
        it('should replace invalid filename characters', () => {
            expect((0, validationUtils_1.sanitizeFilename)('file<>:"/\\|?*name.pdf')).toBe('file_name.pdf');
        });
        it('should handle spaces and multiple underscores', () => {
            expect((0, validationUtils_1.sanitizeFilename)('my   file   name.pdf')).toBe('my_file_name.pdf');
        });
        it('should limit filename length', () => {
            const longName = 'a'.repeat(300);
            const sanitized = (0, validationUtils_1.sanitizeFilename)(longName);
            expect(sanitized.length).toBeLessThanOrEqual(255);
        });
    });
    describe('Type Guards', () => {
        describe('isNotNull', () => {
            it('should identify non-null values', () => {
                expect((0, validationUtils_1.isNotNull)('string')).toBe(true);
                expect((0, validationUtils_1.isNotNull)(0)).toBe(true);
                expect((0, validationUtils_1.isNotNull)(false)).toBe(true);
            });
            it('should identify null/undefined values', () => {
                expect((0, validationUtils_1.isNotNull)(null)).toBe(false);
                expect((0, validationUtils_1.isNotNull)(undefined)).toBe(false);
            });
        });
        describe('isString', () => {
            it('should identify string values', () => {
                expect((0, validationUtils_1.isString)('hello')).toBe(true);
                expect((0, validationUtils_1.isString)('')).toBe(true);
            });
            it('should reject non-string values', () => {
                expect((0, validationUtils_1.isString)(123)).toBe(false);
                expect((0, validationUtils_1.isString)(null)).toBe(false);
            });
        });
        describe('isNumber', () => {
            it('should identify valid numbers', () => {
                expect((0, validationUtils_1.isNumber)(123)).toBe(true);
                expect((0, validationUtils_1.isNumber)(0)).toBe(true);
                expect((0, validationUtils_1.isNumber)(-456)).toBe(true);
            });
            it('should reject invalid numbers', () => {
                expect((0, validationUtils_1.isNumber)(NaN)).toBe(false);
                expect((0, validationUtils_1.isNumber)('123')).toBe(false);
                expect((0, validationUtils_1.isNumber)(null)).toBe(false);
            });
        });
        describe('isBoolean', () => {
            it('should identify boolean values', () => {
                expect((0, validationUtils_1.isBoolean)(true)).toBe(true);
                expect((0, validationUtils_1.isBoolean)(false)).toBe(true);
            });
            it('should reject non-boolean values', () => {
                expect((0, validationUtils_1.isBoolean)(0)).toBe(false);
                expect((0, validationUtils_1.isBoolean)('true')).toBe(false);
                expect((0, validationUtils_1.isBoolean)(null)).toBe(false);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,