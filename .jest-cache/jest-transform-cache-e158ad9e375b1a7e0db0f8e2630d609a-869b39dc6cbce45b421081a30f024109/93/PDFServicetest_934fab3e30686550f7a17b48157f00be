f7864c0af014700ec1b5f49f48f62503
"use strict";
/**
 * PDFService Unit Tests
 * Tests the core PDF manipulation functionality
 */
Object.defineProperty(exports, "__esModule", { value: true });
const PDFService_1 = require("../../../src/renderer/services/PDFService");
describe('PDFService', () => {
    let service;
    let mockPDFData;
    beforeEach(() => {
        service = new PDFService_1.PDFService();
        // Create mock PDF data for testing
        mockPDFData = new ArrayBuffer(1024);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('initialization', () => {
        it('should initialize successfully', () => {
            expect(service).toBeDefined();
            expect(typeof service.loadPDF).toBe('function');
            expect(typeof service.savePDF).toBe('function');
        });
    });
    describe('loadPDF', () => {
        it('should reject invalid input', async () => {
            await expect(service.loadPDF(null)).rejects.toThrow();
            await expect(service.loadPDF(undefined)).rejects.toThrow();
            await expect(service.loadPDF('invalid-string')).rejects.toThrow();
        });
        it('should handle empty arrays', async () => {
            const emptyArray = new Uint8Array(0);
            await expect(service.loadPDF(emptyArray)).rejects.toThrow('Empty or invalid PDF data');
        });
        it('should validate PDF header', async () => {
            const invalidPDF = new Uint8Array([1, 2, 3, 4, 5]);
            await expect(service.loadPDF(invalidPDF)).rejects.toThrow('Invalid PDF format');
        });
        it('should accept valid PDF data structure', async () => {
            // Mock valid PDF header
            const validPDFStart = new TextEncoder().encode('%PDF-1.4');
            const mockPDF = new Uint8Array(1024);
            mockPDF.set(validPDFStart, 0);
            // Mock successful PDF loading
            jest.spyOn(service, 'validatePDFFormat').mockReturnValue(true);
            jest.spyOn(service, 'parsePDFDocument').mockResolvedValue({
                numPages: 1,
                getPage: jest.fn(),
                destroy: jest.fn()
            });
            const result = await service.loadPDF(mockPDF);
            expect(result).toBeDefined();
            expect(result.numPages).toBe(1);
        });
    });
    describe('security validation', () => {
        it('should reject oversized files', async () => {
            const oversizedPDF = new Uint8Array(200 * 1024 * 1024); // 200MB
            await expect(service.loadPDF(oversizedPDF)).rejects.toThrow('File too large');
        });
        it('should validate file size limits', () => {
            const service = new PDFService_1.PDFService();
            expect(service.MAX_FILE_SIZE).toBe(100 * 1024 * 1024); // 100MB
        });
        it('should sanitize metadata input', async () => {
            const maliciousMetadata = {
                title: '<script>alert("xss")</script>',
                author: '../../etc/passwd',
                subject: '\x00\x01\x02malformed'
            };
            const sanitized = service.sanitizeMetadata(maliciousMetadata);
            expect(sanitized.title).not.toContain('<script>');
            expect(sanitized.author).not.toContain('../');
            expect(sanitized.subject).not.toContain('\x00');
        });
    });
    describe('error handling', () => {
        it('should handle corrupted PDF gracefully', async () => {
            const corruptedPDF = new Uint8Array(100);
            corruptedPDF.set(new TextEncoder().encode('%PDF-1.4'), 0);
            // Fill rest with garbage data
            for (let i = 8; i < 100; i++) {
                corruptedPDF[i] = Math.floor(Math.random() * 256);
            }
            await expect(service.loadPDF(corruptedPDF)).rejects.toThrow();
        });
        it('should provide meaningful error messages', async () => {
            const invalidPDF = new Uint8Array([1, 2, 3]);
            try {
                await service.loadPDF(invalidPDF);
                fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).toContain('PDF');
                expect(error.message.length).toBeGreaterThan(10);
            }
        });
        it('should handle memory exhaustion', async () => {
            // Mock memory exhaustion scenario
            jest.spyOn(global, 'setTimeout').mockImplementation((cb) => {
                const error = new Error('Maximum call stack size exceeded');
                error.name = 'RangeError';
                throw error;
            });
            const mockPDF = new Uint8Array(1024);
            mockPDF.set(new TextEncoder().encode('%PDF-1.4'), 0);
            await expect(service.loadPDF(mockPDF)).rejects.toThrow();
            jest.restoreAllMocks();
        });
    });
    describe('performance', () => {
        it('should complete PDF loading within reasonable time', async () => {
            const mockPDF = new Uint8Array(1024);
            mockPDF.set(new TextEncoder().encode('%PDF-1.4'), 0);
            jest.spyOn(service, 'validatePDFFormat').mockReturnValue(true);
            jest.spyOn(service, 'parsePDFDocument').mockResolvedValue({
                numPages: 1,
                getPage: jest.fn(),
                destroy: jest.fn()
            });
            const startTime = Date.now();
            await service.loadPDF(mockPDF);
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(5000); // 5 seconds max
        }, 10000);
        it('should handle concurrent loading requests', async () => {
            const mockPDF = new Uint8Array(1024);
            mockPDF.set(new TextEncoder().encode('%PDF-1.4'), 0);
            jest.spyOn(service, 'validatePDFFormat').mockReturnValue(true);
            jest.spyOn(service, 'parsePDFDocument').mockResolvedValue({
                numPages: 1,
                getPage: jest.fn(),
                destroy: jest.fn()
            });
            const promises = Array(5).fill(null).map(() => service.loadPDF(mockPDF));
            const results = await Promise.all(promises);
            expect(results).toHaveLength(5);
            results.forEach(result => {
                expect(result).toBeDefined();
                expect(result.numPages).toBe(1);
            });
        });
    });
    describe('cleanup', () => {
        it('should properly cleanup resources', async () => {
            const mockPDF = new Uint8Array(1024);
            mockPDF.set(new TextEncoder().encode('%PDF-1.4'), 0);
            const mockDocument = {
                numPages: 1,
                getPage: jest.fn(),
                destroy: jest.fn()
            };
            jest.spyOn(service, 'validatePDFFormat').mockReturnValue(true);
            jest.spyOn(service, 'parsePDFDocument').mockResolvedValue(mockDocument);
            const result = await service.loadPDF(mockPDF);
            await service.cleanup();
            expect(mockDocument.destroy).toHaveBeenCalled();
        });
        it('should handle cleanup errors gracefully', async () => {
            jest.spyOn(console, 'error').mockImplementation(() => { });
            const cleanup = service.cleanup();
            expect(cleanup).resolves.not.toThrow();
            jest.restoreAllMocks();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,