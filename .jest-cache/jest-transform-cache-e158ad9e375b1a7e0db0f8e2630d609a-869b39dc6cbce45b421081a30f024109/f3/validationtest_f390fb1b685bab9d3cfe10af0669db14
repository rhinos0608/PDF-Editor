6e6b9e8b2f441796f2ea88f611a78728
"use strict";
/**
 * Security Validation Tests
 * Tests input validation and security measures
 */
describe('Security Validation', () => {
    describe('Input Validation', () => {
        // Test the validation functions from main.js
        const mockValidateSender = (event) => {
            if (!event.sender)
                throw new Error('No sender');
            // Simulate validation logic
            return true;
        };
        const mockValidateFilePath = (filePath) => {
            if (!filePath || typeof filePath !== 'string') {
                throw new Error('Invalid file path');
            }
            if (filePath.length > 260) {
                throw new Error('File path too long');
            }
            if (filePath.includes('..') || filePath.includes('~')) {
                throw new Error('Invalid file path - path traversal detected');
            }
            return filePath;
        };
        const mockValidateFileData = (data) => {
            if (!data) {
                throw new Error('No file data provided');
            }
            if (data.byteLength > 100 * 1024 * 1024) {
                throw new Error('File too large (max 100MB)');
            }
            return data;
        };
        describe('Sender Validation', () => {
            it('should reject invalid sender', () => {
                expect(() => mockValidateSender({})).toThrow('No sender');
                expect(() => mockValidateSender(null)).toThrow('No sender');
                expect(() => mockValidateSender(undefined)).toThrow('No sender');
            });
            it('should accept valid sender', () => {
                const validEvent = { sender: { isDestroyed: () => false } };
                expect(() => mockValidateSender(validEvent)).not.toThrow();
            });
        });
        describe('File Path Validation', () => {
            it('should reject path traversal attempts', () => {
                expect(() => mockValidateFilePath('../../../etc/passwd')).toThrow('path traversal');
                expect(() => mockValidateFilePath('..\\windows\\system32')).toThrow('path traversal');
                expect(() => mockValidateFilePath('~/.ssh/id_rsa')).toThrow('path traversal');
                expect(() => mockValidateFilePath('file../../other.txt')).toThrow('path traversal');
            });
            it('should reject invalid inputs', () => {
                expect(() => mockValidateFilePath('')).toThrow('Invalid file path');
                expect(() => mockValidateFilePath(null)).toThrow('Invalid file path');
                expect(() => mockValidateFilePath(123)).toThrow('Invalid file path');
                expect(() => mockValidateFilePath({})).toThrow('Invalid file path');
            });
            it('should reject oversized paths', () => {
                const longPath = 'a'.repeat(300);
                expect(() => mockValidateFilePath(longPath)).toThrow('File path too long');
            });
            it('should accept valid file paths', () => {
                expect(() => mockValidateFilePath('C:\\Documents\\file.pdf')).not.toThrow();
                expect(() => mockValidateFilePath('/home/user/document.pdf')).not.toThrow();
                expect(() => mockValidateFilePath('document.pdf')).not.toThrow();
            });
        });
        describe('File Data Validation', () => {
            it('should reject missing data', () => {
                expect(() => mockValidateFileData(null)).toThrow('No file data provided');
                expect(() => mockValidateFileData(undefined)).toThrow('No file data provided');
                expect(() => mockValidateFileData('')).toThrow('No file data provided');
            });
            it('should reject oversized files', () => {
                const largeData = { byteLength: 200 * 1024 * 1024 }; // 200MB
                expect(() => mockValidateFileData(largeData)).toThrow('File too large');
            });
            it('should accept valid file data', () => {
                const validData = { byteLength: 1024 }; // 1KB
                expect(() => mockValidateFileData(validData)).not.toThrow();
                const mediumData = { byteLength: 50 * 1024 * 1024 }; // 50MB
                expect(() => mockValidateFileData(mediumData)).not.toThrow();
            });
        });
        describe('Filename Sanitization', () => {
            const sanitizeFilename = (filename) => {
                if (!filename || typeof filename !== 'string') {
                    return 'document.pdf';
                }
                let sanitized = filename.replace(/[<>:"/\\|?*]/g, '_').substring(0, 100);
                if (!sanitized.endsWith('.pdf')) {
                    sanitized += '.pdf';
                }
                return sanitized;
            };
            it('should remove dangerous characters', () => {
                expect(sanitizeFilename('file<>:"/\\|?*.pdf')).toBe('file_________.pdf');
                expect(sanitizeFilename('con.pdf')).toBe('con.pdf');
                expect(sanitizeFilename('NUL')).toBe('NUL.pdf');
            });
            it('should handle long filenames', () => {
                const longName = 'a'.repeat(200) + '.pdf';
                const result = sanitizeFilename(longName);
                expect(result.length).toBeLessThanOrEqual(104); // 100 chars + '.pdf'
                expect(result.endsWith('.pdf')).toBe(true);
            });
            it('should add PDF extension if missing', () => {
                expect(sanitizeFilename('document')).toBe('document.pdf');
                expect(sanitizeFilename('file.txt')).toBe('file.txt.pdf');
            });
            it('should handle edge cases', () => {
                expect(sanitizeFilename('')).toBe('document.pdf');
                expect(sanitizeFilename(null)).toBe('document.pdf');
                expect(sanitizeFilename(undefined)).toBe('document.pdf');
            });
        });
        describe('Preferences Validation', () => {
            const validatePreferences = (prefs) => {
                if (!prefs || typeof prefs !== 'object' || Array.isArray(prefs)) {
                    throw new Error('Invalid preferences object');
                }
                const allowedKeys = ['theme', 'defaultZoom', 'showThumbnails', 'autoSave', 'autoSaveInterval', 'hardwareAcceleration', 'gpuEnabled'];
                const validatedPrefs = {};
                for (const [key, value] of Object.entries(prefs)) {
                    if (allowedKeys.includes(key)) {
                        validatedPrefs[key] = value;
                    }
                }
                return validatedPrefs;
            };
            it('should reject invalid preference objects', () => {
                expect(() => validatePreferences(null)).toThrow('Invalid preferences object');
                expect(() => validatePreferences([])).toThrow('Invalid preferences object');
                expect(() => validatePreferences('string')).toThrow('Invalid preferences object');
                expect(() => validatePreferences(123)).toThrow('Invalid preferences object');
            });
            it('should filter out unauthorized keys', () => {
                const input = {
                    theme: 'dark',
                    maliciousKey: 'evil',
                    defaultZoom: 100,
                    anotherBadKey: () => console.log('hack')
                };
                const result = validatePreferences(input);
                expect(result.theme).toBe('dark');
                expect(result.defaultZoom).toBe(100);
                expect(result.maliciousKey).toBeUndefined();
                expect(result.anotherBadKey).toBeUndefined();
            });
            it('should preserve valid preferences', () => {
                const validPrefs = {
                    theme: 'dark',
                    defaultZoom: 150,
                    showThumbnails: true,
                    autoSave: false,
                    autoSaveInterval: 300000,
                    hardwareAcceleration: false,
                    gpuEnabled: false
                };
                const result = validatePreferences(validPrefs);
                expect(result).toEqual(validPrefs);
            });
        });
    });
    describe('XSS Prevention', () => {
        const sanitizeHTML = (input) => {
            if (typeof input !== 'string')
                return '';
            return input
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#x27;')
                .replace(/\//g, '&#x2F;');
        };
        it('should escape HTML characters', () => {
            const malicious = '<script>alert("xss")</script>';
            const sanitized = sanitizeHTML(malicious);
            expect(sanitized).not.toContain('<script>');
            expect(sanitized).toContain('&lt;script&gt;');
        });
        it('should handle quotes and slashes', () => {
            const input = `"';/`;
            const result = sanitizeHTML(input);
            expect(result).toBe('&quot;&#x27;;&#x2F;');
        });
        it('should handle non-string inputs', () => {
            expect(sanitizeHTML(null)).toBe('');
            expect(sanitizeHTML(undefined)).toBe('');
            expect(sanitizeHTML(123)).toBe('');
        });
    });
    describe('SQL Injection Prevention', () => {
        const sanitizeSQL = (input) => {
            if (typeof input !== 'string')
                return '';
            return input.replace(/['"\\;]/g, '');
        };
        it('should remove SQL injection characters', () => {
            const malicious = `'; DROP TABLE users; --`;
            const sanitized = sanitizeSQL(malicious);
            expect(sanitized).not.toContain("'");
            expect(sanitized).not.toContain(';');
            expect(sanitized).toBe(' DROP TABLE users --');
        });
        it('should handle backslashes and quotes', () => {
            const input = `test\\"value'`;
            const result = sanitizeSQL(input);
            expect(result).toBe('testvalue');
        });
    });
    describe('Rate Limiting', () => {
        class RateLimiter {
            attempts = new Map();
            maxAttempts = 5;
            windowMs = 60000; // 1 minute
            isRateLimited(identifier) {
                const now = Date.now();
                const attempts = this.attempts.get(identifier) || [];
                // Remove old attempts outside the window
                const recentAttempts = attempts.filter(time => now - time < this.windowMs);
                // Update the attempts array
                this.attempts.set(identifier, recentAttempts);
                return recentAttempts.length >= this.maxAttempts;
            }
            recordAttempt(identifier) {
                const attempts = this.attempts.get(identifier) || [];
                attempts.push(Date.now());
                this.attempts.set(identifier, attempts);
            }
        }
        it('should allow requests under the limit', () => {
            const limiter = new RateLimiter();
            const id = 'test-user';
            for (let i = 0; i < 4; i++) {
                expect(limiter.isRateLimited(id)).toBe(false);
                limiter.recordAttempt(id);
            }
        });
        it('should block requests over the limit', () => {
            const limiter = new RateLimiter();
            const id = 'test-user';
            // Make 5 attempts (at the limit)
            for (let i = 0; i < 5; i++) {
                limiter.recordAttempt(id);
            }
            expect(limiter.isRateLimited(id)).toBe(true);
        });
        it('should reset after time window', (done) => {
            const limiter = new RateLimiter();
            const id = 'test-user';
            // Fill up the rate limit
            for (let i = 0; i < 5; i++) {
                limiter.recordAttempt(id);
            }
            expect(limiter.isRateLimited(id)).toBe(true);
            // Wait for window to reset (using a very short window for testing)
            setTimeout(() => {
                expect(limiter.isRateLimited(id)).toBe(false);
                done();
            }, 61000); // Just over 1 minute
        }, 70000);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,