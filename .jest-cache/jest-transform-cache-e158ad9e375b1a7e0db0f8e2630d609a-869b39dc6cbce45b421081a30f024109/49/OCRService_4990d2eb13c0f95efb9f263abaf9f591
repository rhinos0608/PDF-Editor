3a9ee4779b8ed26f9f2ebdddb189eacf
"use strict";

/* istanbul ignore next */
function cov_1u87geis0x() {
  var path = "C:\\Users\\Admin\\Documents\\RST\\PDF Editor\\src\\renderer\\services\\OCRService.ts";
  var hash = "f070ce167feb0716b9c2612a6af02ded235175cf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\Admin\\Documents\\RST\\PDF Editor\\src\\renderer\\services\\OCRService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 28
        }
      },
      "4": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 63
        }
      },
      "5": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 50
        }
      },
      "6": {
        start: {
          line: 10,
          column: 13
        },
        end: {
          line: 10,
          column: 17
        }
      },
      "7": {
        start: {
          line: 11,
          column: 20
        },
        end: {
          line: 11,
          column: 25
        }
      },
      "8": {
        start: {
          line: 12,
          column: 22
        },
        end: {
          line: 12,
          column: 27
        }
      },
      "9": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "10": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "11": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 19
        }
      },
      "12": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "13": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "14": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 46
        }
      },
      "15": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 100,
          column: 15
        }
      },
      "16": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 94,
          column: 21
        }
      },
      "17": {
        start: {
          line: 93,
          column: 24
        },
        end: {
          line: 93,
          column: 54
        }
      },
      "18": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 106,
          column: 15
        }
      },
      "19": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 44
        }
      },
      "20": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 108,
          column: 38
        }
      },
      "21": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 96
        }
      },
      "22": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 133
        }
      },
      "23": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 119,
          column: 35
        }
      },
      "24": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "25": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 44
        }
      },
      "26": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "27": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 117
        }
      },
      "28": {
        start: {
          line: 130,
          column: 25
        },
        end: {
          line: 130,
          column: 54
        }
      },
      "29": {
        start: {
          line: 131,
          column: 29
        },
        end: {
          line: 131,
          column: 61
        }
      },
      "30": {
        start: {
          line: 132,
          column: 27
        },
        end: {
          line: 132,
          column: 59
        }
      },
      "31": {
        start: {
          line: 133,
          column: 28
        },
        end: {
          line: 133,
          column: 51
        }
      },
      "32": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 44
        }
      },
      "33": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 42
        }
      },
      "34": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 139,
          column: 23
        }
      },
      "35": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 62
        }
      },
      "36": {
        start: {
          line: 143,
          column: 30
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "37": {
        start: {
          line: 148,
          column: 58
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "38": {
        start: {
          line: 152,
          column: 53
        },
        end: {
          line: 156,
          column: 21
        }
      },
      "39": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 159,
          column: 29
        }
      },
      "40": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 98
        }
      },
      "41": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 119
        }
      },
      "42": {
        start: {
          line: 168,
          column: 24
        },
        end: {
          line: 168,
          column: 26
        }
      },
      "43": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 175,
          column: 9
        }
      },
      "44": {
        start: {
          line: 169,
          column: 21
        },
        end: {
          line: 169,
          column: 22
        }
      },
      "45": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 170,
          column: 42
        }
      },
      "46": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 62
        }
      },
      "47": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 72
        }
      },
      "48": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 33
        }
      },
      "49": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 31
        }
      },
      "50": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 23
        }
      },
      "51": {
        start: {
          line: 182,
          column: 28
        },
        end: {
          line: 182,
          column: 81
        }
      },
      "52": {
        start: {
          line: 182,
          column: 75
        },
        end: {
          line: 182,
          column: 80
        }
      },
      "53": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 64
        }
      },
      "54": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "55": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 188,
          column: 44
        }
      },
      "56": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "57": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 62
        }
      },
      "58": {
        start: {
          line: 193,
          column: 25
        },
        end: {
          line: 193,
          column: 54
        }
      },
      "59": {
        start: {
          line: 194,
          column: 29
        },
        end: {
          line: 194,
          column: 61
        }
      },
      "60": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 195,
          column: 59
        }
      },
      "61": {
        start: {
          line: 196,
          column: 28
        },
        end: {
          line: 196,
          column: 51
        }
      },
      "62": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 197,
          column: 44
        }
      },
      "63": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 42
        }
      },
      "64": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 202,
          column: 23
        }
      },
      "65": {
        start: {
          line: 204,
          column: 34
        },
        end: {
          line: 204,
          column: 66
        }
      },
      "66": {
        start: {
          line: 205,
          column: 35
        },
        end: {
          line: 205,
          column: 65
        }
      },
      "67": {
        start: {
          line: 207,
          column: 33
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "68": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 53
        }
      },
      "69": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 55
        }
      },
      "70": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 165
        }
      },
      "71": {
        start: {
          line: 218,
          column: 27
        },
        end: {
          line: 218,
          column: 69
        }
      },
      "72": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 36
        }
      },
      "73": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 222,
          column: 71
        }
      },
      "74": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 66
        }
      },
      "75": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "76": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 53
        }
      },
      "77": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "78": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 62
        }
      },
      "79": {
        start: {
          line: 235,
          column: 25
        },
        end: {
          line: 235,
          column: 54
        }
      },
      "80": {
        start: {
          line: 236,
          column: 29
        },
        end: {
          line: 236,
          column: 61
        }
      },
      "81": {
        start: {
          line: 237,
          column: 27
        },
        end: {
          line: 237,
          column: 59
        }
      },
      "82": {
        start: {
          line: 238,
          column: 28
        },
        end: {
          line: 238,
          column: 51
        }
      },
      "83": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 44
        }
      },
      "84": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 240,
          column: 42
        }
      },
      "85": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 244,
          column: 23
        }
      },
      "86": {
        start: {
          line: 246,
          column: 27
        },
        end: {
          line: 246,
          column: 59
        }
      },
      "87": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 247,
          column: 49
        }
      },
      "88": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 62
        }
      },
      "89": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 251,
          column: 25
        }
      },
      "90": {
        start: {
          line: 256,
          column: 106
        },
        end: {
          line: 256,
          column: 113
        }
      },
      "91": {
        start: {
          line: 257,
          column: 21
        },
        end: {
          line: 257,
          column: 58
        }
      },
      "92": {
        start: {
          line: 258,
          column: 22
        },
        end: {
          line: 258,
          column: 37
        }
      },
      "93": {
        start: {
          line: 259,
          column: 23
        },
        end: {
          line: 259,
          column: 39
        }
      },
      "94": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "95": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "96": {
        start: {
          line: 262,
          column: 25
        },
        end: {
          line: 262,
          column: 26
        }
      },
      "97": {
        start: {
          line: 263,
          column: 29
        },
        end: {
          line: 263,
          column: 88
        }
      },
      "98": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 59
        }
      },
      "99": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "100": {
        start: {
          line: 269,
          column: 35
        },
        end: {
          line: 269,
          column: 38
        }
      },
      "101": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "102": {
        start: {
          line: 270,
          column: 25
        },
        end: {
          line: 270,
          column: 26
        }
      },
      "103": {
        start: {
          line: 271,
          column: 29
        },
        end: {
          line: 271,
          column: 36
        }
      },
      "104": {
        start: {
          line: 272,
          column: 31
        },
        end: {
          line: 272,
          column: 62
        }
      },
      "105": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 61
        }
      },
      "106": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 283,
          column: 9
        }
      },
      "107": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 282,
          column: 13
        }
      },
      "108": {
        start: {
          line: 278,
          column: 25
        },
        end: {
          line: 278,
          column: 26
        }
      },
      "109": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 40
        }
      },
      "110": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 48
        }
      },
      "111": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 48
        }
      },
      "112": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "113": {
        start: {
          line: 286,
          column: 27
        },
        end: {
          line: 290,
          column: 13
        }
      },
      "114": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 63
        }
      },
      "115": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 296,
          column: 9
        }
      },
      "116": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 56
        }
      },
      "117": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 50
        }
      },
      "118": {
        start: {
          line: 301,
          column: 23
        },
        end: {
          line: 301,
          column: 50
        }
      },
      "119": {
        start: {
          line: 302,
          column: 27
        },
        end: {
          line: 302,
          column: 51
        }
      },
      "120": {
        start: {
          line: 303,
          column: 21
        },
        end: {
          line: 303,
          column: 47
        }
      },
      "121": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 323,
          column: 9
        }
      },
      "122": {
        start: {
          line: 304,
          column: 21
        },
        end: {
          line: 304,
          column: 25
        }
      },
      "123": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 322,
          column: 13
        }
      },
      "124": {
        start: {
          line: 305,
          column: 25
        },
        end: {
          line: 305,
          column: 29
        }
      },
      "125": {
        start: {
          line: 306,
          column: 24
        },
        end: {
          line: 306,
          column: 25
        }
      },
      "126": {
        start: {
          line: 306,
          column: 31
        },
        end: {
          line: 306,
          column: 32
        }
      },
      "127": {
        start: {
          line: 306,
          column: 38
        },
        end: {
          line: 306,
          column: 39
        }
      },
      "128": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "129": {
        start: {
          line: 307,
          column: 30
        },
        end: {
          line: 307,
          column: 31
        }
      },
      "130": {
        start: {
          line: 308,
          column: 20
        },
        end: {
          line: 316,
          column: 21
        }
      },
      "131": {
        start: {
          line: 308,
          column: 34
        },
        end: {
          line: 308,
          column: 35
        }
      },
      "132": {
        start: {
          line: 309,
          column: 35
        },
        end: {
          line: 309,
          column: 48
        }
      },
      "133": {
        start: {
          line: 310,
          column: 35
        },
        end: {
          line: 310,
          column: 48
        }
      },
      "134": {
        start: {
          line: 311,
          column: 36
        },
        end: {
          line: 311,
          column: 57
        }
      },
      "135": {
        start: {
          line: 312,
          column: 39
        },
        end: {
          line: 312,
          column: 67
        }
      },
      "136": {
        start: {
          line: 313,
          column: 24
        },
        end: {
          line: 313,
          column: 48
        }
      },
      "137": {
        start: {
          line: 314,
          column: 24
        },
        end: {
          line: 314,
          column: 52
        }
      },
      "138": {
        start: {
          line: 315,
          column: 24
        },
        end: {
          line: 315,
          column: 52
        }
      },
      "139": {
        start: {
          line: 318,
          column: 28
        },
        end: {
          line: 318,
          column: 47
        }
      },
      "140": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 60
        }
      },
      "141": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 64
        }
      },
      "142": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 321,
          column: 64
        }
      },
      "143": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 25
        }
      },
      "144": {
        start: {
          line: 328,
          column: 23
        },
        end: {
          line: 328,
          column: 50
        }
      },
      "145": {
        start: {
          line: 329,
          column: 21
        },
        end: {
          line: 329,
          column: 47
        }
      },
      "146": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "147": {
        start: {
          line: 330,
          column: 21
        },
        end: {
          line: 330,
          column: 25
        }
      },
      "148": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 343,
          column: 13
        }
      },
      "149": {
        start: {
          line: 331,
          column: 25
        },
        end: {
          line: 331,
          column: 29
        }
      },
      "150": {
        start: {
          line: 332,
          column: 31
        },
        end: {
          line: 332,
          column: 33
        }
      },
      "151": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 338,
          column: 17
        }
      },
      "152": {
        start: {
          line: 333,
          column: 30
        },
        end: {
          line: 333,
          column: 35
        }
      },
      "153": {
        start: {
          line: 334,
          column: 20
        },
        end: {
          line: 337,
          column: 21
        }
      },
      "154": {
        start: {
          line: 334,
          column: 34
        },
        end: {
          line: 334,
          column: 39
        }
      },
      "155": {
        start: {
          line: 335,
          column: 36
        },
        end: {
          line: 335,
          column: 69
        }
      },
      "156": {
        start: {
          line: 336,
          column: 24
        },
        end: {
          line: 336,
          column: 47
        }
      },
      "157": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 339,
          column: 45
        }
      },
      "158": {
        start: {
          line: 339,
          column: 38
        },
        end: {
          line: 339,
          column: 43
        }
      },
      "159": {
        start: {
          line: 340,
          column: 31
        },
        end: {
          line: 340,
          column: 68
        }
      },
      "160": {
        start: {
          line: 341,
          column: 28
        },
        end: {
          line: 341,
          column: 47
        }
      },
      "161": {
        start: {
          line: 342,
          column: 16
        },
        end: {
          line: 342,
          column: 73
        }
      },
      "162": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 25
        }
      },
      "163": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 349,
          column: 39
        }
      },
      "164": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "165": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 42
        }
      },
      "166": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 31
        }
      },
      "167": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 39
        }
      },
      "168": {
        start: {
          line: 363,
          column: 24
        },
        end: {
          line: 363,
          column: 26
        }
      },
      "169": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "170": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "171": {
        start: {
          line: 366,
          column: 31
        },
        end: {
          line: 366,
          column: 79
        }
      },
      "172": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 37
        }
      },
      "173": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 370,
          column: 76
        }
      },
      "174": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 23
        }
      },
      "175": {
        start: {
          line: 379,
          column: 26
        },
        end: {
          line: 379,
          column: 101
        }
      },
      "176": {
        start: {
          line: 380,
          column: 33
        },
        end: {
          line: 380,
          column: 35
        }
      },
      "177": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "178": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 392,
          column: 13
        }
      },
      "179": {
        start: {
          line: 383,
          column: 31
        },
        end: {
          line: 383,
          column: 79
        }
      },
      "180": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 388,
          column: 19
        }
      },
      "181": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 82
        }
      },
      "182": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 76
        }
      },
      "183": {
        start: {
          line: 395,
          column: 47
        },
        end: {
          line: 395,
          column: 74
        }
      },
      "184": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 445,
          column: 9
        }
      },
      "185": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 44
        }
      },
      "186": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "187": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 62
        }
      },
      "188": {
        start: {
          line: 407,
          column: 25
        },
        end: {
          line: 407,
          column: 54
        }
      },
      "189": {
        start: {
          line: 408,
          column: 29
        },
        end: {
          line: 408,
          column: 61
        }
      },
      "190": {
        start: {
          line: 409,
          column: 27
        },
        end: {
          line: 409,
          column: 59
        }
      },
      "191": {
        start: {
          line: 410,
          column: 28
        },
        end: {
          line: 410,
          column: 51
        }
      },
      "192": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 44
        }
      },
      "193": {
        start: {
          line: 412,
          column: 12
        },
        end: {
          line: 412,
          column: 42
        }
      },
      "194": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 416,
          column: 23
        }
      },
      "195": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 422,
          column: 13
        }
      },
      "196": {
        start: {
          line: 419,
          column: 34
        },
        end: {
          line: 419,
          column: 89
        }
      },
      "197": {
        start: {
          line: 420,
          column: 34
        },
        end: {
          line: 420,
          column: 94
        }
      },
      "198": {
        start: {
          line: 421,
          column: 16
        },
        end: {
          line: 421,
          column: 54
        }
      },
      "199": {
        start: {
          line: 424,
          column: 27
        },
        end: {
          line: 424,
          column: 62
        }
      },
      "200": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 440,
          column: 14
        }
      },
      "201": {
        start: {
          line: 430,
          column: 58
        },
        end: {
          line: 439,
          column: 17
        }
      },
      "202": {
        start: {
          line: 434,
          column: 53
        },
        end: {
          line: 438,
          column: 21
        }
      },
      "203": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 57
        }
      },
      "204": {
        start: {
          line: 444,
          column: 12
        },
        end: {
          line: 444,
          column: 24
        }
      },
      "205": {
        start: {
          line: 451,
          column: 24
        },
        end: {
          line: 451,
          column: 33
        }
      },
      "206": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "207": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 52
        }
      },
      "208": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 459,
          column: 9
        }
      },
      "209": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 458,
          column: 56
        }
      },
      "210": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "211": {
        start: {
          line: 462,
          column: 12
        },
        end: {
          line: 465,
          column: 15
        }
      },
      "212": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 25
        }
      },
      "213": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 25
        }
      },
      "214": {
        start: {
          line: 484,
          column: 21
        },
        end: {
          line: 484,
          column: 58
        }
      },
      "215": {
        start: {
          line: 485,
          column: 23
        },
        end: {
          line: 485,
          column: 26
        }
      },
      "216": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 491,
          column: 9
        }
      },
      "217": {
        start: {
          line: 486,
          column: 21
        },
        end: {
          line: 486,
          column: 22
        }
      },
      "218": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 81
        }
      },
      "219": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 89
        }
      },
      "220": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 89
        }
      },
      "221": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 492,
          column: 70
        }
      },
      "222": {
        start: {
          line: 498,
          column: 27
        },
        end: {
          line: 498,
          column: 75
        }
      },
      "223": {
        start: {
          line: 500,
          column: 28
        },
        end: {
          line: 500,
          column: 30
        }
      },
      "224": {
        start: {
          line: 501,
          column: 28
        },
        end: {
          line: 501,
          column: 43
        }
      },
      "225": {
        start: {
          line: 503,
          column: 29
        },
        end: {
          line: 506,
          column: 9
        }
      },
      "226": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 517,
          column: 11
        }
      },
      "227": {
        start: {
          line: 508,
          column: 26
        },
        end: {
          line: 508,
          column: 48
        }
      },
      "228": {
        start: {
          line: 509,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "229": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 514,
          column: 19
        }
      },
      "230": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 73
        }
      },
      "231": {
        start: {
          line: 518,
          column: 8
        },
        end: {
          line: 522,
          column: 10
        }
      },
      "232": {
        start: {
          line: 528,
          column: 26
        },
        end: {
          line: 528,
          column: 74
        }
      },
      "233": {
        start: {
          line: 530,
          column: 23
        },
        end: {
          line: 530,
          column: 58
        }
      },
      "234": {
        start: {
          line: 532,
          column: 22
        },
        end: {
          line: 532,
          column: 56
        }
      },
      "235": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 533,
          column: 33
        }
      },
      "236": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 538,
          column: 18
        }
      },
      "237": {
        start: {
          line: 543,
          column: 8
        },
        end: {
          line: 543,
          column: 18
        }
      },
      "238": {
        start: {
          line: 549,
          column: 29
        },
        end: {
          line: 549,
          column: 89
        }
      },
      "239": {
        start: {
          line: 549,
          column: 66
        },
        end: {
          line: 549,
          column: 88
        }
      },
      "240": {
        start: {
          line: 550,
          column: 23
        },
        end: {
          line: 550,
          column: 54
        }
      },
      "241": {
        start: {
          line: 551,
          column: 25
        },
        end: {
          line: 554,
          column: 9
        }
      },
      "242": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 583,
          column: 9
        }
      },
      "243": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 559,
          column: 81
        }
      },
      "244": {
        start: {
          line: 560,
          column: 16
        },
        end: {
          line: 563,
          column: 18
        }
      },
      "245": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 564,
          column: 22
        }
      },
      "246": {
        start: {
          line: 568,
          column: 16
        },
        end: {
          line: 568,
          column: 71
        }
      },
      "247": {
        start: {
          line: 569,
          column: 16
        },
        end: {
          line: 572,
          column: 18
        }
      },
      "248": {
        start: {
          line: 573,
          column: 16
        },
        end: {
          line: 573,
          column: 22
        }
      },
      "249": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 581,
          column: 18
        }
      },
      "250": {
        start: {
          line: 582,
          column: 16
        },
        end: {
          line: 582,
          column: 22
        }
      },
      "251": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 584,
          column: 24
        }
      },
      "252": {
        start: {
          line: 588,
          column: 8
        },
        end: {
          line: 621,
          column: 9
        }
      },
      "253": {
        start: {
          line: 590,
          column: 16
        },
        end: {
          line: 590,
          column: 89
        }
      },
      "254": {
        start: {
          line: 590,
          column: 40
        },
        end: {
          line: 590,
          column: 74
        }
      },
      "255": {
        start: {
          line: 592,
          column: 16
        },
        end: {
          line: 592,
          column: 56
        }
      },
      "256": {
        start: {
          line: 594,
          column: 26
        },
        end: {
          line: 594,
          column: 83
        }
      },
      "257": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 609,
          column: 19
        }
      },
      "258": {
        start: {
          line: 596,
          column: 20
        },
        end: {
          line: 596,
          column: 134
        }
      },
      "259": {
        start: {
          line: 597,
          column: 20
        },
        end: {
          line: 597,
          column: 75
        }
      },
      "260": {
        start: {
          line: 598,
          column: 20
        },
        end: {
          line: 607,
          column: 21
        }
      },
      "261": {
        start: {
          line: 599,
          column: 24
        },
        end: {
          line: 599,
          column: 48
        }
      },
      "262": {
        start: {
          line: 600,
          column: 24
        },
        end: {
          line: 605,
          column: 27
        }
      },
      "263": {
        start: {
          line: 601,
          column: 28
        },
        end: {
          line: 601,
          column: 86
        }
      },
      "264": {
        start: {
          line: 602,
          column: 28
        },
        end: {
          line: 602,
          column: 86
        }
      },
      "265": {
        start: {
          line: 603,
          column: 28
        },
        end: {
          line: 603,
          column: 143
        }
      },
      "266": {
        start: {
          line: 604,
          column: 28
        },
        end: {
          line: 604,
          column: 54
        }
      },
      "267": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 606,
          column: 49
        }
      },
      "268": {
        start: {
          line: 608,
          column: 20
        },
        end: {
          line: 608,
          column: 41
        }
      },
      "269": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 610,
          column: 40
        }
      },
      "270": {
        start: {
          line: 611,
          column: 16
        },
        end: {
          line: 611,
          column: 27
        }
      },
      "271": {
        start: {
          line: 613,
          column: 26
        },
        end: {
          line: 613,
          column: 59
        }
      },
      "272": {
        start: {
          line: 614,
          column: 16
        },
        end: {
          line: 617,
          column: 19
        }
      },
      "273": {
        start: {
          line: 615,
          column: 33
        },
        end: {
          line: 615,
          column: 84
        }
      },
      "274": {
        start: {
          line: 616,
          column: 20
        },
        end: {
          line: 616,
          column: 108
        }
      },
      "275": {
        start: {
          line: 618,
          column: 16
        },
        end: {
          line: 618,
          column: 27
        }
      },
      "276": {
        start: {
          line: 620,
          column: 16
        },
        end: {
          line: 620,
          column: 59
        }
      },
      "277": {
        start: {
          line: 620,
          column: 40
        },
        end: {
          line: 620,
          column: 46
        }
      },
      "278": {
        start: {
          line: 624,
          column: 0
        },
        end: {
          line: 624,
          column: 32
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 39
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 79
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 90,
            column: 24
          },
          end: {
            line: 90,
            column: 25
          }
        },
        loc: {
          start: {
            line: 90,
            column: 31
          },
          end: {
            line: 95,
            column: 17
          }
        },
        line: 90
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        loc: {
          start: {
            line: 118,
            column: 34
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 118
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        loc: {
          start: {
            line: 122,
            column: 56
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 122
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 148,
            column: 48
          },
          end: {
            line: 148,
            column: 49
          }
        },
        loc: {
          start: {
            line: 148,
            column: 58
          },
          end: {
            line: 157,
            column: 17
          }
        },
        line: 148
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 152,
            column: 44
          },
          end: {
            line: 152,
            column: 45
          }
        },
        loc: {
          start: {
            line: 152,
            column: 53
          },
          end: {
            line: 156,
            column: 21
          }
        },
        line: 152
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 62
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 167
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        loc: {
          start: {
            line: 181,
            column: 48
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 181
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 182,
            column: 65
          },
          end: {
            line: 182,
            column: 66
          }
        },
        loc: {
          start: {
            line: 182,
            column: 75
          },
          end: {
            line: 182,
            column: 80
          }
        },
        line: 182
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 75
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 186
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 42
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 227
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 51
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 255
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 50
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 300
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 327,
            column: 5
          }
        },
        loc: {
          start: {
            line: 327,
            column: 59
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 327
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 339,
            column: 28
          },
          end: {
            line: 339,
            column: 29
          }
        },
        loc: {
          start: {
            line: 339,
            column: 38
          },
          end: {
            line: 339,
            column: 43
          }
        },
        line: 339
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 348,
            column: 4
          },
          end: {
            line: 348,
            column: 5
          }
        },
        loc: {
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 350,
            column: 5
          }
        },
        line: 348
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 352,
            column: 5
          }
        },
        loc: {
          start: {
            line: 352,
            column: 22
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 352
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 62
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 362
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 70
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 378
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 395,
            column: 37
          },
          end: {
            line: 395,
            column: 38
          }
        },
        loc: {
          start: {
            line: 395,
            column: 47
          },
          end: {
            line: 395,
            column: 74
          }
        },
        line: 395
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 86
          },
          end: {
            line: 446,
            column: 5
          }
        },
        line: 400
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 430,
            column: 48
          },
          end: {
            line: 430,
            column: 49
          }
        },
        loc: {
          start: {
            line: 430,
            column: 58
          },
          end: {
            line: 439,
            column: 17
          }
        },
        line: 430
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 434,
            column: 44
          },
          end: {
            line: 434,
            column: 45
          }
        },
        loc: {
          start: {
            line: 434,
            column: 53
          },
          end: {
            line: 438,
            column: 21
          }
        },
        line: 434
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 52
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 450
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 27
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 472
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 31
          },
          end: {
            line: 493,
            column: 5
          }
        },
        line: 483
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 497,
            column: 4
          },
          end: {
            line: 497,
            column: 5
          }
        },
        loc: {
          start: {
            line: 497,
            column: 82
          },
          end: {
            line: 523,
            column: 5
          }
        },
        line: 497
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 507,
            column: 45
          },
          end: {
            line: 507,
            column: 46
          }
        },
        loc: {
          start: {
            line: 507,
            column: 70
          },
          end: {
            line: 517,
            column: 9
          }
        },
        line: 507
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 527,
            column: 4
          },
          end: {
            line: 527,
            column: 5
          }
        },
        loc: {
          start: {
            line: 527,
            column: 67
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 527
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 535,
            column: 4
          },
          end: {
            line: 535,
            column: 5
          }
        },
        loc: {
          start: {
            line: 535,
            column: 25
          },
          end: {
            line: 539,
            column: 5
          }
        },
        line: 535
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 540,
            column: 4
          },
          end: {
            line: 540,
            column: 5
          }
        },
        loc: {
          start: {
            line: 540,
            column: 24
          },
          end: {
            line: 544,
            column: 5
          }
        },
        line: 540
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 548,
            column: 4
          },
          end: {
            line: 548,
            column: 5
          }
        },
        loc: {
          start: {
            line: 548,
            column: 34
          },
          end: {
            line: 585,
            column: 5
          }
        },
        line: 548
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 549,
            column: 58
          },
          end: {
            line: 549,
            column: 59
          }
        },
        loc: {
          start: {
            line: 549,
            column: 66
          },
          end: {
            line: 549,
            column: 88
          }
        },
        line: 549
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 587,
            column: 4
          },
          end: {
            line: 587,
            column: 5
          }
        },
        loc: {
          start: {
            line: 587,
            column: 43
          },
          end: {
            line: 622,
            column: 5
          }
        },
        line: 587
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 590,
            column: 35
          },
          end: {
            line: 590,
            column: 36
          }
        },
        loc: {
          start: {
            line: 590,
            column: 40
          },
          end: {
            line: 590,
            column: 74
          }
        },
        line: 590
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 595,
            column: 32
          },
          end: {
            line: 595,
            column: 33
          }
        },
        loc: {
          start: {
            line: 595,
            column: 42
          },
          end: {
            line: 609,
            column: 17
          }
        },
        line: 595
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 600,
            column: 46
          },
          end: {
            line: 600,
            column: 47
          }
        },
        loc: {
          start: {
            line: 600,
            column: 55
          },
          end: {
            line: 605,
            column: 25
          }
        },
        line: 600
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 614,
            column: 32
          },
          end: {
            line: 614,
            column: 33
          }
        },
        loc: {
          start: {
            line: 614,
            column: 42
          },
          end: {
            line: 617,
            column: 17
          }
        },
        line: 614
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 620,
            column: 35
          },
          end: {
            line: 620,
            column: 36
          }
        },
        loc: {
          start: {
            line: 620,
            column: 40
          },
          end: {
            line: 620,
            column: 46
          }
        },
        line: 620
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 79,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 79,
            column: 32
          },
          end: {
            line: 79,
            column: 37
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 12
          },
          end: {
            line: 80,
            column: 30
          }
        }, {
          start: {
            line: 80,
            column: 34
          },
          end: {
            line: 80,
            column: 67
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "7": {
        loc: {
          start: {
            line: 91,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 20
          },
          end: {
            line: 94,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "8": {
        loc: {
          start: {
            line: 122,
            column: 38
          },
          end: {
            line: 122,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 122,
            column: 49
          },
          end: {
            line: 122,
            column: 54
          }
        }],
        line: 122
      },
      "9": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "10": {
        loc: {
          start: {
            line: 148,
            column: 24
          },
          end: {
            line: 157,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 24
          },
          end: {
            line: 157,
            column: 19
          }
        }, {
          start: {
            line: 157,
            column: 23
          },
          end: {
            line: 157,
            column: 25
          }
        }],
        line: 148
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 156,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 27
          },
          end: {
            line: 156,
            column: 23
          }
        }, {
          start: {
            line: 156,
            column: 27
          },
          end: {
            line: 156,
            column: 29
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 167,
            column: 44
          },
          end: {
            line: 167,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 167,
            column: 55
          },
          end: {
            line: 167,
            column: 60
          }
        }],
        line: 167
      },
      "13": {
        loc: {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 181,
            column: 41
          },
          end: {
            line: 181,
            column: 46
          }
        }],
        line: 181
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 57
          },
          end: {
            line: 186,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 186,
            column: 68
          },
          end: {
            line: 186,
            column: 73
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 12
          },
          end: {
            line: 191,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "16": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "17": {
        loc: {
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 39
          }
        }, {
          start: {
            line: 247,
            column: 43
          },
          end: {
            line: 247,
            column: 48
          }
        }],
        line: 247
      },
      "18": {
        loc: {
          start: {
            line: 255,
            column: 37
          },
          end: {
            line: 255,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 255,
            column: 47
          },
          end: {
            line: 255,
            column: 49
          }
        }],
        line: 255
      },
      "19": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 256,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 256,
            column: 32
          }
        }],
        line: 256
      },
      "20": {
        loc: {
          start: {
            line: 256,
            column: 34
          },
          end: {
            line: 256,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 256,
            column: 46
          },
          end: {
            line: 256,
            column: 51
          }
        }],
        line: 256
      },
      "21": {
        loc: {
          start: {
            line: 256,
            column: 53
          },
          end: {
            line: 256,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 256,
            column: 62
          },
          end: {
            line: 256,
            column: 67
          }
        }],
        line: 256
      },
      "22": {
        loc: {
          start: {
            line: 256,
            column: 69
          },
          end: {
            line: 256,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 256,
            column: 79
          },
          end: {
            line: 256,
            column: 84
          }
        }],
        line: 256
      },
      "23": {
        loc: {
          start: {
            line: 256,
            column: 86
          },
          end: {
            line: 256,
            column: 101
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 256,
            column: 96
          },
          end: {
            line: 256,
            column: 101
          }
        }],
        line: 256
      },
      "24": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 266,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 272,
            column: 31
          },
          end: {
            line: 272,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 55
          },
          end: {
            line: 272,
            column: 58
          }
        }, {
          start: {
            line: 272,
            column: 61
          },
          end: {
            line: 272,
            column: 62
          }
        }],
        line: 272
      },
      "27": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 283,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "28": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 292,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "29": {
        loc: {
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 8
          },
          end: {
            line: 296,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "30": {
        loc: {
          start: {
            line: 327,
            column: 43
          },
          end: {
            line: 327,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 327,
            column: 56
          },
          end: {
            line: 327,
            column: 57
          }
        }],
        line: 327
      },
      "31": {
        loc: {
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "32": {
        loc: {
          start: {
            line: 379,
            column: 26
          },
          end: {
            line: 379,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 26
          },
          end: {
            line: 379,
            column: 44
          }
        }, {
          start: {
            line: 379,
            column: 48
          },
          end: {
            line: 379,
            column: 101
          }
        }],
        line: 379
      },
      "33": {
        loc: {
          start: {
            line: 400,
            column: 46
          },
          end: {
            line: 400,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 400,
            column: 57
          },
          end: {
            line: 400,
            column: 62
          }
        }],
        line: 400
      },
      "34": {
        loc: {
          start: {
            line: 400,
            column: 64
          },
          end: {
            line: 400,
            column: 84
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 400,
            column: 82
          },
          end: {
            line: 400,
            column: 84
          }
        }],
        line: 400
      },
      "35": {
        loc: {
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 12
          },
          end: {
            line: 405,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "36": {
        loc: {
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 12
          },
          end: {
            line: 422,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "37": {
        loc: {
          start: {
            line: 430,
            column: 24
          },
          end: {
            line: 439,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 24
          },
          end: {
            line: 439,
            column: 19
          }
        }, {
          start: {
            line: 439,
            column: 23
          },
          end: {
            line: 439,
            column: 25
          }
        }],
        line: 430
      },
      "38": {
        loc: {
          start: {
            line: 434,
            column: 27
          },
          end: {
            line: 438,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 434,
            column: 27
          },
          end: {
            line: 438,
            column: 23
          }
        }, {
          start: {
            line: 438,
            column: 27
          },
          end: {
            line: 438,
            column: 29
          }
        }],
        line: 434
      },
      "39": {
        loc: {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "40": {
        loc: {
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 8
          },
          end: {
            line: 459,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "41": {
        loc: {
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "42": {
        loc: {
          start: {
            line: 497,
            column: 52
          },
          end: {
            line: 497,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 497,
            column: 63
          },
          end: {
            line: 497,
            column: 68
          }
        }],
        line: 497
      },
      "43": {
        loc: {
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 509,
            column: 12
          },
          end: {
            line: 516,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 509
      },
      "44": {
        loc: {
          start: {
            line: 527,
            column: 49
          },
          end: {
            line: 527,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 527,
            column: 60
          },
          end: {
            line: 527,
            column: 65
          }
        }],
        line: 527
      },
      "45": {
        loc: {
          start: {
            line: 550,
            column: 23
          },
          end: {
            line: 550,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 550,
            column: 23
          },
          end: {
            line: 550,
            column: 43
          }
        }, {
          start: {
            line: 550,
            column: 47
          },
          end: {
            line: 550,
            column: 54
          }
        }],
        line: 550
      },
      "46": {
        loc: {
          start: {
            line: 556,
            column: 8
          },
          end: {
            line: 583,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 557,
            column: 12
          },
          end: {
            line: 557,
            column: 26
          }
        }, {
          start: {
            line: 558,
            column: 12
          },
          end: {
            line: 564,
            column: 22
          }
        }, {
          start: {
            line: 565,
            column: 12
          },
          end: {
            line: 565,
            column: 23
          }
        }, {
          start: {
            line: 566,
            column: 12
          },
          end: {
            line: 566,
            column: 26
          }
        }, {
          start: {
            line: 567,
            column: 12
          },
          end: {
            line: 573,
            column: 22
          }
        }, {
          start: {
            line: 574,
            column: 12
          },
          end: {
            line: 574,
            column: 30
          }
        }, {
          start: {
            line: 575,
            column: 12
          },
          end: {
            line: 575,
            column: 27
          }
        }, {
          start: {
            line: 576,
            column: 12
          },
          end: {
            line: 576,
            column: 25
          }
        }, {
          start: {
            line: 577,
            column: 12
          },
          end: {
            line: 582,
            column: 22
          }
        }],
        line: 556
      },
      "47": {
        loc: {
          start: {
            line: 587,
            column: 27
          },
          end: {
            line: 587,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 587,
            column: 36
          },
          end: {
            line: 587,
            column: 41
          }
        }],
        line: 587
      },
      "48": {
        loc: {
          start: {
            line: 588,
            column: 8
          },
          end: {
            line: 621,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 589,
            column: 12
          },
          end: {
            line: 590,
            column: 89
          }
        }, {
          start: {
            line: 591,
            column: 12
          },
          end: {
            line: 592,
            column: 56
          }
        }, {
          start: {
            line: 593,
            column: 12
          },
          end: {
            line: 611,
            column: 27
          }
        }, {
          start: {
            line: 612,
            column: 12
          },
          end: {
            line: 618,
            column: 27
          }
        }, {
          start: {
            line: 619,
            column: 12
          },
          end: {
            line: 620,
            column: 59
          }
        }],
        line: 588
      },
      "49": {
        loc: {
          start: {
            line: 598,
            column: 20
          },
          end: {
            line: 607,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 598,
            column: 20
          },
          end: {
            line: 607,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 598
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0],
      "13": [0],
      "14": [0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0],
      "23": [0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0],
      "34": [0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0, 0],
      "44": [0],
      "45": [0, 0],
      "46": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "47": [0],
      "48": [0, 0, 0, 0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\Admin\\Documents\\RST\\PDF Editor\\src\\renderer\\services\\OCRService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\Admin\\Documents\\RST\\PDF Editor\\src\\renderer\\services\\OCRService.ts"],
      sourcesContent: ["import Tesseract from 'tesseract.js';\nimport { PDFDocumentProxy } from 'pdfjs-dist/types/src/display/api';\nimport { logger, createAppError, withErrorHandling } from './LoggerService';\n\ninterface OCRResult {\n  text: string;\n  confidence: number;\n  blocks: OCRBlock[];\n  language: string;\n  pageNumber: number;\n  processingTime?: number;\n  detectedLanguages?: Array<{ language: string; confidence: number }>;\n  metadata?: {\n    imageSize: { width: number; height: number };\n    dpi: number;\n    rotation: number;\n    skew: number;\n  };\n}\n\ninterface OCRBlock {\n  text: string;\n  confidence: number;\n  bbox: {\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n  };\n  words: OCRWord[];\n}\n\ninterface OCRWord {\n  text: string;\n  confidence: number;\n  bbox: {\n    x0: number;\n    y0: number;\n    x1: number;\n    y1: number;\n  };\n}\n\nexport class OCRService {\n  private worker: Tesseract.Worker | null = null;\n  private isInitialized = false;\n  private currentLanguage = 'eng';\n  \n  // Supported languages with enhanced coverage\n  private readonly supportedLanguages = [\n    { code: 'eng', name: 'English', script: 'Latin' },\n    { code: 'spa', name: 'Spanish', script: 'Latin' },\n    { code: 'fra', name: 'French', script: 'Latin' },\n    { code: 'deu', name: 'German', script: 'Latin' },\n    { code: 'ita', name: 'Italian', script: 'Latin' },\n    { code: 'por', name: 'Portuguese', script: 'Latin' },\n    { code: 'nld', name: 'Dutch', script: 'Latin' },\n    { code: 'dan', name: 'Danish', script: 'Latin' },\n    { code: 'fin', name: 'Finnish', script: 'Latin' },\n    { code: 'nor', name: 'Norwegian', script: 'Latin' },\n    { code: 'swe', name: 'Swedish', script: 'Latin' },\n    { code: 'pol', name: 'Polish', script: 'Latin' },\n    { code: 'ces', name: 'Czech', script: 'Latin' },\n    { code: 'hun', name: 'Hungarian', script: 'Latin' },\n    { code: 'ron', name: 'Romanian', script: 'Latin' },\n    { code: 'hrv', name: 'Croatian', script: 'Latin' },\n    { code: 'slv', name: 'Slovenian', script: 'Latin' },\n    { code: 'slk', name: 'Slovak', script: 'Latin' },\n    { code: 'est', name: 'Estonian', script: 'Latin' },\n    { code: 'lav', name: 'Latvian', script: 'Latin' },\n    { code: 'lit', name: 'Lithuanian', script: 'Latin' },\n    { code: 'rus', name: 'Russian', script: 'Cyrillic' },\n    { code: 'ukr', name: 'Ukrainian', script: 'Cyrillic' },\n    { code: 'bul', name: 'Bulgarian', script: 'Cyrillic' },\n    { code: 'srp', name: 'Serbian', script: 'Cyrillic' },\n    { code: 'mkd', name: 'Macedonian', script: 'Cyrillic' },\n    { code: 'chi_sim', name: 'Chinese (Simplified)', script: 'Han' },\n    { code: 'chi_tra', name: 'Chinese (Traditional)', script: 'Han' },\n    { code: 'jpn', name: 'Japanese', script: 'Mixed' },\n    { code: 'kor', name: 'Korean', script: 'Hangul' },\n    { code: 'ara', name: 'Arabic', script: 'Arabic' },\n    { code: 'heb', name: 'Hebrew', script: 'Hebrew' },\n    { code: 'hin', name: 'Hindi', script: 'Devanagari' },\n    { code: 'ben', name: 'Bengali', script: 'Bengali' },\n    { code: 'guj', name: 'Gujarati', script: 'Gujarati' },\n    { code: 'pan', name: 'Punjabi', script: 'Gurmukhi' },\n    { code: 'tam', name: 'Tamil', script: 'Tamil' },\n    { code: 'tel', name: 'Telugu', script: 'Telugu' },\n    { code: 'kan', name: 'Kannada', script: 'Kannada' },\n    { code: 'mal', name: 'Malayalam', script: 'Malayalam' },\n    { code: 'ori', name: 'Odia', script: 'Odia' },\n    { code: 'asm', name: 'Assamese', script: 'Bengali' },\n    { code: 'tha', name: 'Thai', script: 'Thai' },\n    { code: 'vie', name: 'Vietnamese', script: 'Latin' },\n    { code: 'mya', name: 'Burmese', script: 'Myanmar' },\n    { code: 'khm', name: 'Khmer', script: 'Khmer' },\n    { code: 'lao', name: 'Lao', script: 'Lao' },\n    { code: 'sin', name: 'Sinhala', script: 'Sinhala' },\n    { code: 'tur', name: 'Turkish', script: 'Latin' },\n    { code: 'fas', name: 'Persian', script: 'Arabic' },\n    { code: 'urd', name: 'Urdu', script: 'Arabic' },\n    { code: 'pus', name: 'Pashto', script: 'Arabic' },\n    { code: 'swa', name: 'Swahili', script: 'Latin' },\n    { code: 'amh', name: 'Amharic', script: 'Ethiopic' },\n    { code: 'grc', name: 'Greek', script: 'Greek' },\n    { code: 'arm', name: 'Armenian', script: 'Armenian' },\n    { code: 'geo', name: 'Georgian', script: 'Georgian' },\n    { code: 'kat', name: 'Georgian (Alternative)', script: 'Georgian' },\n    { code: 'isl', name: 'Icelandic', script: 'Latin' },\n    { code: 'mlt', name: 'Maltese', script: 'Latin' },\n    { code: 'epo', name: 'Esperanto', script: 'Latin' },\n    { code: 'lat', name: 'Latin', script: 'Latin' }\n  ];\n\n  // Initialize Tesseract worker\n  async initialize(language: string = 'eng'): Promise<void> {\n    if (this.isInitialized && this.currentLanguage === language) {\n      return;\n    }\n    \n    try {\n      // Terminate existing worker if any\n      if (this.worker) {\n        await this.worker.terminate();\n      }\n      \n      // Create new worker with local paths\n      this.worker = await Tesseract.createWorker(language, 1, {\n        logger: (m: any) => {\n          if (m.status === 'recognizing text') {\n            // Emit progress event\n            this.onProgress?.(m.progress);\n          }\n        },\n        // Specify local paths for worker and core files (absolute from root)\n        workerPath: '/worker.min.js',\n        corePath: '/tesseract-core.wasm.js',\n        langPath: '/tessdata'\n      });\n      \n      // Set OCR parameters for better accuracy\n      await this.worker.setParameters({\n        tessedit_pageseg_mode: Tesseract.PSM.AUTO,\n        preserve_interword_spaces: '1',\n        tessedit_char_whitelist: ' !\"#$%&\\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'\n      });\n      \n      this.currentLanguage = language;\n      this.isInitialized = true;\n    } catch (error: any) {\n      logger.error('Error initializing OCR service', error, { language });\n      throw createAppError('OCR_INITIALIZATION_FAILED', 'Failed to initialize OCR service', { language });\n    }\n  }\n\n  // Progress callback\n  private onProgress?: (progress: number) => void;\n\n  // Set progress callback\n  setProgressCallback(callback: (progress: number) => void): void {\n    this.onProgress = callback;\n  }\n\n  // Perform OCR on PDF page\n  async performOCR(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    language: string = 'eng'\n  ): Promise<OCRResult> {\n    try {\n      // Initialize worker if needed\n      await this.initialize(language);\n      \n      if (!this.worker) {\n        throw createAppError('OCR_INITIALIZATION_FAILED', 'OCR worker not initialized');\n      }\n      \n      // Get page and render to canvas\n      const page = await pdf.getPage(pageNumber);\n      const viewport = page.getViewport({ scale: 2.0 }); // Higher scale for better OCR\n      \n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d')!;\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      \n      await page.render({\n        canvasContext: context,\n        viewport: viewport\n      }).promise;\n      \n      // Perform OCR\n      const result = await this.worker.recognize(canvas);\n      \n      // Process and structure the results\n      const ocrResult: OCRResult = {\n        text: result.data.text,\n        confidence: result.data.confidence,\n        language,\n        pageNumber,\n        blocks: result.data.blocks?.map(block => ({\n          text: block.text,\n          confidence: block.confidence,\n          bbox: block.bbox,\n          words: block.words?.map(word => ({\n            text: word.text,\n            confidence: word.confidence,\n            bbox: word.bbox\n          })) || []\n        })) || []\n      };\n      \n      return ocrResult;\n    } catch (error: any) {\n      logger.error('Error performing OCR', error, { pageNumber, language });\n      throw createAppError('OCR_PROCESSING_FAILED', 'OCR failed', { pageNumber, language });\n    }\n  }\n\n  // Perform OCR on multiple pages\n  async performBatchOCR(\n    pdf: PDFDocumentProxy,\n    pageNumbers: number[],\n    language: string = 'eng'\n  ): Promise<OCRResult[]> {\n    const results: OCRResult[] = [];\n    \n    for (let i = 0; i < pageNumbers.length; i++) {\n      const pageNum = pageNumbers[i];\n      \n      // Update progress\n      this.onProgress?.((i / pageNumbers.length) * 100);\n      \n      const result = await this.performOCR(pdf, pageNum, language);\n      results.push(result);\n    }\n    \n    // Complete progress\n    this.onProgress?.(100);\n    \n    return results;\n  }\n\n  // Perform OCR on entire PDF\n  async performFullOCR(\n    pdf: PDFDocumentProxy,\n    language: string = 'eng'\n  ): Promise<OCRResult[]> {\n    const pageNumbers = Array.from({ length: pdf.numPages }, (_, i) => i + 1);\n    return this.performBatchOCR(pdf, pageNumbers, language);\n  }\n\n  // Extract text from specific region\n  async extractTextFromRegion(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    region: { x: number; y: number; width: number; height: number },\n    language: string = 'eng'\n  ): Promise<string> {\n    try {\n      await this.initialize(language);\n      \n      if (!this.worker) {\n        throw new Error('OCR worker not initialized');\n      }\n      \n      // Get page and render to canvas\n      const page = await pdf.getPage(pageNumber);\n      const viewport = page.getViewport({ scale: 2.0 });\n      \n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d')!;\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      \n      await page.render({\n        canvasContext: context,\n        viewport: viewport\n      }).promise;\n      \n      // Create cropped canvas for the region\n      const croppedCanvas = document.createElement('canvas');\n      const croppedContext = croppedCanvas.getContext('2d')!;\n      \n      // Scale region coordinates\n      const scaledRegion = {\n        x: region.x * 2,\n        y: region.y * 2,\n        width: region.width * 2,\n        height: region.height * 2\n      };\n      \n      croppedCanvas.width = scaledRegion.width;\n      croppedCanvas.height = scaledRegion.height;\n      \n      // Draw the cropped region\n      croppedContext.drawImage(\n        canvas,\n        scaledRegion.x,\n        scaledRegion.y,\n        scaledRegion.width,\n        scaledRegion.height,\n        0,\n        0,\n        scaledRegion.width,\n        scaledRegion.height\n      );\n      \n      // Perform OCR on the cropped region\n      const result = await this.worker.recognize(croppedCanvas);\n      return result.data.text;\n    } catch (error) {\n      console.error('Error extracting text from region:', error);\n      throw new Error('Failed to extract text from region');\n    }\n  }\n\n  // Auto-detect language\n  async detectLanguage(\n    pdf: PDFDocumentProxy,\n    pageNumber: number\n  ): Promise<string> {\n    try {\n      // Initialize with multiple languages for detection\n      await this.initialize('eng+spa+fra+deu');\n      \n      if (!this.worker) {\n        throw new Error('OCR worker not initialized');\n      }\n      \n      // Get page and render to canvas\n      const page = await pdf.getPage(pageNumber);\n      const viewport = page.getViewport({ scale: 1.0 });\n      \n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d')!;\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      \n      await page.render({\n        canvasContext: context,\n        viewport: viewport\n      }).promise;\n      \n      // Detect language\n      const result = await this.worker.detect(canvas);\n      return (result.data as any).language || 'eng';\n    } catch (error) {\n      console.error('Error detecting language:', error);\n      return 'eng'; // Default to English\n    }\n  }\n\n  // Preprocess image for better OCR\n  async preprocessImage(\n    imageData: ImageData,\n    options: {\n      grayscale?: boolean;\n      threshold?: boolean;\n      invert?: boolean;\n      sharpen?: boolean;\n      denoise?: boolean;\n    } = {}\n  ): Promise<ImageData> {\n    const {\n      grayscale = true,\n      threshold = false,\n      invert = false,\n      sharpen = false,\n      denoise = false\n    } = options;\n    \n    const data = new Uint8ClampedArray(imageData.data);\n    const width = imageData.width;\n    const height = imageData.height;\n    \n    // Convert to grayscale\n    if (grayscale) {\n      for (let i = 0; i < data.length; i += 4) {\n        const gray = 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2];\n        data[i] = data[i + 1] = data[i + 2] = gray;\n      }\n    }\n    \n    // Apply threshold (binarization)\n    if (threshold) {\n      const thresholdValue = 128;\n      for (let i = 0; i < data.length; i += 4) {\n        const gray = data[i];\n        const binary = gray > thresholdValue ? 255 : 0;\n        data[i] = data[i + 1] = data[i + 2] = binary;\n      }\n    }\n    \n    // Invert colors\n    if (invert) {\n      for (let i = 0; i < data.length; i += 4) {\n        data[i] = 255 - data[i];\n        data[i + 1] = 255 - data[i + 1];\n        data[i + 2] = 255 - data[i + 2];\n      }\n    }\n    \n    // Apply sharpening filter\n    if (sharpen) {\n      const kernel = [\n        0, -1, 0,\n        -1, 5, -1,\n        0, -1, 0\n      ];\n      this.applyConvolution(data, width, height, kernel);\n    }\n    \n    // Apply denoising (simple median filter)\n    if (denoise) {\n      this.applyMedianFilter(data, width, height);\n    }\n    \n    return new ImageData(data, width, height);\n  }\n\n  // Apply convolution filter\n  private applyConvolution(\n    data: Uint8ClampedArray,\n    width: number,\n    height: number,\n    kernel: number[]\n  ): void {\n    const output = new Uint8ClampedArray(data);\n    const kernelSize = Math.sqrt(kernel.length);\n    const half = Math.floor(kernelSize / 2);\n    \n    for (let y = half; y < height - half; y++) {\n      for (let x = half; x < width - half; x++) {\n        let r = 0, g = 0, b = 0;\n        \n        for (let ky = 0; ky < kernelSize; ky++) {\n          for (let kx = 0; kx < kernelSize; kx++) {\n            const px = x + kx - half;\n            const py = y + ky - half;\n            const idx = (py * width + px) * 4;\n            const weight = kernel[ky * kernelSize + kx];\n            \n            r += data[idx] * weight;\n            g += data[idx + 1] * weight;\n            b += data[idx + 2] * weight;\n          }\n        }\n        \n        const idx = (y * width + x) * 4;\n        output[idx] = Math.min(255, Math.max(0, r));\n        output[idx + 1] = Math.min(255, Math.max(0, g));\n        output[idx + 2] = Math.min(255, Math.max(0, b));\n      }\n    }\n    \n    data.set(output);\n  }\n\n  // Apply median filter for denoising\n  private applyMedianFilter(\n    data: Uint8ClampedArray,\n    width: number,\n    height: number,\n    windowSize: number = 3\n  ): void {\n    const output = new Uint8ClampedArray(data);\n    const half = Math.floor(windowSize / 2);\n    \n    for (let y = half; y < height - half; y++) {\n      for (let x = half; x < width - half; x++) {\n        const values: number[] = [];\n        \n        for (let wy = -half; wy <= half; wy++) {\n          for (let wx = -half; wx <= half; wx++) {\n            const idx = ((y + wy) * width + (x + wx)) * 4;\n            values.push(data[idx]);\n          }\n        }\n        \n        values.sort((a, b) => a - b);\n        const median = values[Math.floor(values.length / 2)];\n        \n        const idx = (y * width + x) * 4;\n        output[idx] = output[idx + 1] = output[idx + 2] = median;\n      }\n    }\n    \n    data.set(output);\n  }\n\n  // Get supported languages\n  getSupportedLanguages(): Array<{ code: string; name: string }> {\n    return this.supportedLanguages;\n  }\n\n  // Clean up resources\n  async terminate(): Promise<void> {\n    if (this.worker) {\n      await this.worker.terminate();\n      this.worker = null;\n      this.isInitialized = false;\n    }\n  }\n\n  /**\n   * Perform OCR with multiple language models for better accuracy\n   */\n  async performMultiLanguageOCR(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    languages: string[]\n  ): Promise<OCRResult[]> {\n    const results: OCRResult[] = [];\n    \n    for (const language of languages) {\n      try {\n        const result = await this.performOCR(pdf, pageNumber, language);\n        results.push(result);\n      } catch (error) {\n        console.warn(`OCR failed for language ${language}:`, error);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Smart language detection with confidence scoring\n   */\n  async smartLanguageDetection(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    candidateLanguages?: string[]\n  ): Promise<Array<{ language: string; confidence: number; text: string }>> {\n    const languages = candidateLanguages || ['eng', 'spa', 'fra', 'deu', 'chi_sim', 'jpn', 'ara'];\n    const detectionResults: Array<{ language: string; confidence: number; text: string }> = [];\n    \n    for (const language of languages) {\n      try {\n        const result = await this.performOCR(pdf, pageNumber, language);\n        detectionResults.push({\n          language,\n          confidence: result.confidence,\n          text: result.text\n        });\n      } catch (error) {\n        console.warn(`Language detection failed for ${language}:`, error);\n      }\n    }\n    \n    // Sort by confidence\n    return detectionResults.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  /**\n   * OCR with adaptive preprocessing\n   */\n  async performAdaptiveOCR(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    language: string = 'eng',\n    adaptiveOptions: {\n      autoRotate?: boolean;\n      autoDeskew?: boolean;\n      enhanceContrast?: boolean;\n      removeNoise?: boolean;\n      multiScale?: boolean;\n    } = {}\n  ): Promise<OCRResult> {\n    try {\n      await this.initialize(language);\n      \n      if (!this.worker) {\n        throw new Error('OCR worker not initialized');\n      }\n      \n      // Get page and render to canvas\n      const page = await pdf.getPage(pageNumber);\n      const viewport = page.getViewport({ scale: 2.0 });\n      \n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d')!;\n      canvas.height = viewport.height;\n      canvas.width = viewport.width;\n      \n      await page.render({\n        canvasContext: context,\n        viewport: viewport\n      }).promise;\n      \n      // Apply adaptive preprocessing\n      if (Object.values(adaptiveOptions).some(Boolean)) {\n        const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n        const processed = await this.adaptivePreprocessing(imageData, adaptiveOptions);\n        context.putImageData(processed, 0, 0);\n      }\n      \n      // Perform OCR\n      const result = await this.worker.recognize(canvas);\n      \n      return {\n        text: result.data.text,\n        confidence: result.data.confidence,\n        language,\n        pageNumber,\n        blocks: result.data.blocks?.map(block => ({\n          text: block.text,\n          confidence: block.confidence,\n          bbox: block.bbox,\n          words: block.words?.map(word => ({\n            text: word.text,\n            confidence: word.confidence,\n            bbox: word.bbox\n          })) || []\n        })) || []\n      };\n    } catch (error) {\n      console.error('Adaptive OCR failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Advanced adaptive preprocessing\n   */\n  private async adaptivePreprocessing(\n    imageData: ImageData,\n    options: {\n      autoRotate?: boolean;\n      autoDeskew?: boolean;\n      enhanceContrast?: boolean;\n      removeNoise?: boolean;\n      multiScale?: boolean;\n    }\n  ): Promise<ImageData> {\n    let processed = imageData;\n    \n    // Auto-deskew\n    if (options.autoDeskew) {\n      processed = this.deskewImage(processed);\n    }\n    \n    // Enhance contrast\n    if (options.enhanceContrast) {\n      processed = this.enhanceContrast(processed);\n    }\n    \n    // Remove noise\n    if (options.removeNoise) {\n      processed = await this.preprocessImage(processed, {\n        denoise: true,\n        grayscale: true\n      });\n    }\n    \n    return processed;\n  }\n\n  /**\n   * Deskew image to correct rotation\n   */\n  private deskewImage(imageData: ImageData): ImageData {\n    // Simplified deskewing - in a full implementation, this would:\n    // 1. Detect text lines using Hough transform\n    // 2. Calculate rotation angle\n    // 3. Rotate image to correct orientation\n    \n    // For now, return original image\n    return imageData;\n  }\n\n  /**\n   * Enhance image contrast\n   */\n  private enhanceContrast(imageData: ImageData): ImageData {\n    const data = new Uint8ClampedArray(imageData.data);\n    const factor = 1.5; // Contrast enhancement factor\n    \n    for (let i = 0; i < data.length; i += 4) {\n      // Apply contrast enhancement to RGB channels\n      data[i] = Math.min(255, Math.max(0, (data[i] - 128) * factor + 128));\n      data[i + 1] = Math.min(255, Math.max(0, (data[i + 1] - 128) * factor + 128));\n      data[i + 2] = Math.min(255, Math.max(0, (data[i + 2] - 128) * factor + 128));\n    }\n    \n    return new ImageData(data, imageData.width, imageData.height);\n  }\n\n  /**\n   * OCR with spell checking and correction\n   */\n  async performOCRWithSpellCheck(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    language: string = 'eng',\n    dictionary?: string[]\n  ): Promise<OCRResult & { correctedText: string; corrections: Array<{ original: string; corrected: string; confidence: number }> }> {\n    const baseResult = await this.performOCR(pdf, pageNumber, language);\n    \n    // Simple spell correction (in a full implementation, use a proper spell checker)\n    const corrections: Array<{ original: string; corrected: string; confidence: number }> = [];\n    let correctedText = baseResult.text;\n    \n    // Common OCR error corrections\n    const commonErrors = {\n      '0': 'O', '1': 'l', '5': 'S', '8': 'B',\n      'rn': 'm', 'cl': 'd', 'vv': 'w', 'ii': 'n'\n    };\n    \n    Object.entries(commonErrors).forEach(([error, correction]) => {\n      const regex = new RegExp(error, 'g');\n      if (regex.test(correctedText)) {\n        corrections.push({\n          original: error,\n          corrected: correction,\n          confidence: 0.8\n        });\n        correctedText = correctedText.replace(regex, correction);\n      }\n    });\n    \n    return {\n      ...baseResult,\n      correctedText,\n      corrections\n    };\n  }\n\n  /**\n   * Extract structured data (tables, forms) from OCR\n   */\n  async extractStructuredData(\n    pdf: PDFDocumentProxy,\n    pageNumber: number,\n    language: string = 'eng'\n  ): Promise<{\n    tables: Array<{\n      rows: string[][];\n      confidence: number;\n      bbox: { x0: number; y0: number; x1: number; y1: number };\n    }>;\n    forms: Array<{\n      fields: Array<{ label: string; value: string; bbox: any }>;\n      confidence: number;\n    }>;\n  }> {\n    const ocrResult = await this.performOCR(pdf, pageNumber, language);\n    \n    // Analyze blocks for table-like structures\n    const tables = this.detectTables(ocrResult.blocks);\n    \n    // Analyze blocks for form-like structures\n    const forms = this.detectForms(ocrResult.blocks);\n    \n    return { tables, forms };\n  }\n\n  private detectTables(blocks: OCRBlock[]): Array<{\n    rows: string[][];\n    confidence: number;\n    bbox: { x0: number; y0: number; x1: number; y1: number };\n  }> {\n    // Simplified table detection based on text alignment\n    // In a full implementation, this would use more sophisticated algorithms\n    return [];\n  }\n\n  private detectForms(blocks: OCRBlock[]): Array<{\n    fields: Array<{ label: string; value: string; bbox: any }>;\n    confidence: number;\n  }> {\n    // Simplified form detection based on text patterns\n    // Look for label:value patterns\n    return [];\n  }\n\n  /**\n   * Get language-specific OCR settings\n   */\n  getLanguageSettings(language: string): {\n    psm: number;\n    oem: number;\n    whitelist?: string;\n    blacklist?: string;\n    variables?: Record<string, string>;\n  } {\n    const languageInfo = this.supportedLanguages.find(lang => lang.code === language);\n    const script = languageInfo?.script || 'Latin';\n    \n    const settings: any = {\n      psm: Tesseract.PSM.AUTO, // Page segmentation mode\n      oem: Tesseract.OEM.LSTM_ONLY // OCR Engine Mode\n    };\n    \n    // Script-specific optimizations\n    switch (script) {\n      case 'Arabic':\n      case 'Hebrew':\n        settings.psm = Tesseract.PSM.SINGLE_BLOCK_VERT_TEXT;\n        settings.variables = {\n          'textord_heavy_nr': '1',\n          'textord_tabfind_show_vlines': '1'\n        };\n        break;\n        \n      case 'Han':\n      case 'Hangul':\n      case 'Mixed':\n        settings.psm = Tesseract.PSM.SINGLE_BLOCK;\n        settings.variables = {\n          'textord_really_old_xheight': '1',\n          'textord_min_linesize': '2.5'\n        };\n        break;\n        \n      case 'Devanagari':\n      case 'Bengali':\n      case 'Tamil':\n      case 'Telugu':\n        settings.variables = {\n          'lstm_use_matrix': '1',\n          'textord_really_old_xheight': '1'\n        };\n        break;\n    }\n    \n    return settings;\n  }\n\n  // Export OCR results to various formats\n  exportResults(results: OCRResult[], format: 'txt' | 'json' | 'xml' | 'csv' | 'pdf' = 'txt'): string {\n    switch (format) {\n      case 'txt':\n        return results.map(r => `Page ${r.pageNumber}:\\n${r.text}`).join('\\n\\n');\n      \n      case 'json':\n        return JSON.stringify(results, null, 2);\n      \n      case 'xml':\n        let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<ocr-results>\\n';\n        results.forEach(result => {\n          xml += `  <page number=\"${result.pageNumber}\" confidence=\"${result.confidence}\" language=\"${result.language}\">\\n`;\n          xml += `    <text><![CDATA[${result.text}]]></text>\\n`;\n          if (result.blocks.length > 0) {\n            xml += '    <blocks>\\n';\n            result.blocks.forEach(block => {\n              xml += `      <block confidence=\"${block.confidence}\">\\n`;\n              xml += `        <text><![CDATA[${block.text}]]></text>\\n`;\n              xml += `        <bbox x0=\"${block.bbox.x0}\" y0=\"${block.bbox.y0}\" x1=\"${block.bbox.x1}\" y1=\"${block.bbox.y1}\"/>\\n`;\n              xml += '      </block>\\n';\n            });\n            xml += '    </blocks>\\n';\n          }\n          xml += `  </page>\\n`;\n        });\n        xml += '</ocr-results>';\n        return xml;\n      \n      case 'csv':\n        let csv = 'Page,Confidence,Language,Text\\n';\n        results.forEach(result => {\n          const text = result.text.replace(/\"/g, '\"\"').replace(/\\n/g, ' ');\n          csv += `\"${result.pageNumber}\",\"${result.confidence}\",\"${result.language}\",\"${text}\"\\n`;\n        });\n        return csv;\n      \n      default:\n        return results.map(r => r.text).join('\\n');\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f070ce167feb0716b9c2612a6af02ded235175cf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1u87geis0x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1u87geis0x();
var __importDefault =
/* istanbul ignore next */
(cov_1u87geis0x().s[0]++,
/* istanbul ignore next */
(cov_1u87geis0x().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1u87geis0x().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1u87geis0x().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1u87geis0x().f[0]++;
  cov_1u87geis0x().s[1]++;
  return /* istanbul ignore next */(cov_1u87geis0x().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1u87geis0x().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1u87geis0x().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1u87geis0x().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1u87geis0x().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1u87geis0x().s[3]++;
exports.OCRService = void 0;
const tesseract_js_1 =
/* istanbul ignore next */
(cov_1u87geis0x().s[4]++, __importDefault(require("tesseract.js")));
const LoggerService_1 =
/* istanbul ignore next */
(cov_1u87geis0x().s[5]++, require("./LoggerService"));
class OCRService {
  worker =
  /* istanbul ignore next */
  (cov_1u87geis0x().s[6]++, null);
  isInitialized =
  /* istanbul ignore next */
  (cov_1u87geis0x().s[7]++, false);
  currentLanguage =
  /* istanbul ignore next */
  (cov_1u87geis0x().s[8]++, 'eng');
  // Supported languages with enhanced coverage
  supportedLanguages =
  /* istanbul ignore next */
  (cov_1u87geis0x().s[9]++, [{
    code: 'eng',
    name: 'English',
    script: 'Latin'
  }, {
    code: 'spa',
    name: 'Spanish',
    script: 'Latin'
  }, {
    code: 'fra',
    name: 'French',
    script: 'Latin'
  }, {
    code: 'deu',
    name: 'German',
    script: 'Latin'
  }, {
    code: 'ita',
    name: 'Italian',
    script: 'Latin'
  }, {
    code: 'por',
    name: 'Portuguese',
    script: 'Latin'
  }, {
    code: 'nld',
    name: 'Dutch',
    script: 'Latin'
  }, {
    code: 'dan',
    name: 'Danish',
    script: 'Latin'
  }, {
    code: 'fin',
    name: 'Finnish',
    script: 'Latin'
  }, {
    code: 'nor',
    name: 'Norwegian',
    script: 'Latin'
  }, {
    code: 'swe',
    name: 'Swedish',
    script: 'Latin'
  }, {
    code: 'pol',
    name: 'Polish',
    script: 'Latin'
  }, {
    code: 'ces',
    name: 'Czech',
    script: 'Latin'
  }, {
    code: 'hun',
    name: 'Hungarian',
    script: 'Latin'
  }, {
    code: 'ron',
    name: 'Romanian',
    script: 'Latin'
  }, {
    code: 'hrv',
    name: 'Croatian',
    script: 'Latin'
  }, {
    code: 'slv',
    name: 'Slovenian',
    script: 'Latin'
  }, {
    code: 'slk',
    name: 'Slovak',
    script: 'Latin'
  }, {
    code: 'est',
    name: 'Estonian',
    script: 'Latin'
  }, {
    code: 'lav',
    name: 'Latvian',
    script: 'Latin'
  }, {
    code: 'lit',
    name: 'Lithuanian',
    script: 'Latin'
  }, {
    code: 'rus',
    name: 'Russian',
    script: 'Cyrillic'
  }, {
    code: 'ukr',
    name: 'Ukrainian',
    script: 'Cyrillic'
  }, {
    code: 'bul',
    name: 'Bulgarian',
    script: 'Cyrillic'
  }, {
    code: 'srp',
    name: 'Serbian',
    script: 'Cyrillic'
  }, {
    code: 'mkd',
    name: 'Macedonian',
    script: 'Cyrillic'
  }, {
    code: 'chi_sim',
    name: 'Chinese (Simplified)',
    script: 'Han'
  }, {
    code: 'chi_tra',
    name: 'Chinese (Traditional)',
    script: 'Han'
  }, {
    code: 'jpn',
    name: 'Japanese',
    script: 'Mixed'
  }, {
    code: 'kor',
    name: 'Korean',
    script: 'Hangul'
  }, {
    code: 'ara',
    name: 'Arabic',
    script: 'Arabic'
  }, {
    code: 'heb',
    name: 'Hebrew',
    script: 'Hebrew'
  }, {
    code: 'hin',
    name: 'Hindi',
    script: 'Devanagari'
  }, {
    code: 'ben',
    name: 'Bengali',
    script: 'Bengali'
  }, {
    code: 'guj',
    name: 'Gujarati',
    script: 'Gujarati'
  }, {
    code: 'pan',
    name: 'Punjabi',
    script: 'Gurmukhi'
  }, {
    code: 'tam',
    name: 'Tamil',
    script: 'Tamil'
  }, {
    code: 'tel',
    name: 'Telugu',
    script: 'Telugu'
  }, {
    code: 'kan',
    name: 'Kannada',
    script: 'Kannada'
  }, {
    code: 'mal',
    name: 'Malayalam',
    script: 'Malayalam'
  }, {
    code: 'ori',
    name: 'Odia',
    script: 'Odia'
  }, {
    code: 'asm',
    name: 'Assamese',
    script: 'Bengali'
  }, {
    code: 'tha',
    name: 'Thai',
    script: 'Thai'
  }, {
    code: 'vie',
    name: 'Vietnamese',
    script: 'Latin'
  }, {
    code: 'mya',
    name: 'Burmese',
    script: 'Myanmar'
  }, {
    code: 'khm',
    name: 'Khmer',
    script: 'Khmer'
  }, {
    code: 'lao',
    name: 'Lao',
    script: 'Lao'
  }, {
    code: 'sin',
    name: 'Sinhala',
    script: 'Sinhala'
  }, {
    code: 'tur',
    name: 'Turkish',
    script: 'Latin'
  }, {
    code: 'fas',
    name: 'Persian',
    script: 'Arabic'
  }, {
    code: 'urd',
    name: 'Urdu',
    script: 'Arabic'
  }, {
    code: 'pus',
    name: 'Pashto',
    script: 'Arabic'
  }, {
    code: 'swa',
    name: 'Swahili',
    script: 'Latin'
  }, {
    code: 'amh',
    name: 'Amharic',
    script: 'Ethiopic'
  }, {
    code: 'grc',
    name: 'Greek',
    script: 'Greek'
  }, {
    code: 'arm',
    name: 'Armenian',
    script: 'Armenian'
  }, {
    code: 'geo',
    name: 'Georgian',
    script: 'Georgian'
  }, {
    code: 'kat',
    name: 'Georgian (Alternative)',
    script: 'Georgian'
  }, {
    code: 'isl',
    name: 'Icelandic',
    script: 'Latin'
  }, {
    code: 'mlt',
    name: 'Maltese',
    script: 'Latin'
  }, {
    code: 'epo',
    name: 'Esperanto',
    script: 'Latin'
  }, {
    code: 'lat',
    name: 'Latin',
    script: 'Latin'
  }]);
  // Initialize Tesseract worker
  async initialize(language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[3][0]++, 'eng')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[1]++;
    cov_1u87geis0x().s[10]++;
    if (
    /* istanbul ignore next */
    (cov_1u87geis0x().b[5][0]++, this.isInitialized) &&
    /* istanbul ignore next */
    (cov_1u87geis0x().b[5][1]++, this.currentLanguage === language)) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[4][0]++;
      cov_1u87geis0x().s[11]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[4][1]++;
    }
    cov_1u87geis0x().s[12]++;
    try {
      /* istanbul ignore next */
      cov_1u87geis0x().s[13]++;
      // Terminate existing worker if any
      if (this.worker) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[6][0]++;
        cov_1u87geis0x().s[14]++;
        await this.worker.terminate();
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[6][1]++;
      }
      // Create new worker with local paths
      cov_1u87geis0x().s[15]++;
      this.worker = await tesseract_js_1.default.createWorker(language, 1, {
        logger: m => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[2]++;
          cov_1u87geis0x().s[16]++;
          if (m.status === 'recognizing text') {
            /* istanbul ignore next */
            cov_1u87geis0x().b[7][0]++;
            cov_1u87geis0x().s[17]++;
            // Emit progress event
            this.onProgress?.(m.progress);
          } else
          /* istanbul ignore next */
          {
            cov_1u87geis0x().b[7][1]++;
          }
        },
        // Specify local paths for worker and core files (absolute from root)
        workerPath: '/worker.min.js',
        corePath: '/tesseract-core.wasm.js',
        langPath: '/tessdata'
      });
      // Set OCR parameters for better accuracy
      /* istanbul ignore next */
      cov_1u87geis0x().s[18]++;
      await this.worker.setParameters({
        tessedit_pageseg_mode: tesseract_js_1.default.PSM.AUTO,
        preserve_interword_spaces: '1',
        tessedit_char_whitelist: ' !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'
      });
      /* istanbul ignore next */
      cov_1u87geis0x().s[19]++;
      this.currentLanguage = language;
      /* istanbul ignore next */
      cov_1u87geis0x().s[20]++;
      this.isInitialized = true;
    } catch (error) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[21]++;
      LoggerService_1.logger.error('Error initializing OCR service', error, {
        language
      });
      /* istanbul ignore next */
      cov_1u87geis0x().s[22]++;
      throw (0, LoggerService_1.createAppError)('OCR_INITIALIZATION_FAILED', 'Failed to initialize OCR service', {
        language
      });
    }
  }
  // Progress callback
  onProgress;
  // Set progress callback
  setProgressCallback(callback) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[3]++;
    cov_1u87geis0x().s[23]++;
    this.onProgress = callback;
  }
  // Perform OCR on PDF page
  async performOCR(pdf, pageNumber, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[8][0]++, 'eng')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[4]++;
    cov_1u87geis0x().s[24]++;
    try {
      /* istanbul ignore next */
      cov_1u87geis0x().s[25]++;
      // Initialize worker if needed
      await this.initialize(language);
      /* istanbul ignore next */
      cov_1u87geis0x().s[26]++;
      if (!this.worker) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[9][0]++;
        cov_1u87geis0x().s[27]++;
        throw (0, LoggerService_1.createAppError)('OCR_INITIALIZATION_FAILED', 'OCR worker not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[9][1]++;
      }
      // Get page and render to canvas
      const page =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[28]++, await pdf.getPage(pageNumber));
      const viewport =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[29]++, page.getViewport({
        scale: 2.0
      })); // Higher scale for better OCR
      const canvas =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[30]++, document.createElement('canvas'));
      const context =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[31]++, canvas.getContext('2d'));
      /* istanbul ignore next */
      cov_1u87geis0x().s[32]++;
      canvas.height = viewport.height;
      /* istanbul ignore next */
      cov_1u87geis0x().s[33]++;
      canvas.width = viewport.width;
      /* istanbul ignore next */
      cov_1u87geis0x().s[34]++;
      await page.render({
        canvasContext: context,
        viewport: viewport
      }).promise;
      // Perform OCR
      const result =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[35]++, await this.worker.recognize(canvas));
      // Process and structure the results
      const ocrResult =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[36]++, {
        text: result.data.text,
        confidence: result.data.confidence,
        language,
        pageNumber,
        blocks:
        /* istanbul ignore next */
        (cov_1u87geis0x().b[10][0]++, result.data.blocks?.map(block => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[5]++;
          cov_1u87geis0x().s[37]++;
          return {
            text: block.text,
            confidence: block.confidence,
            bbox: block.bbox,
            words:
            /* istanbul ignore next */
            (cov_1u87geis0x().b[11][0]++, block.words?.map(word => {
              /* istanbul ignore next */
              cov_1u87geis0x().f[6]++;
              cov_1u87geis0x().s[38]++;
              return {
                text: word.text,
                confidence: word.confidence,
                bbox: word.bbox
              };
            })) ||
            /* istanbul ignore next */
            (cov_1u87geis0x().b[11][1]++, [])
          };
        })) ||
        /* istanbul ignore next */
        (cov_1u87geis0x().b[10][1]++, [])
      });
      /* istanbul ignore next */
      cov_1u87geis0x().s[39]++;
      return ocrResult;
    } catch (error) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[40]++;
      LoggerService_1.logger.error('Error performing OCR', error, {
        pageNumber,
        language
      });
      /* istanbul ignore next */
      cov_1u87geis0x().s[41]++;
      throw (0, LoggerService_1.createAppError)('OCR_PROCESSING_FAILED', 'OCR failed', {
        pageNumber,
        language
      });
    }
  }
  // Perform OCR on multiple pages
  async performBatchOCR(pdf, pageNumbers, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[12][0]++, 'eng')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[7]++;
    const results =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[42]++, []);
    /* istanbul ignore next */
    cov_1u87geis0x().s[43]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[44]++, 0); i < pageNumbers.length; i++) {
      const pageNum =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[45]++, pageNumbers[i]);
      // Update progress
      /* istanbul ignore next */
      cov_1u87geis0x().s[46]++;
      this.onProgress?.(i / pageNumbers.length * 100);
      const result =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[47]++, await this.performOCR(pdf, pageNum, language));
      /* istanbul ignore next */
      cov_1u87geis0x().s[48]++;
      results.push(result);
    }
    // Complete progress
    /* istanbul ignore next */
    cov_1u87geis0x().s[49]++;
    this.onProgress?.(100);
    /* istanbul ignore next */
    cov_1u87geis0x().s[50]++;
    return results;
  }
  // Perform OCR on entire PDF
  async performFullOCR(pdf, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[13][0]++, 'eng')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[8]++;
    const pageNumbers =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[51]++, Array.from({
      length: pdf.numPages
    }, (_, i) => {
      /* istanbul ignore next */
      cov_1u87geis0x().f[9]++;
      cov_1u87geis0x().s[52]++;
      return i + 1;
    }));
    /* istanbul ignore next */
    cov_1u87geis0x().s[53]++;
    return this.performBatchOCR(pdf, pageNumbers, language);
  }
  // Extract text from specific region
  async extractTextFromRegion(pdf, pageNumber, region, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[14][0]++, 'eng')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[10]++;
    cov_1u87geis0x().s[54]++;
    try {
      /* istanbul ignore next */
      cov_1u87geis0x().s[55]++;
      await this.initialize(language);
      /* istanbul ignore next */
      cov_1u87geis0x().s[56]++;
      if (!this.worker) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[15][0]++;
        cov_1u87geis0x().s[57]++;
        throw new Error('OCR worker not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[15][1]++;
      }
      // Get page and render to canvas
      const page =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[58]++, await pdf.getPage(pageNumber));
      const viewport =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[59]++, page.getViewport({
        scale: 2.0
      }));
      const canvas =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[60]++, document.createElement('canvas'));
      const context =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[61]++, canvas.getContext('2d'));
      /* istanbul ignore next */
      cov_1u87geis0x().s[62]++;
      canvas.height = viewport.height;
      /* istanbul ignore next */
      cov_1u87geis0x().s[63]++;
      canvas.width = viewport.width;
      /* istanbul ignore next */
      cov_1u87geis0x().s[64]++;
      await page.render({
        canvasContext: context,
        viewport: viewport
      }).promise;
      // Create cropped canvas for the region
      const croppedCanvas =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[65]++, document.createElement('canvas'));
      const croppedContext =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[66]++, croppedCanvas.getContext('2d'));
      // Scale region coordinates
      const scaledRegion =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[67]++, {
        x: region.x * 2,
        y: region.y * 2,
        width: region.width * 2,
        height: region.height * 2
      });
      /* istanbul ignore next */
      cov_1u87geis0x().s[68]++;
      croppedCanvas.width = scaledRegion.width;
      /* istanbul ignore next */
      cov_1u87geis0x().s[69]++;
      croppedCanvas.height = scaledRegion.height;
      // Draw the cropped region
      /* istanbul ignore next */
      cov_1u87geis0x().s[70]++;
      croppedContext.drawImage(canvas, scaledRegion.x, scaledRegion.y, scaledRegion.width, scaledRegion.height, 0, 0, scaledRegion.width, scaledRegion.height);
      // Perform OCR on the cropped region
      const result =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[71]++, await this.worker.recognize(croppedCanvas));
      /* istanbul ignore next */
      cov_1u87geis0x().s[72]++;
      return result.data.text;
    } catch (error) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[73]++;
      console.error('Error extracting text from region:', error);
      /* istanbul ignore next */
      cov_1u87geis0x().s[74]++;
      throw new Error('Failed to extract text from region');
    }
  }
  // Auto-detect language
  async detectLanguage(pdf, pageNumber) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[11]++;
    cov_1u87geis0x().s[75]++;
    try {
      /* istanbul ignore next */
      cov_1u87geis0x().s[76]++;
      // Initialize with multiple languages for detection
      await this.initialize('eng+spa+fra+deu');
      /* istanbul ignore next */
      cov_1u87geis0x().s[77]++;
      if (!this.worker) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[16][0]++;
        cov_1u87geis0x().s[78]++;
        throw new Error('OCR worker not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[16][1]++;
      }
      // Get page and render to canvas
      const page =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[79]++, await pdf.getPage(pageNumber));
      const viewport =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[80]++, page.getViewport({
        scale: 1.0
      }));
      const canvas =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[81]++, document.createElement('canvas'));
      const context =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[82]++, canvas.getContext('2d'));
      /* istanbul ignore next */
      cov_1u87geis0x().s[83]++;
      canvas.height = viewport.height;
      /* istanbul ignore next */
      cov_1u87geis0x().s[84]++;
      canvas.width = viewport.width;
      /* istanbul ignore next */
      cov_1u87geis0x().s[85]++;
      await page.render({
        canvasContext: context,
        viewport: viewport
      }).promise;
      // Detect language
      const result =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[86]++, await this.worker.detect(canvas));
      /* istanbul ignore next */
      cov_1u87geis0x().s[87]++;
      return /* istanbul ignore next */(cov_1u87geis0x().b[17][0]++, result.data.language) ||
      /* istanbul ignore next */
      (cov_1u87geis0x().b[17][1]++, 'eng');
    } catch (error) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[88]++;
      console.error('Error detecting language:', error);
      /* istanbul ignore next */
      cov_1u87geis0x().s[89]++;
      return 'eng'; // Default to English
    }
  }
  // Preprocess image for better OCR
  async preprocessImage(imageData, options =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[18][0]++, {})) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[12]++;
    const {
      grayscale =
      /* istanbul ignore next */
      (cov_1u87geis0x().b[19][0]++, true),
      threshold =
      /* istanbul ignore next */
      (cov_1u87geis0x().b[20][0]++, false),
      invert =
      /* istanbul ignore next */
      (cov_1u87geis0x().b[21][0]++, false),
      sharpen =
      /* istanbul ignore next */
      (cov_1u87geis0x().b[22][0]++, false),
      denoise =
      /* istanbul ignore next */
      (cov_1u87geis0x().b[23][0]++, false)
    } =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[90]++, options);
    const data =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[91]++, new Uint8ClampedArray(imageData.data));
    const width =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[92]++, imageData.width);
    const height =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[93]++, imageData.height);
    // Convert to grayscale
    /* istanbul ignore next */
    cov_1u87geis0x().s[94]++;
    if (grayscale) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[24][0]++;
      cov_1u87geis0x().s[95]++;
      for (let i =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[96]++, 0); i < data.length; i += 4) {
        const gray =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[97]++, 0.299 * data[i] + 0.587 * data[i + 1] + 0.114 * data[i + 2]);
        /* istanbul ignore next */
        cov_1u87geis0x().s[98]++;
        data[i] = data[i + 1] = data[i + 2] = gray;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[24][1]++;
    }
    // Apply threshold (binarization)
    cov_1u87geis0x().s[99]++;
    if (threshold) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[25][0]++;
      const thresholdValue =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[100]++, 128);
      /* istanbul ignore next */
      cov_1u87geis0x().s[101]++;
      for (let i =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[102]++, 0); i < data.length; i += 4) {
        const gray =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[103]++, data[i]);
        const binary =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[104]++, gray > thresholdValue ?
        /* istanbul ignore next */
        (cov_1u87geis0x().b[26][0]++, 255) :
        /* istanbul ignore next */
        (cov_1u87geis0x().b[26][1]++, 0));
        /* istanbul ignore next */
        cov_1u87geis0x().s[105]++;
        data[i] = data[i + 1] = data[i + 2] = binary;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[25][1]++;
    }
    // Invert colors
    cov_1u87geis0x().s[106]++;
    if (invert) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[27][0]++;
      cov_1u87geis0x().s[107]++;
      for (let i =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[108]++, 0); i < data.length; i += 4) {
        /* istanbul ignore next */
        cov_1u87geis0x().s[109]++;
        data[i] = 255 - data[i];
        /* istanbul ignore next */
        cov_1u87geis0x().s[110]++;
        data[i + 1] = 255 - data[i + 1];
        /* istanbul ignore next */
        cov_1u87geis0x().s[111]++;
        data[i + 2] = 255 - data[i + 2];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[27][1]++;
    }
    // Apply sharpening filter
    cov_1u87geis0x().s[112]++;
    if (sharpen) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[28][0]++;
      const kernel =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[113]++, [0, -1, 0, -1, 5, -1, 0, -1, 0]);
      /* istanbul ignore next */
      cov_1u87geis0x().s[114]++;
      this.applyConvolution(data, width, height, kernel);
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[28][1]++;
    }
    // Apply denoising (simple median filter)
    cov_1u87geis0x().s[115]++;
    if (denoise) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[29][0]++;
      cov_1u87geis0x().s[116]++;
      this.applyMedianFilter(data, width, height);
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[29][1]++;
    }
    cov_1u87geis0x().s[117]++;
    return new ImageData(data, width, height);
  }
  // Apply convolution filter
  applyConvolution(data, width, height, kernel) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[13]++;
    const output =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[118]++, new Uint8ClampedArray(data));
    const kernelSize =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[119]++, Math.sqrt(kernel.length));
    const half =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[120]++, Math.floor(kernelSize / 2));
    /* istanbul ignore next */
    cov_1u87geis0x().s[121]++;
    for (let y =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[122]++, half); y < height - half; y++) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[123]++;
      for (let x =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[124]++, half); x < width - half; x++) {
        let r =
          /* istanbul ignore next */
          (cov_1u87geis0x().s[125]++, 0),
          g =
          /* istanbul ignore next */
          (cov_1u87geis0x().s[126]++, 0),
          b =
          /* istanbul ignore next */
          (cov_1u87geis0x().s[127]++, 0);
        /* istanbul ignore next */
        cov_1u87geis0x().s[128]++;
        for (let ky =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[129]++, 0); ky < kernelSize; ky++) {
          /* istanbul ignore next */
          cov_1u87geis0x().s[130]++;
          for (let kx =
          /* istanbul ignore next */
          (cov_1u87geis0x().s[131]++, 0); kx < kernelSize; kx++) {
            const px =
            /* istanbul ignore next */
            (cov_1u87geis0x().s[132]++, x + kx - half);
            const py =
            /* istanbul ignore next */
            (cov_1u87geis0x().s[133]++, y + ky - half);
            const idx =
            /* istanbul ignore next */
            (cov_1u87geis0x().s[134]++, (py * width + px) * 4);
            const weight =
            /* istanbul ignore next */
            (cov_1u87geis0x().s[135]++, kernel[ky * kernelSize + kx]);
            /* istanbul ignore next */
            cov_1u87geis0x().s[136]++;
            r += data[idx] * weight;
            /* istanbul ignore next */
            cov_1u87geis0x().s[137]++;
            g += data[idx + 1] * weight;
            /* istanbul ignore next */
            cov_1u87geis0x().s[138]++;
            b += data[idx + 2] * weight;
          }
        }
        const idx =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[139]++, (y * width + x) * 4);
        /* istanbul ignore next */
        cov_1u87geis0x().s[140]++;
        output[idx] = Math.min(255, Math.max(0, r));
        /* istanbul ignore next */
        cov_1u87geis0x().s[141]++;
        output[idx + 1] = Math.min(255, Math.max(0, g));
        /* istanbul ignore next */
        cov_1u87geis0x().s[142]++;
        output[idx + 2] = Math.min(255, Math.max(0, b));
      }
    }
    /* istanbul ignore next */
    cov_1u87geis0x().s[143]++;
    data.set(output);
  }
  // Apply median filter for denoising
  applyMedianFilter(data, width, height, windowSize =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[30][0]++, 3)) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[14]++;
    const output =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[144]++, new Uint8ClampedArray(data));
    const half =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[145]++, Math.floor(windowSize / 2));
    /* istanbul ignore next */
    cov_1u87geis0x().s[146]++;
    for (let y =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[147]++, half); y < height - half; y++) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[148]++;
      for (let x =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[149]++, half); x < width - half; x++) {
        const values =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[150]++, []);
        /* istanbul ignore next */
        cov_1u87geis0x().s[151]++;
        for (let wy =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[152]++, -half); wy <= half; wy++) {
          /* istanbul ignore next */
          cov_1u87geis0x().s[153]++;
          for (let wx =
          /* istanbul ignore next */
          (cov_1u87geis0x().s[154]++, -half); wx <= half; wx++) {
            const idx =
            /* istanbul ignore next */
            (cov_1u87geis0x().s[155]++, ((y + wy) * width + (x + wx)) * 4);
            /* istanbul ignore next */
            cov_1u87geis0x().s[156]++;
            values.push(data[idx]);
          }
        }
        /* istanbul ignore next */
        cov_1u87geis0x().s[157]++;
        values.sort((a, b) => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[15]++;
          cov_1u87geis0x().s[158]++;
          return a - b;
        });
        const median =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[159]++, values[Math.floor(values.length / 2)]);
        const idx =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[160]++, (y * width + x) * 4);
        /* istanbul ignore next */
        cov_1u87geis0x().s[161]++;
        output[idx] = output[idx + 1] = output[idx + 2] = median;
      }
    }
    /* istanbul ignore next */
    cov_1u87geis0x().s[162]++;
    data.set(output);
  }
  // Get supported languages
  getSupportedLanguages() {
    /* istanbul ignore next */
    cov_1u87geis0x().f[16]++;
    cov_1u87geis0x().s[163]++;
    return this.supportedLanguages;
  }
  // Clean up resources
  async terminate() {
    /* istanbul ignore next */
    cov_1u87geis0x().f[17]++;
    cov_1u87geis0x().s[164]++;
    if (this.worker) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[31][0]++;
      cov_1u87geis0x().s[165]++;
      await this.worker.terminate();
      /* istanbul ignore next */
      cov_1u87geis0x().s[166]++;
      this.worker = null;
      /* istanbul ignore next */
      cov_1u87geis0x().s[167]++;
      this.isInitialized = false;
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[31][1]++;
    }
  }
  /**
   * Perform OCR with multiple language models for better accuracy
   */
  async performMultiLanguageOCR(pdf, pageNumber, languages) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[18]++;
    const results =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[168]++, []);
    /* istanbul ignore next */
    cov_1u87geis0x().s[169]++;
    for (const language of languages) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[170]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[171]++, await this.performOCR(pdf, pageNumber, language));
        /* istanbul ignore next */
        cov_1u87geis0x().s[172]++;
        results.push(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_1u87geis0x().s[173]++;
        console.warn(`OCR failed for language ${language}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_1u87geis0x().s[174]++;
    return results;
  }
  /**
   * Smart language detection with confidence scoring
   */
  async smartLanguageDetection(pdf, pageNumber, candidateLanguages) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[19]++;
    const languages =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[175]++,
    /* istanbul ignore next */
    (cov_1u87geis0x().b[32][0]++, candidateLanguages) ||
    /* istanbul ignore next */
    (cov_1u87geis0x().b[32][1]++, ['eng', 'spa', 'fra', 'deu', 'chi_sim', 'jpn', 'ara']));
    const detectionResults =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[176]++, []);
    /* istanbul ignore next */
    cov_1u87geis0x().s[177]++;
    for (const language of languages) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[178]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[179]++, await this.performOCR(pdf, pageNumber, language));
        /* istanbul ignore next */
        cov_1u87geis0x().s[180]++;
        detectionResults.push({
          language,
          confidence: result.confidence,
          text: result.text
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1u87geis0x().s[181]++;
        console.warn(`Language detection failed for ${language}:`, error);
      }
    }
    // Sort by confidence
    /* istanbul ignore next */
    cov_1u87geis0x().s[182]++;
    return detectionResults.sort((a, b) => {
      /* istanbul ignore next */
      cov_1u87geis0x().f[20]++;
      cov_1u87geis0x().s[183]++;
      return b.confidence - a.confidence;
    });
  }
  /**
   * OCR with adaptive preprocessing
   */
  async performAdaptiveOCR(pdf, pageNumber, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[33][0]++, 'eng'), adaptiveOptions =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[34][0]++, {})) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[21]++;
    cov_1u87geis0x().s[184]++;
    try {
      /* istanbul ignore next */
      cov_1u87geis0x().s[185]++;
      await this.initialize(language);
      /* istanbul ignore next */
      cov_1u87geis0x().s[186]++;
      if (!this.worker) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[35][0]++;
        cov_1u87geis0x().s[187]++;
        throw new Error('OCR worker not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[35][1]++;
      }
      // Get page and render to canvas
      const page =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[188]++, await pdf.getPage(pageNumber));
      const viewport =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[189]++, page.getViewport({
        scale: 2.0
      }));
      const canvas =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[190]++, document.createElement('canvas'));
      const context =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[191]++, canvas.getContext('2d'));
      /* istanbul ignore next */
      cov_1u87geis0x().s[192]++;
      canvas.height = viewport.height;
      /* istanbul ignore next */
      cov_1u87geis0x().s[193]++;
      canvas.width = viewport.width;
      /* istanbul ignore next */
      cov_1u87geis0x().s[194]++;
      await page.render({
        canvasContext: context,
        viewport: viewport
      }).promise;
      // Apply adaptive preprocessing
      /* istanbul ignore next */
      cov_1u87geis0x().s[195]++;
      if (Object.values(adaptiveOptions).some(Boolean)) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[36][0]++;
        const imageData =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[196]++, context.getImageData(0, 0, canvas.width, canvas.height));
        const processed =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[197]++, await this.adaptivePreprocessing(imageData, adaptiveOptions));
        /* istanbul ignore next */
        cov_1u87geis0x().s[198]++;
        context.putImageData(processed, 0, 0);
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[36][1]++;
      }
      // Perform OCR
      const result =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[199]++, await this.worker.recognize(canvas));
      /* istanbul ignore next */
      cov_1u87geis0x().s[200]++;
      return {
        text: result.data.text,
        confidence: result.data.confidence,
        language,
        pageNumber,
        blocks:
        /* istanbul ignore next */
        (cov_1u87geis0x().b[37][0]++, result.data.blocks?.map(block => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[22]++;
          cov_1u87geis0x().s[201]++;
          return {
            text: block.text,
            confidence: block.confidence,
            bbox: block.bbox,
            words:
            /* istanbul ignore next */
            (cov_1u87geis0x().b[38][0]++, block.words?.map(word => {
              /* istanbul ignore next */
              cov_1u87geis0x().f[23]++;
              cov_1u87geis0x().s[202]++;
              return {
                text: word.text,
                confidence: word.confidence,
                bbox: word.bbox
              };
            })) ||
            /* istanbul ignore next */
            (cov_1u87geis0x().b[38][1]++, [])
          };
        })) ||
        /* istanbul ignore next */
        (cov_1u87geis0x().b[37][1]++, [])
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[203]++;
      console.error('Adaptive OCR failed:', error);
      /* istanbul ignore next */
      cov_1u87geis0x().s[204]++;
      throw error;
    }
  }
  /**
   * Advanced adaptive preprocessing
   */
  async adaptivePreprocessing(imageData, options) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[24]++;
    let processed =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[205]++, imageData);
    // Auto-deskew
    /* istanbul ignore next */
    cov_1u87geis0x().s[206]++;
    if (options.autoDeskew) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[39][0]++;
      cov_1u87geis0x().s[207]++;
      processed = this.deskewImage(processed);
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[39][1]++;
    }
    // Enhance contrast
    cov_1u87geis0x().s[208]++;
    if (options.enhanceContrast) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[40][0]++;
      cov_1u87geis0x().s[209]++;
      processed = this.enhanceContrast(processed);
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[40][1]++;
    }
    // Remove noise
    cov_1u87geis0x().s[210]++;
    if (options.removeNoise) {
      /* istanbul ignore next */
      cov_1u87geis0x().b[41][0]++;
      cov_1u87geis0x().s[211]++;
      processed = await this.preprocessImage(processed, {
        denoise: true,
        grayscale: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_1u87geis0x().b[41][1]++;
    }
    cov_1u87geis0x().s[212]++;
    return processed;
  }
  /**
   * Deskew image to correct rotation
   */
  deskewImage(imageData) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[25]++;
    cov_1u87geis0x().s[213]++;
    // Simplified deskewing - in a full implementation, this would:
    // 1. Detect text lines using Hough transform
    // 2. Calculate rotation angle
    // 3. Rotate image to correct orientation
    // For now, return original image
    return imageData;
  }
  /**
   * Enhance image contrast
   */
  enhanceContrast(imageData) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[26]++;
    const data =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[214]++, new Uint8ClampedArray(imageData.data));
    const factor =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[215]++, 1.5); // Contrast enhancement factor
    /* istanbul ignore next */
    cov_1u87geis0x().s[216]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[217]++, 0); i < data.length; i += 4) {
      /* istanbul ignore next */
      cov_1u87geis0x().s[218]++;
      // Apply contrast enhancement to RGB channels
      data[i] = Math.min(255, Math.max(0, (data[i] - 128) * factor + 128));
      /* istanbul ignore next */
      cov_1u87geis0x().s[219]++;
      data[i + 1] = Math.min(255, Math.max(0, (data[i + 1] - 128) * factor + 128));
      /* istanbul ignore next */
      cov_1u87geis0x().s[220]++;
      data[i + 2] = Math.min(255, Math.max(0, (data[i + 2] - 128) * factor + 128));
    }
    /* istanbul ignore next */
    cov_1u87geis0x().s[221]++;
    return new ImageData(data, imageData.width, imageData.height);
  }
  /**
   * OCR with spell checking and correction
   */
  async performOCRWithSpellCheck(pdf, pageNumber, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[42][0]++, 'eng'), dictionary) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[27]++;
    const baseResult =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[222]++, await this.performOCR(pdf, pageNumber, language));
    // Simple spell correction (in a full implementation, use a proper spell checker)
    const corrections =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[223]++, []);
    let correctedText =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[224]++, baseResult.text);
    // Common OCR error corrections
    const commonErrors =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[225]++, {
      '0': 'O',
      '1': 'l',
      '5': 'S',
      '8': 'B',
      'rn': 'm',
      'cl': 'd',
      'vv': 'w',
      'ii': 'n'
    });
    /* istanbul ignore next */
    cov_1u87geis0x().s[226]++;
    Object.entries(commonErrors).forEach(([error, correction]) => {
      /* istanbul ignore next */
      cov_1u87geis0x().f[28]++;
      const regex =
      /* istanbul ignore next */
      (cov_1u87geis0x().s[227]++, new RegExp(error, 'g'));
      /* istanbul ignore next */
      cov_1u87geis0x().s[228]++;
      if (regex.test(correctedText)) {
        /* istanbul ignore next */
        cov_1u87geis0x().b[43][0]++;
        cov_1u87geis0x().s[229]++;
        corrections.push({
          original: error,
          corrected: correction,
          confidence: 0.8
        });
        /* istanbul ignore next */
        cov_1u87geis0x().s[230]++;
        correctedText = correctedText.replace(regex, correction);
      } else
      /* istanbul ignore next */
      {
        cov_1u87geis0x().b[43][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1u87geis0x().s[231]++;
    return {
      ...baseResult,
      correctedText,
      corrections
    };
  }
  /**
   * Extract structured data (tables, forms) from OCR
   */
  async extractStructuredData(pdf, pageNumber, language =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[44][0]++, 'eng')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[29]++;
    const ocrResult =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[232]++, await this.performOCR(pdf, pageNumber, language));
    // Analyze blocks for table-like structures
    const tables =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[233]++, this.detectTables(ocrResult.blocks));
    // Analyze blocks for form-like structures
    const forms =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[234]++, this.detectForms(ocrResult.blocks));
    /* istanbul ignore next */
    cov_1u87geis0x().s[235]++;
    return {
      tables,
      forms
    };
  }
  detectTables(blocks) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[30]++;
    cov_1u87geis0x().s[236]++;
    // Simplified table detection based on text alignment
    // In a full implementation, this would use more sophisticated algorithms
    return [];
  }
  detectForms(blocks) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[31]++;
    cov_1u87geis0x().s[237]++;
    // Simplified form detection based on text patterns
    // Look for label:value patterns
    return [];
  }
  /**
   * Get language-specific OCR settings
   */
  getLanguageSettings(language) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[32]++;
    const languageInfo =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[238]++, this.supportedLanguages.find(lang => {
      /* istanbul ignore next */
      cov_1u87geis0x().f[33]++;
      cov_1u87geis0x().s[239]++;
      return lang.code === language;
    }));
    const script =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[240]++,
    /* istanbul ignore next */
    (cov_1u87geis0x().b[45][0]++, languageInfo?.script) ||
    /* istanbul ignore next */
    (cov_1u87geis0x().b[45][1]++, 'Latin'));
    const settings =
    /* istanbul ignore next */
    (cov_1u87geis0x().s[241]++, {
      psm: tesseract_js_1.default.PSM.AUTO,
      // Page segmentation mode
      oem: tesseract_js_1.default.OEM.LSTM_ONLY // OCR Engine Mode
    });
    // Script-specific optimizations
    /* istanbul ignore next */
    cov_1u87geis0x().s[242]++;
    switch (script) {
      case 'Arabic':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][0]++;
      case 'Hebrew':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][1]++;
        cov_1u87geis0x().s[243]++;
        settings.psm = tesseract_js_1.default.PSM.SINGLE_BLOCK_VERT_TEXT;
        /* istanbul ignore next */
        cov_1u87geis0x().s[244]++;
        settings.variables = {
          'textord_heavy_nr': '1',
          'textord_tabfind_show_vlines': '1'
        };
        /* istanbul ignore next */
        cov_1u87geis0x().s[245]++;
        break;
      case 'Han':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][2]++;
      case 'Hangul':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][3]++;
      case 'Mixed':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][4]++;
        cov_1u87geis0x().s[246]++;
        settings.psm = tesseract_js_1.default.PSM.SINGLE_BLOCK;
        /* istanbul ignore next */
        cov_1u87geis0x().s[247]++;
        settings.variables = {
          'textord_really_old_xheight': '1',
          'textord_min_linesize': '2.5'
        };
        /* istanbul ignore next */
        cov_1u87geis0x().s[248]++;
        break;
      case 'Devanagari':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][5]++;
      case 'Bengali':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][6]++;
      case 'Tamil':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][7]++;
      case 'Telugu':
        /* istanbul ignore next */
        cov_1u87geis0x().b[46][8]++;
        cov_1u87geis0x().s[249]++;
        settings.variables = {
          'lstm_use_matrix': '1',
          'textord_really_old_xheight': '1'
        };
        /* istanbul ignore next */
        cov_1u87geis0x().s[250]++;
        break;
    }
    /* istanbul ignore next */
    cov_1u87geis0x().s[251]++;
    return settings;
  }
  // Export OCR results to various formats
  exportResults(results, format =
  /* istanbul ignore next */
  (cov_1u87geis0x().b[47][0]++, 'txt')) {
    /* istanbul ignore next */
    cov_1u87geis0x().f[34]++;
    cov_1u87geis0x().s[252]++;
    switch (format) {
      case 'txt':
        /* istanbul ignore next */
        cov_1u87geis0x().b[48][0]++;
        cov_1u87geis0x().s[253]++;
        return results.map(r => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[35]++;
          cov_1u87geis0x().s[254]++;
          return `Page ${r.pageNumber}:\n${r.text}`;
        }).join('\n\n');
      case 'json':
        /* istanbul ignore next */
        cov_1u87geis0x().b[48][1]++;
        cov_1u87geis0x().s[255]++;
        return JSON.stringify(results, null, 2);
      case 'xml':
        /* istanbul ignore next */
        cov_1u87geis0x().b[48][2]++;
        let xml =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[256]++, '<?xml version="1.0" encoding="UTF-8"?>\n<ocr-results>\n');
        /* istanbul ignore next */
        cov_1u87geis0x().s[257]++;
        results.forEach(result => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[36]++;
          cov_1u87geis0x().s[258]++;
          xml += `  <page number="${result.pageNumber}" confidence="${result.confidence}" language="${result.language}">\n`;
          /* istanbul ignore next */
          cov_1u87geis0x().s[259]++;
          xml += `    <text><![CDATA[${result.text}]]></text>\n`;
          /* istanbul ignore next */
          cov_1u87geis0x().s[260]++;
          if (result.blocks.length > 0) {
            /* istanbul ignore next */
            cov_1u87geis0x().b[49][0]++;
            cov_1u87geis0x().s[261]++;
            xml += '    <blocks>\n';
            /* istanbul ignore next */
            cov_1u87geis0x().s[262]++;
            result.blocks.forEach(block => {
              /* istanbul ignore next */
              cov_1u87geis0x().f[37]++;
              cov_1u87geis0x().s[263]++;
              xml += `      <block confidence="${block.confidence}">\n`;
              /* istanbul ignore next */
              cov_1u87geis0x().s[264]++;
              xml += `        <text><![CDATA[${block.text}]]></text>\n`;
              /* istanbul ignore next */
              cov_1u87geis0x().s[265]++;
              xml += `        <bbox x0="${block.bbox.x0}" y0="${block.bbox.y0}" x1="${block.bbox.x1}" y1="${block.bbox.y1}"/>\n`;
              /* istanbul ignore next */
              cov_1u87geis0x().s[266]++;
              xml += '      </block>\n';
            });
            /* istanbul ignore next */
            cov_1u87geis0x().s[267]++;
            xml += '    </blocks>\n';
          } else
          /* istanbul ignore next */
          {
            cov_1u87geis0x().b[49][1]++;
          }
          cov_1u87geis0x().s[268]++;
          xml += `  </page>\n`;
        });
        /* istanbul ignore next */
        cov_1u87geis0x().s[269]++;
        xml += '</ocr-results>';
        /* istanbul ignore next */
        cov_1u87geis0x().s[270]++;
        return xml;
      case 'csv':
        /* istanbul ignore next */
        cov_1u87geis0x().b[48][3]++;
        let csv =
        /* istanbul ignore next */
        (cov_1u87geis0x().s[271]++, 'Page,Confidence,Language,Text\n');
        /* istanbul ignore next */
        cov_1u87geis0x().s[272]++;
        results.forEach(result => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[38]++;
          const text =
          /* istanbul ignore next */
          (cov_1u87geis0x().s[273]++, result.text.replace(/"/g, '""').replace(/\n/g, ' '));
          /* istanbul ignore next */
          cov_1u87geis0x().s[274]++;
          csv += `"${result.pageNumber}","${result.confidence}","${result.language}","${text}"\n`;
        });
        /* istanbul ignore next */
        cov_1u87geis0x().s[275]++;
        return csv;
      default:
        /* istanbul ignore next */
        cov_1u87geis0x().b[48][4]++;
        cov_1u87geis0x().s[276]++;
        return results.map(r => {
          /* istanbul ignore next */
          cov_1u87geis0x().f[39]++;
          cov_1u87geis0x().s[277]++;
          return r.text;
        }).join('\n');
    }
  }
}
/* istanbul ignore next */
cov_1u87geis0x().s[278]++;
exports.OCRService = OCRService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,