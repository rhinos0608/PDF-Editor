6a66cb475f449ba50b606e46b396edf2
/**
 * Simple test to verify security fixes
 */

const {
  isValidPath,
  sanitizePath,
  isValidArrayBuffer
} = require('../../src/utils/validation');
console.log('Testing security validation functions...');

// Test path validation
console.log('\n--- Path Validation Tests ---');
const validPaths = ['document.pdf', 'C:\\Users\\test\\document.pdf', '/home/user/document.pdf'];
const invalidPaths = ['../etc/passwd', '..\\windows\\system32\\config\\sam', 'document.exe', 'document.bat'];
validPaths.forEach(path => {
  try {
    const result = isValidPath(path);
    console.log(`isValidPath('${path}') = ${result} ${result ? '✓' : '✗'}`);
  } catch (error) {
    console.error(`Error testing isValidPath('${path}'):`, error.message);
  }
});
invalidPaths.forEach(path => {
  try {
    const result = isValidPath(path);
    console.log(`isValidPath('${path}') = ${result} ${!result ? '✓' : '✗'}`);
  } catch (error) {
    console.error(`Error testing isValidPath('${path}'):`, error.message);
  }
});

// Test path sanitization
console.log('\n--- Path Sanitization Tests ---');
const dirtyPaths = ['document<pdf', 'document; rm -rf /', 'document.pdf\u0000', 'document.pdf<script>alert(1)</script>'];
dirtyPaths.forEach(path => {
  try {
    const sanitized = sanitizePath(path);
    console.log(`sanitizePath('${path}') = '${sanitized}'`);
  } catch (error) {
    console.error(`Error sanitizing path '${path}':`, error.message);
  }
});

// Test ArrayBuffer validation
console.log('\n--- ArrayBuffer Validation Tests ---');
try {
  const validBuffer = new ArrayBuffer(1024 * 1024); // 1MB
  const invalidBuffer = new ArrayBuffer(101 * 1024 * 1024); // 101MB (too large)
  const emptyBuffer = new ArrayBuffer(0); // Empty

  const validResult = isValidArrayBuffer(validBuffer);
  console.log(`isValidArrayBuffer(1MB buffer) = ${validResult} ${validResult ? '✓' : '✗'}`);
  const invalidResult = isValidArrayBuffer(invalidBuffer);
  console.log(`isValidArrayBuffer(101MB buffer) = ${invalidResult} ${!invalidResult ? '✓' : '✗'}`);
  const emptyResult = isValidArrayBuffer(emptyBuffer);
  console.log(`isValidArrayBuffer(empty buffer) = ${emptyResult} ${!emptyResult ? '✓' : '✗'}`);
} catch (error) {
  console.error('Error in ArrayBuffer validation tests:', error.message);
}
console.log('\nSecurity validation tests completed.');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1ZhbGlkUGF0aCIsInNhbml0aXplUGF0aCIsImlzVmFsaWRBcnJheUJ1ZmZlciIsInJlcXVpcmUiLCJjb25zb2xlIiwibG9nIiwidmFsaWRQYXRocyIsImludmFsaWRQYXRocyIsImZvckVhY2giLCJwYXRoIiwicmVzdWx0IiwiZXJyb3IiLCJtZXNzYWdlIiwiZGlydHlQYXRocyIsInNhbml0aXplZCIsInZhbGlkQnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJpbnZhbGlkQnVmZmVyIiwiZW1wdHlCdWZmZXIiLCJ2YWxpZFJlc3VsdCIsImludmFsaWRSZXN1bHQiLCJlbXB0eVJlc3VsdCJdLCJzb3VyY2VzIjpbInZhbGlkYXRpb24udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNpbXBsZSB0ZXN0IHRvIHZlcmlmeSBzZWN1cml0eSBmaXhlc1xuICovXG5cbmNvbnN0IHsgaXNWYWxpZFBhdGgsIHNhbml0aXplUGF0aCwgaXNWYWxpZEFycmF5QnVmZmVyIH0gPSByZXF1aXJlKCcuLi8uLi9zcmMvdXRpbHMvdmFsaWRhdGlvbicpO1xuXG5jb25zb2xlLmxvZygnVGVzdGluZyBzZWN1cml0eSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4uLicpO1xuXG4vLyBUZXN0IHBhdGggdmFsaWRhdGlvblxuY29uc29sZS5sb2coJ1xcbi0tLSBQYXRoIFZhbGlkYXRpb24gVGVzdHMgLS0tJyk7XG5jb25zdCB2YWxpZFBhdGhzID0gW1xuICAnZG9jdW1lbnQucGRmJyxcbiAgJ0M6XFxcXFVzZXJzXFxcXHRlc3RcXFxcZG9jdW1lbnQucGRmJyxcbiAgJy9ob21lL3VzZXIvZG9jdW1lbnQucGRmJ1xuXTtcblxuY29uc3QgaW52YWxpZFBhdGhzID0gW1xuICAnLi4vZXRjL3Bhc3N3ZCcsXG4gICcuLlxcXFx3aW5kb3dzXFxcXHN5c3RlbTMyXFxcXGNvbmZpZ1xcXFxzYW0nLFxuICAnZG9jdW1lbnQuZXhlJyxcbiAgJ2RvY3VtZW50LmJhdCdcbl07XG5cbnZhbGlkUGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBpc1ZhbGlkUGF0aChwYXRoKTtcbiAgICBjb25zb2xlLmxvZyhgaXNWYWxpZFBhdGgoJyR7cGF0aH0nKSA9ICR7cmVzdWx0fSAke3Jlc3VsdCA/ICfinJMnIDogJ+Kclyd9YCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgdGVzdGluZyBpc1ZhbGlkUGF0aCgnJHtwYXRofScpOmAsIGVycm9yLm1lc3NhZ2UpO1xuICB9XG59KTtcblxuaW52YWxpZFBhdGhzLmZvckVhY2gocGF0aCA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzdWx0ID0gaXNWYWxpZFBhdGgocGF0aCk7XG4gICAgY29uc29sZS5sb2coYGlzVmFsaWRQYXRoKCcke3BhdGh9JykgPSAke3Jlc3VsdH0gJHshcmVzdWx0ID8gJ+KckycgOiAn4pyXJ31gKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciB0ZXN0aW5nIGlzVmFsaWRQYXRoKCcke3BhdGh9Jyk6YCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cbn0pO1xuXG4vLyBUZXN0IHBhdGggc2FuaXRpemF0aW9uXG5jb25zb2xlLmxvZygnXFxuLS0tIFBhdGggU2FuaXRpemF0aW9uIFRlc3RzIC0tLScpO1xuY29uc3QgZGlydHlQYXRocyA9IFtcbiAgJ2RvY3VtZW50PHBkZicsXG4gICdkb2N1bWVudDsgcm0gLXJmIC8nLFxuICAnZG9jdW1lbnQucGRmXFx1MDAwMCcsXG4gICdkb2N1bWVudC5wZGY8c2NyaXB0PmFsZXJ0KDEpPC9zY3JpcHQ+J1xuXTtcblxuZGlydHlQYXRocy5mb3JFYWNoKHBhdGggPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHNhbml0aXplZCA9IHNhbml0aXplUGF0aChwYXRoKTtcbiAgICBjb25zb2xlLmxvZyhgc2FuaXRpemVQYXRoKCcke3BhdGh9JykgPSAnJHtzYW5pdGl6ZWR9J2ApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHNhbml0aXppbmcgcGF0aCAnJHtwYXRofSc6YCwgZXJyb3IubWVzc2FnZSk7XG4gIH1cbn0pO1xuXG4vLyBUZXN0IEFycmF5QnVmZmVyIHZhbGlkYXRpb25cbmNvbnNvbGUubG9nKCdcXG4tLS0gQXJyYXlCdWZmZXIgVmFsaWRhdGlvbiBUZXN0cyAtLS0nKTtcbnRyeSB7XG4gIGNvbnN0IHZhbGlkQnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDEwMjQgKiAxMDI0KTsgLy8gMU1CXG4gIGNvbnN0IGludmFsaWRCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoMTAxICogMTAyNCAqIDEwMjQpOyAvLyAxMDFNQiAodG9vIGxhcmdlKVxuICBjb25zdCBlbXB0eUJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigwKTsgLy8gRW1wdHlcblxuICBjb25zdCB2YWxpZFJlc3VsdCA9IGlzVmFsaWRBcnJheUJ1ZmZlcih2YWxpZEJ1ZmZlcik7XG4gIGNvbnNvbGUubG9nKGBpc1ZhbGlkQXJyYXlCdWZmZXIoMU1CIGJ1ZmZlcikgPSAke3ZhbGlkUmVzdWx0fSAke3ZhbGlkUmVzdWx0ID8gJ+KckycgOiAn4pyXJ31gKTtcblxuICBjb25zdCBpbnZhbGlkUmVzdWx0ID0gaXNWYWxpZEFycmF5QnVmZmVyKGludmFsaWRCdWZmZXIpO1xuICBjb25zb2xlLmxvZyhgaXNWYWxpZEFycmF5QnVmZmVyKDEwMU1CIGJ1ZmZlcikgPSAke2ludmFsaWRSZXN1bHR9ICR7IWludmFsaWRSZXN1bHQgPyAn4pyTJyA6ICfinJcnfWApO1xuXG4gIGNvbnN0IGVtcHR5UmVzdWx0ID0gaXNWYWxpZEFycmF5QnVmZmVyKGVtcHR5QnVmZmVyKTtcbiAgY29uc29sZS5sb2coYGlzVmFsaWRBcnJheUJ1ZmZlcihlbXB0eSBidWZmZXIpID0gJHtlbXB0eVJlc3VsdH0gJHshZW1wdHlSZXN1bHQgPyAn4pyTJyA6ICfinJcnfWApO1xufSBjYXRjaCAoZXJyb3IpIHtcbiAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gQXJyYXlCdWZmZXIgdmFsaWRhdGlvbiB0ZXN0czonLCBlcnJvci5tZXNzYWdlKTtcbn1cblxuY29uc29sZS5sb2coJ1xcblNlY3VyaXR5IHZhbGlkYXRpb24gdGVzdHMgY29tcGxldGVkLicpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTTtFQUFFQSxXQUFXO0VBQUVDLFlBQVk7RUFBRUM7QUFBbUIsQ0FBQyxHQUFHQyxPQUFPLENBQUMsNEJBQTRCLENBQUM7QUFFL0ZDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDBDQUEwQyxDQUFDOztBQUV2RDtBQUNBRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQztBQUM5QyxNQUFNQyxVQUFVLEdBQUcsQ0FDakIsY0FBYyxFQUNkLCtCQUErQixFQUMvQix5QkFBeUIsQ0FDMUI7QUFFRCxNQUFNQyxZQUFZLEdBQUcsQ0FDbkIsZUFBZSxFQUNmLG9DQUFvQyxFQUNwQyxjQUFjLEVBQ2QsY0FBYyxDQUNmO0FBRURELFVBQVUsQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLElBQUk7RUFDekIsSUFBSTtJQUNGLE1BQU1DLE1BQU0sR0FBR1YsV0FBVyxDQUFDUyxJQUFJLENBQUM7SUFDaENMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGdCQUFnQkksSUFBSSxRQUFRQyxNQUFNLElBQUlBLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7RUFDekUsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkUCxPQUFPLENBQUNPLEtBQUssQ0FBQyw4QkFBOEJGLElBQUksS0FBSyxFQUFFRSxLQUFLLENBQUNDLE9BQU8sQ0FBQztFQUN2RTtBQUNGLENBQUMsQ0FBQztBQUVGTCxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxJQUFJO0VBQzNCLElBQUk7SUFDRixNQUFNQyxNQUFNLEdBQUdWLFdBQVcsQ0FBQ1MsSUFBSSxDQUFDO0lBQ2hDTCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxnQkFBZ0JJLElBQUksUUFBUUMsTUFBTSxJQUFJLENBQUNBLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7RUFDMUUsQ0FBQyxDQUFDLE9BQU9DLEtBQUssRUFBRTtJQUNkUCxPQUFPLENBQUNPLEtBQUssQ0FBQyw4QkFBOEJGLElBQUksS0FBSyxFQUFFRSxLQUFLLENBQUNDLE9BQU8sQ0FBQztFQUN2RTtBQUNGLENBQUMsQ0FBQzs7QUFFRjtBQUNBUixPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQztBQUNoRCxNQUFNUSxVQUFVLEdBQUcsQ0FDakIsY0FBYyxFQUNkLG9CQUFvQixFQUNwQixvQkFBb0IsRUFDcEIsdUNBQXVDLENBQ3hDO0FBRURBLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDQyxJQUFJLElBQUk7RUFDekIsSUFBSTtJQUNGLE1BQU1LLFNBQVMsR0FBR2IsWUFBWSxDQUFDUSxJQUFJLENBQUM7SUFDcENMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQkksSUFBSSxTQUFTSyxTQUFTLEdBQUcsQ0FBQztFQUN6RCxDQUFDLENBQUMsT0FBT0gsS0FBSyxFQUFFO0lBQ2RQLE9BQU8sQ0FBQ08sS0FBSyxDQUFDLDBCQUEwQkYsSUFBSSxJQUFJLEVBQUVFLEtBQUssQ0FBQ0MsT0FBTyxDQUFDO0VBQ2xFO0FBQ0YsQ0FBQyxDQUFDOztBQUVGO0FBQ0FSLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHdDQUF3QyxDQUFDO0FBQ3JELElBQUk7RUFDRixNQUFNVSxXQUFXLEdBQUcsSUFBSUMsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ2xELE1BQU1DLGFBQWEsR0FBRyxJQUFJRCxXQUFXLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBQzFELE1BQU1FLFdBQVcsR0FBRyxJQUFJRixXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7RUFFeEMsTUFBTUcsV0FBVyxHQUFHakIsa0JBQWtCLENBQUNhLFdBQVcsQ0FBQztFQUNuRFgsT0FBTyxDQUFDQyxHQUFHLENBQUMsb0NBQW9DYyxXQUFXLElBQUlBLFdBQVcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7RUFFekYsTUFBTUMsYUFBYSxHQUFHbEIsa0JBQWtCLENBQUNlLGFBQWEsQ0FBQztFQUN2RGIsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0NBQXNDZSxhQUFhLElBQUksQ0FBQ0EsYUFBYSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQztFQUVoRyxNQUFNQyxXQUFXLEdBQUduQixrQkFBa0IsQ0FBQ2dCLFdBQVcsQ0FBQztFQUNuRGQsT0FBTyxDQUFDQyxHQUFHLENBQUMsc0NBQXNDZ0IsV0FBVyxJQUFJLENBQUNBLFdBQVcsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFDOUYsQ0FBQyxDQUFDLE9BQU9WLEtBQUssRUFBRTtFQUNkUCxPQUFPLENBQUNPLEtBQUssQ0FBQyx3Q0FBd0MsRUFBRUEsS0FBSyxDQUFDQyxPQUFPLENBQUM7QUFDeEU7QUFFQVIsT0FBTyxDQUFDQyxHQUFHLENBQUMsd0NBQXdDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=