3e605f57d12e9c94d0d13f9f688c6137
/**
 * Security Validation Tests
 * Tests input validation and security measures
 */

describe('Security Validation', () => {
  describe('Input Validation', () => {
    // Test the validation functions from main.js
    const mockValidateSender = event => {
      if (!event.sender) throw new Error('No sender');
      // Simulate validation logic
      return true;
    };
    const mockValidateFilePath = filePath => {
      if (!filePath || typeof filePath !== 'string') {
        throw new Error('Invalid file path');
      }
      if (filePath.length > 260) {
        throw new Error('File path too long');
      }
      if (filePath.includes('..') || filePath.includes('~')) {
        throw new Error('Invalid file path - path traversal detected');
      }
      return filePath;
    };
    const mockValidateFileData = data => {
      if (!data) {
        throw new Error('No file data provided');
      }
      if (data.byteLength > 100 * 1024 * 1024) {
        throw new Error('File too large (max 100MB)');
      }
      return data;
    };
    describe('Sender Validation', () => {
      it('should reject invalid sender', () => {
        expect(() => mockValidateSender({})).toThrow('No sender');
        expect(() => mockValidateSender(null)).toThrow('No sender');
        expect(() => mockValidateSender(undefined)).toThrow('No sender');
      });
      it('should accept valid sender', () => {
        const validEvent = {
          sender: {
            isDestroyed: () => false
          }
        };
        expect(() => mockValidateSender(validEvent)).not.toThrow();
      });
    });
    describe('File Path Validation', () => {
      it('should reject path traversal attempts', () => {
        expect(() => mockValidateFilePath('../../../etc/passwd')).toThrow('path traversal');
        expect(() => mockValidateFilePath('..\\windows\\system32')).toThrow('path traversal');
        expect(() => mockValidateFilePath('~/.ssh/id_rsa')).toThrow('path traversal');
        expect(() => mockValidateFilePath('file../../other.txt')).toThrow('path traversal');
      });
      it('should reject invalid inputs', () => {
        expect(() => mockValidateFilePath('')).toThrow('Invalid file path');
        expect(() => mockValidateFilePath(null)).toThrow('Invalid file path');
        expect(() => mockValidateFilePath(123)).toThrow('Invalid file path');
        expect(() => mockValidateFilePath({})).toThrow('Invalid file path');
      });
      it('should reject oversized paths', () => {
        const longPath = 'a'.repeat(300);
        expect(() => mockValidateFilePath(longPath)).toThrow('File path too long');
      });
      it('should accept valid file paths', () => {
        expect(() => mockValidateFilePath('C:\\Documents\\file.pdf')).not.toThrow();
        expect(() => mockValidateFilePath('/home/user/document.pdf')).not.toThrow();
        expect(() => mockValidateFilePath('document.pdf')).not.toThrow();
      });
    });
    describe('File Data Validation', () => {
      it('should reject missing data', () => {
        expect(() => mockValidateFileData(null)).toThrow('No file data provided');
        expect(() => mockValidateFileData(undefined)).toThrow('No file data provided');
        expect(() => mockValidateFileData('')).toThrow('No file data provided');
      });
      it('should reject oversized files', () => {
        const largeData = {
          byteLength: 200 * 1024 * 1024
        }; // 200MB
        expect(() => mockValidateFileData(largeData)).toThrow('File too large');
      });
      it('should accept valid file data', () => {
        const validData = {
          byteLength: 1024
        }; // 1KB
        expect(() => mockValidateFileData(validData)).not.toThrow();
        const mediumData = {
          byteLength: 50 * 1024 * 1024
        }; // 50MB
        expect(() => mockValidateFileData(mediumData)).not.toThrow();
      });
    });
    describe('Filename Sanitization', () => {
      const sanitizeFilename = filename => {
        if (!filename || typeof filename !== 'string') {
          return 'document.pdf';
        }
        let sanitized = filename.replace(/[<>:"/\\|?*]/g, '_').substring(0, 100);
        if (!sanitized.endsWith('.pdf')) {
          sanitized += '.pdf';
        }
        return sanitized;
      };
      it('should remove dangerous characters', () => {
        expect(sanitizeFilename('file<>:"/\\|?*.pdf')).toBe('file_________.pdf');
        expect(sanitizeFilename('con.pdf')).toBe('con.pdf');
        expect(sanitizeFilename('NUL')).toBe('NUL.pdf');
      });
      it('should handle long filenames', () => {
        const longName = 'a'.repeat(200) + '.pdf';
        const result = sanitizeFilename(longName);
        expect(result.length).toBeLessThanOrEqual(104); // 100 chars + '.pdf'
        expect(result.endsWith('.pdf')).toBe(true);
      });
      it('should add PDF extension if missing', () => {
        expect(sanitizeFilename('document')).toBe('document.pdf');
        expect(sanitizeFilename('file.txt')).toBe('file.txt.pdf');
      });
      it('should handle edge cases', () => {
        expect(sanitizeFilename('')).toBe('document.pdf');
        expect(sanitizeFilename(null)).toBe('document.pdf');
        expect(sanitizeFilename(undefined)).toBe('document.pdf');
      });
    });
  });
  describe('XSS Prevention', () => {
    const sanitizeHTML = input => {
      if (typeof input !== 'string') return '';
      return input.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
    };
    it('should escape HTML characters', () => {
      const malicious = '<script>alert("xss")</script>';
      const sanitized = sanitizeHTML(malicious);
      expect(sanitized).not.toContain('<script>');
      expect(sanitized).toContain('&lt;script&gt;');
    });
    it('should handle quotes and slashes', () => {
      const input = `"';/`;
      const result = sanitizeHTML(input);
      expect(result).toBe('&quot;&#x27;;&#x2F;');
    });
    it('should handle non-string inputs', () => {
      expect(sanitizeHTML(null)).toBe('');
      expect(sanitizeHTML(undefined)).toBe('');
      expect(sanitizeHTML(123)).toBe('');
    });
  });
  describe('Rate Limiting', () => {
    class RateLimiter {
      constructor() {
        this.attempts = new Map();
        this.maxAttempts = 5;
        this.windowMs = 60000; // 1 minute
      }
      isRateLimited(identifier) {
        const now = Date.now();
        const attempts = this.attempts.get(identifier) || [];

        // Remove old attempts outside the window
        const recentAttempts = attempts.filter(time => now - time < this.windowMs);

        // Update the attempts array
        this.attempts.set(identifier, recentAttempts);
        return recentAttempts.length >= this.maxAttempts;
      }
      recordAttempt(identifier) {
        const attempts = this.attempts.get(identifier) || [];
        attempts.push(Date.now());
        this.attempts.set(identifier, attempts);
      }
    }
    it('should allow requests under the limit', () => {
      const limiter = new RateLimiter();
      const id = 'test-user';
      for (let i = 0; i < 4; i++) {
        expect(limiter.isRateLimited(id)).toBe(false);
        limiter.recordAttempt(id);
      }
    });
    it('should block requests over the limit', () => {
      const limiter = new RateLimiter();
      const id = 'test-user';

      // Make 5 attempts (at the limit)
      for (let i = 0; i < 5; i++) {
        limiter.recordAttempt(id);
      }
      expect(limiter.isRateLimited(id)).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,