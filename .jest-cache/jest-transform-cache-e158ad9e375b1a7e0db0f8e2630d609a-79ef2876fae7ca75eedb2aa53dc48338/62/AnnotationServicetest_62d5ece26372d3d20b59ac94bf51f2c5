f8d074765d3dc130a4648031539a1072
// Mock pdf-lib
_getJestObj().mock('pdf-lib', () => ({
  PDFDocument: {
    load: jest.fn()
  },
  rgb: jest.fn(),
  StandardFonts: {
    Helvetica: 'Helvetica',
    HelveticaBold: 'HelveticaBold'
  },
  degrees: jest.fn()
}));

// Mock uuid
_getJestObj().mock('uuid', () => ({
  v4: jest.fn(() => 'mock-uuid')
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
import { AnnotationService } from '../../src/renderer/services/AnnotationService';
describe('AnnotationService', () => {
  let annotationService;
  beforeEach(() => {
    annotationService = new AnnotationService();
    jest.clearAllMocks();
  });
  describe('createAnnotation', () => {
    it('should create a new annotation with default properties', () => {
      const annotation = annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Test annotation'
      });
      expect(annotation).toEqual({
        id: 'mock-uuid',
        type: 'text',
        pageIndex: 0,
        x: 100,
        y: 200,
        text: 'Test annotation',
        createdAt: expect.any(Date),
        modifiedAt: expect.any(Date)
      });
    });
    it('should store the annotation', () => {
      const annotation = annotationService.createAnnotation('highlight', 1, 50, 75);
      const stored = annotationService.getAllAnnotations();
      expect(stored).toHaveLength(1);
      expect(stored[0]).toEqual(annotation);
    });
  });
  describe('getPageAnnotations', () => {
    it('should return annotations for a specific page', () => {
      annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Page 0 annotation'
      });
      annotationService.createAnnotation('highlight', 1, 50, 75);
      annotationService.createAnnotation('text', 0, 150, 250, {
        text: 'Another page 0 annotation'
      });
      const page0Annotations = annotationService.getPageAnnotations(0);
      const page1Annotations = annotationService.getPageAnnotations(1);
      expect(page0Annotations).toHaveLength(2);
      expect(page1Annotations).toHaveLength(1);
      expect(page0Annotations[0].text).toBe('Page 0 annotation');
      expect(page0Annotations[1].text).toBe('Another page 0 annotation');
      expect(page1Annotations[0].type).toBe('highlight');
    });
    it('should not return hidden annotations', () => {
      annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Visible annotation'
      });
      const hiddenAnnotation = annotationService.createAnnotation('highlight', 0, 50, 75);
      annotationService.updateAnnotation(hiddenAnnotation.id, {
        isHidden: true
      });
      const annotations = annotationService.getPageAnnotations(0);
      expect(annotations).toHaveLength(1);
      expect(annotations[0].text).toBe('Visible annotation');
    });
  });
  describe('updateAnnotation', () => {
    it('should update an existing annotation', () => {
      const annotation = annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Original text'
      });
      const updated = annotationService.updateAnnotation(annotation.id, {
        text: 'Updated text',
        x: 150
      });
      expect(updated).toEqual({
        ...annotation,
        text: 'Updated text',
        x: 150,
        modifiedAt: expect.any(Date)
      });
      const stored = annotationService.getAllAnnotations()[0];
      expect(stored.text).toBe('Updated text');
      expect(stored.x).toBe(150);
    });
    it('should not update a locked annotation', () => {
      const annotation = annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Locked annotation'
      });
      annotationService.updateAnnotation(annotation.id, {
        isLocked: true
      });
      const updated = annotationService.updateAnnotation(annotation.id, {
        text: 'Should not update'
      });
      expect(updated).toBeNull();
      expect(annotationService.getAllAnnotations()[0].text).toBe('Original text');
    });
    it('should return null for non-existent annotation', () => {
      const updated = annotationService.updateAnnotation('non-existent-id', {
        text: 'New text'
      });
      expect(updated).toBeNull();
    });
  });
  describe('deleteAnnotation', () => {
    it('should delete an existing annotation', () => {
      const annotation = annotationService.createAnnotation('text', 0, 100, 200);
      const deleted = annotationService.deleteAnnotation(annotation.id);
      expect(deleted).toBe(true);
      expect(annotationService.getAllAnnotations()).toHaveLength(0);
    });
    it('should not delete a locked annotation', () => {
      const annotation = annotationService.createAnnotation('text', 0, 100, 200);
      annotationService.updateAnnotation(annotation.id, {
        isLocked: true
      });
      const deleted = annotationService.deleteAnnotation(annotation.id);
      expect(deleted).toBe(false);
      expect(annotationService.getAllAnnotations()).toHaveLength(1);
    });
    it('should return false for non-existent annotation', () => {
      const deleted = annotationService.deleteAnnotation('non-existent-id');
      expect(deleted).toBe(false);
    });
  });
  describe('searchAnnotations', () => {
    it('should find annotations containing the search query', () => {
      annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'This is a test annotation'
      });
      annotationService.createAnnotation('note', 1, 50, 75, {
        text: 'Another annotation'
      });
      annotationService.createAnnotation('highlight', 0, 25, 30);
      const results = annotationService.searchAnnotations('test');
      expect(results).toHaveLength(1);
      expect(results[0].text).toBe('This is a test annotation');
    });
    it('should search in annotation replies', () => {
      const annotation = annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Original text'
      });
      annotationService.addReply(annotation.id, 'This is a reply with test content', 'Author');
      const results = annotationService.searchAnnotations('test');
      expect(results).toHaveLength(1);
      expect(results[0].text).toBe('Original text');
    });
  });
  describe('getStatistics', () => {
    it('should return annotation statistics', () => {
      annotationService.createAnnotation('text', 0, 100, 200, {
        text: 'Text annotation'
      });
      annotationService.createAnnotation('highlight', 0, 50, 75);
      annotationService.createAnnotation('text', 1, 150, 250, {
        text: 'Another text annotation'
      });
      annotationService.createAnnotation('highlight', 1, 25, 30);
      const stats = annotationService.getStatistics();
      expect(stats).toEqual({
        total: 4,
        byType: {
          text: 2,
          highlight: 2
        },
        byPage: {
          0: 2,
          1: 2
        }
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJQREZEb2N1bWVudCIsImxvYWQiLCJqZXN0IiwiZm4iLCJyZ2IiLCJTdGFuZGFyZEZvbnRzIiwiSGVsdmV0aWNhIiwiSGVsdmV0aWNhQm9sZCIsImRlZ3JlZXMiLCJ2NCIsInJlcXVpcmUiLCJBbm5vdGF0aW9uU2VydmljZSIsImRlc2NyaWJlIiwiYW5ub3RhdGlvblNlcnZpY2UiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwiYW5ub3RhdGlvbiIsImNyZWF0ZUFubm90YXRpb24iLCJ0ZXh0IiwiZXhwZWN0IiwidG9FcXVhbCIsImlkIiwidHlwZSIsInBhZ2VJbmRleCIsIngiLCJ5IiwiY3JlYXRlZEF0IiwiYW55IiwiRGF0ZSIsIm1vZGlmaWVkQXQiLCJzdG9yZWQiLCJnZXRBbGxBbm5vdGF0aW9ucyIsInRvSGF2ZUxlbmd0aCIsInBhZ2UwQW5ub3RhdGlvbnMiLCJnZXRQYWdlQW5ub3RhdGlvbnMiLCJwYWdlMUFubm90YXRpb25zIiwidG9CZSIsImhpZGRlbkFubm90YXRpb24iLCJ1cGRhdGVBbm5vdGF0aW9uIiwiaXNIaWRkZW4iLCJhbm5vdGF0aW9ucyIsInVwZGF0ZWQiLCJpc0xvY2tlZCIsInRvQmVOdWxsIiwiZGVsZXRlZCIsImRlbGV0ZUFubm90YXRpb24iLCJyZXN1bHRzIiwic2VhcmNoQW5ub3RhdGlvbnMiLCJhZGRSZXBseSIsInN0YXRzIiwiZ2V0U3RhdGlzdGljcyIsInRvdGFsIiwiYnlUeXBlIiwiaGlnaGxpZ2h0IiwiYnlQYWdlIl0sInNvdXJjZXMiOlsiQW5ub3RhdGlvblNlcnZpY2UudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbm5vdGF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NyYy9yZW5kZXJlci9zZXJ2aWNlcy9Bbm5vdGF0aW9uU2VydmljZSc7XG5cbi8vIE1vY2sgcGRmLWxpYlxuamVzdC5tb2NrKCdwZGYtbGliJywgKCkgPT4gKHtcbiAgUERGRG9jdW1lbnQ6IHtcbiAgICBsb2FkOiBqZXN0LmZuKClcbiAgfSxcbiAgcmdiOiBqZXN0LmZuKCksXG4gIFN0YW5kYXJkRm9udHM6IHtcbiAgICBIZWx2ZXRpY2E6ICdIZWx2ZXRpY2EnLFxuICAgIEhlbHZldGljYUJvbGQ6ICdIZWx2ZXRpY2FCb2xkJ1xuICB9LFxuICBkZWdyZWVzOiBqZXN0LmZuKClcbn0pKTtcblxuLy8gTW9jayB1dWlkXG5qZXN0Lm1vY2soJ3V1aWQnLCAoKSA9PiAoe1xuICB2NDogamVzdC5mbigoKSA9PiAnbW9jay11dWlkJylcbn0pKTtcblxuZGVzY3JpYmUoJ0Fubm90YXRpb25TZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgYW5ub3RhdGlvblNlcnZpY2U7XG4gIFxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBhbm5vdGF0aW9uU2VydmljZSA9IG5ldyBBbm5vdGF0aW9uU2VydmljZSgpO1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlQW5ub3RhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIG5ldyBhbm5vdGF0aW9uIHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYW5ub3RhdGlvbiA9IGFubm90YXRpb25TZXJ2aWNlLmNyZWF0ZUFubm90YXRpb24oJ3RleHQnLCAwLCAxMDAsIDIwMCwge1xuICAgICAgICB0ZXh0OiAnVGVzdCBhbm5vdGF0aW9uJ1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChhbm5vdGF0aW9uKS50b0VxdWFsKHtcbiAgICAgICAgaWQ6ICdtb2NrLXV1aWQnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIHBhZ2VJbmRleDogMCxcbiAgICAgICAgeDogMTAwLFxuICAgICAgICB5OiAyMDAsXG4gICAgICAgIHRleHQ6ICdUZXN0IGFubm90YXRpb24nLFxuICAgICAgICBjcmVhdGVkQXQ6IGV4cGVjdC5hbnkoRGF0ZSksXG4gICAgICAgIG1vZGlmaWVkQXQ6IGV4cGVjdC5hbnkoRGF0ZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzdG9yZSB0aGUgYW5ub3RhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGFubm90YXRpb24gPSBhbm5vdGF0aW9uU2VydmljZS5jcmVhdGVBbm5vdGF0aW9uKCdoaWdobGlnaHQnLCAxLCA1MCwgNzUpO1xuICAgICAgY29uc3Qgc3RvcmVkID0gYW5ub3RhdGlvblNlcnZpY2UuZ2V0QWxsQW5ub3RhdGlvbnMoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHN0b3JlZCkudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHN0b3JlZFswXSkudG9FcXVhbChhbm5vdGF0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFBhZ2VBbm5vdGF0aW9ucycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbm5vdGF0aW9ucyBmb3IgYSBzcGVjaWZpYyBwYWdlJywgKCkgPT4ge1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbigndGV4dCcsIDAsIDEwMCwgMjAwLCB7IHRleHQ6ICdQYWdlIDAgYW5ub3RhdGlvbicgfSk7XG4gICAgICBhbm5vdGF0aW9uU2VydmljZS5jcmVhdGVBbm5vdGF0aW9uKCdoaWdobGlnaHQnLCAxLCA1MCwgNzUpO1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbigndGV4dCcsIDAsIDE1MCwgMjUwLCB7IHRleHQ6ICdBbm90aGVyIHBhZ2UgMCBhbm5vdGF0aW9uJyB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgcGFnZTBBbm5vdGF0aW9ucyA9IGFubm90YXRpb25TZXJ2aWNlLmdldFBhZ2VBbm5vdGF0aW9ucygwKTtcbiAgICAgIGNvbnN0IHBhZ2UxQW5ub3RhdGlvbnMgPSBhbm5vdGF0aW9uU2VydmljZS5nZXRQYWdlQW5ub3RhdGlvbnMoMSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChwYWdlMEFubm90YXRpb25zKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QocGFnZTFBbm5vdGF0aW9ucykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHBhZ2UwQW5ub3RhdGlvbnNbMF0udGV4dCkudG9CZSgnUGFnZSAwIGFubm90YXRpb24nKTtcbiAgICAgIGV4cGVjdChwYWdlMEFubm90YXRpb25zWzFdLnRleHQpLnRvQmUoJ0Fub3RoZXIgcGFnZSAwIGFubm90YXRpb24nKTtcbiAgICAgIGV4cGVjdChwYWdlMUFubm90YXRpb25zWzBdLnR5cGUpLnRvQmUoJ2hpZ2hsaWdodCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgcmV0dXJuIGhpZGRlbiBhbm5vdGF0aW9ucycsICgpID0+IHtcbiAgICAgIGFubm90YXRpb25TZXJ2aWNlLmNyZWF0ZUFubm90YXRpb24oJ3RleHQnLCAwLCAxMDAsIDIwMCwgeyB0ZXh0OiAnVmlzaWJsZSBhbm5vdGF0aW9uJyB9KTtcbiAgICAgIGNvbnN0IGhpZGRlbkFubm90YXRpb24gPSBhbm5vdGF0aW9uU2VydmljZS5jcmVhdGVBbm5vdGF0aW9uKCdoaWdobGlnaHQnLCAwLCA1MCwgNzUpO1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UudXBkYXRlQW5ub3RhdGlvbihoaWRkZW5Bbm5vdGF0aW9uLmlkLCB7IGlzSGlkZGVuOiB0cnVlIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBhbm5vdGF0aW9ucyA9IGFubm90YXRpb25TZXJ2aWNlLmdldFBhZ2VBbm5vdGF0aW9ucygwKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGFubm90YXRpb25zKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QoYW5ub3RhdGlvbnNbMF0udGV4dCkudG9CZSgnVmlzaWJsZSBhbm5vdGF0aW9uJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1cGRhdGVBbm5vdGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgdXBkYXRlIGFuIGV4aXN0aW5nIGFubm90YXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBhbm5vdGF0aW9uID0gYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbigndGV4dCcsIDAsIDEwMCwgMjAwLCB7IHRleHQ6ICdPcmlnaW5hbCB0ZXh0JyB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgdXBkYXRlZCA9IGFubm90YXRpb25TZXJ2aWNlLnVwZGF0ZUFubm90YXRpb24oYW5ub3RhdGlvbi5pZCwge1xuICAgICAgICB0ZXh0OiAnVXBkYXRlZCB0ZXh0JyxcbiAgICAgICAgeDogMTUwXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHVwZGF0ZWQpLnRvRXF1YWwoe1xuICAgICAgICAuLi5hbm5vdGF0aW9uLFxuICAgICAgICB0ZXh0OiAnVXBkYXRlZCB0ZXh0JyxcbiAgICAgICAgeDogMTUwLFxuICAgICAgICBtb2RpZmllZEF0OiBleHBlY3QuYW55KERhdGUpXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RvcmVkID0gYW5ub3RhdGlvblNlcnZpY2UuZ2V0QWxsQW5ub3RhdGlvbnMoKVswXTtcbiAgICAgIGV4cGVjdChzdG9yZWQudGV4dCkudG9CZSgnVXBkYXRlZCB0ZXh0Jyk7XG4gICAgICBleHBlY3Qoc3RvcmVkLngpLnRvQmUoMTUwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHVwZGF0ZSBhIGxvY2tlZCBhbm5vdGF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgYW5ub3RhdGlvbiA9IGFubm90YXRpb25TZXJ2aWNlLmNyZWF0ZUFubm90YXRpb24oJ3RleHQnLCAwLCAxMDAsIDIwMCwgeyB0ZXh0OiAnTG9ja2VkIGFubm90YXRpb24nIH0pO1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UudXBkYXRlQW5ub3RhdGlvbihhbm5vdGF0aW9uLmlkLCB7IGlzTG9ja2VkOiB0cnVlIH0pO1xuICAgICAgXG4gICAgICBjb25zdCB1cGRhdGVkID0gYW5ub3RhdGlvblNlcnZpY2UudXBkYXRlQW5ub3RhdGlvbihhbm5vdGF0aW9uLmlkLCB7IHRleHQ6ICdTaG91bGQgbm90IHVwZGF0ZScgfSk7XG4gICAgICBcbiAgICAgIGV4cGVjdCh1cGRhdGVkKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KGFubm90YXRpb25TZXJ2aWNlLmdldEFsbEFubm90YXRpb25zKClbMF0udGV4dCkudG9CZSgnT3JpZ2luYWwgdGV4dCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gbnVsbCBmb3Igbm9uLWV4aXN0ZW50IGFubm90YXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCB1cGRhdGVkID0gYW5ub3RhdGlvblNlcnZpY2UudXBkYXRlQW5ub3RhdGlvbignbm9uLWV4aXN0ZW50LWlkJywgeyB0ZXh0OiAnTmV3IHRleHQnIH0pO1xuICAgICAgXG4gICAgICBleHBlY3QodXBkYXRlZCkudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2RlbGV0ZUFubm90YXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBkZWxldGUgYW4gZXhpc3RpbmcgYW5ub3RhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGFubm90YXRpb24gPSBhbm5vdGF0aW9uU2VydmljZS5jcmVhdGVBbm5vdGF0aW9uKCd0ZXh0JywgMCwgMTAwLCAyMDApO1xuICAgICAgXG4gICAgICBjb25zdCBkZWxldGVkID0gYW5ub3RhdGlvblNlcnZpY2UuZGVsZXRlQW5ub3RhdGlvbihhbm5vdGF0aW9uLmlkKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGRlbGV0ZWQpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoYW5ub3RhdGlvblNlcnZpY2UuZ2V0QWxsQW5ub3RhdGlvbnMoKSkudG9IYXZlTGVuZ3RoKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgZGVsZXRlIGEgbG9ja2VkIGFubm90YXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBhbm5vdGF0aW9uID0gYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbigndGV4dCcsIDAsIDEwMCwgMjAwKTtcbiAgICAgIGFubm90YXRpb25TZXJ2aWNlLnVwZGF0ZUFubm90YXRpb24oYW5ub3RhdGlvbi5pZCwgeyBpc0xvY2tlZDogdHJ1ZSB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgZGVsZXRlZCA9IGFubm90YXRpb25TZXJ2aWNlLmRlbGV0ZUFubm90YXRpb24oYW5ub3RhdGlvbi5pZCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChkZWxldGVkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChhbm5vdGF0aW9uU2VydmljZS5nZXRBbGxBbm5vdGF0aW9ucygpKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBmb3Igbm9uLWV4aXN0ZW50IGFubm90YXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBkZWxldGVkID0gYW5ub3RhdGlvblNlcnZpY2UuZGVsZXRlQW5ub3RhdGlvbignbm9uLWV4aXN0ZW50LWlkJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChkZWxldGVkKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NlYXJjaEFubm90YXRpb25zJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZmluZCBhbm5vdGF0aW9ucyBjb250YWluaW5nIHRoZSBzZWFyY2ggcXVlcnknLCAoKSA9PiB7XG4gICAgICBhbm5vdGF0aW9uU2VydmljZS5jcmVhdGVBbm5vdGF0aW9uKCd0ZXh0JywgMCwgMTAwLCAyMDAsIHsgdGV4dDogJ1RoaXMgaXMgYSB0ZXN0IGFubm90YXRpb24nIH0pO1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbignbm90ZScsIDEsIDUwLCA3NSwgeyB0ZXh0OiAnQW5vdGhlciBhbm5vdGF0aW9uJyB9KTtcbiAgICAgIGFubm90YXRpb25TZXJ2aWNlLmNyZWF0ZUFubm90YXRpb24oJ2hpZ2hsaWdodCcsIDAsIDI1LCAzMCk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhbm5vdGF0aW9uU2VydmljZS5zZWFyY2hBbm5vdGF0aW9ucygndGVzdCcpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0cykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdHNbMF0udGV4dCkudG9CZSgnVGhpcyBpcyBhIHRlc3QgYW5ub3RhdGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gYW5ub3RhdGlvbiByZXBsaWVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgYW5ub3RhdGlvbiA9IGFubm90YXRpb25TZXJ2aWNlLmNyZWF0ZUFubm90YXRpb24oJ3RleHQnLCAwLCAxMDAsIDIwMCwgeyB0ZXh0OiAnT3JpZ2luYWwgdGV4dCcgfSk7XG4gICAgICBhbm5vdGF0aW9uU2VydmljZS5hZGRSZXBseShhbm5vdGF0aW9uLmlkLCAnVGhpcyBpcyBhIHJlcGx5IHdpdGggdGVzdCBjb250ZW50JywgJ0F1dGhvcicpO1xuICAgICAgXG4gICAgICBjb25zdCByZXN1bHRzID0gYW5ub3RhdGlvblNlcnZpY2Uuc2VhcmNoQW5ub3RhdGlvbnMoJ3Rlc3QnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdHMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLnRleHQpLnRvQmUoJ09yaWdpbmFsIHRleHQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFN0YXRpc3RpY3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYW5ub3RhdGlvbiBzdGF0aXN0aWNzJywgKCkgPT4ge1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbigndGV4dCcsIDAsIDEwMCwgMjAwLCB7IHRleHQ6ICdUZXh0IGFubm90YXRpb24nIH0pO1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbignaGlnaGxpZ2h0JywgMCwgNTAsIDc1KTtcbiAgICAgIGFubm90YXRpb25TZXJ2aWNlLmNyZWF0ZUFubm90YXRpb24oJ3RleHQnLCAxLCAxNTAsIDI1MCwgeyB0ZXh0OiAnQW5vdGhlciB0ZXh0IGFubm90YXRpb24nIH0pO1xuICAgICAgYW5ub3RhdGlvblNlcnZpY2UuY3JlYXRlQW5ub3RhdGlvbignaGlnaGxpZ2h0JywgMSwgMjUsIDMwKTtcbiAgICAgIFxuICAgICAgY29uc3Qgc3RhdHMgPSBhbm5vdGF0aW9uU2VydmljZS5nZXRTdGF0aXN0aWNzKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChzdGF0cykudG9FcXVhbCh7XG4gICAgICAgIHRvdGFsOiA0LFxuICAgICAgICBieVR5cGU6IHtcbiAgICAgICAgICB0ZXh0OiAyLFxuICAgICAgICAgIGhpZ2hsaWdodDogMlxuICAgICAgICB9LFxuICAgICAgICBieVBhZ2U6IHtcbiAgICAgICAgICAwOiAyLFxuICAgICAgICAgIDE6IDJcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il0sIm1hcHBpbmdzIjoiQUFFQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTztFQUMxQkMsV0FBVyxFQUFFO0lBQ1hDLElBQUksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDaEIsQ0FBQztFQUNEQyxHQUFHLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDZEUsYUFBYSxFQUFFO0lBQ2JDLFNBQVMsRUFBRSxXQUFXO0lBQ3RCQyxhQUFhLEVBQUU7RUFDakIsQ0FBQztFQUNEQyxPQUFPLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDOztBQUVIO0FBQ0FMLFdBQUEsR0FBS0MsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPO0VBQ3ZCVSxFQUFFLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxDQUFDLE1B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