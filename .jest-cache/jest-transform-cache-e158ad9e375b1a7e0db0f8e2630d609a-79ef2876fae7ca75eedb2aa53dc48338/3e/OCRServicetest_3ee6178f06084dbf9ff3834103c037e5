bb3c32053d51072a6642a02a5ad4c3af
// Mock tesseract.js
_getJestObj().mock('tesseract.js', () => ({
  createWorker: jest.fn(),
  PSM: {
    AUTO: 0
  },
  OEM: {
    LSTM_ONLY: 1
  }
}));
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
const {
  OCRService
} = require('../../src/renderer/services/OCRService');
describe('OCRService', () => {
  let ocrService;
  let mockWorker;
  beforeEach(() => {
    ocrService = new OCRService();
    mockWorker = {
      terminate: jest.fn(),
      setParameters: jest.fn(),
      recognize: jest.fn(),
      detect: jest.fn()
    };
    require('tesseract.js').createWorker.mockResolvedValue(mockWorker);
    jest.clearAllMocks();
  });
  describe('initialize', () => {
    it('should create a Tesseract worker', async () => {
      await ocrService.initialize('eng');
      expect(require('tesseract.js').createWorker).toHaveBeenCalledWith('eng', 1, {
        logger: expect.any(Function)
      });
      expect(mockWorker.setParameters).toHaveBeenCalled();
    });
    it('should not reinitialize if already initialized with same language', async () => {
      await ocrService.initialize('eng');
      await ocrService.initialize('eng');
      expect(require('tesseract.js').createWorker).toHaveBeenCalledTimes(1);
    });
    it('should reinitialize if language changes', async () => {
      await ocrService.initialize('eng');
      await ocrService.initialize('spa');
      expect(mockWorker.terminate).toHaveBeenCalled();
      expect(require('tesseract.js').createWorker).toHaveBeenCalledTimes(2);
    });
  });
  describe('performOCR', () => {
    it('should perform OCR on a PDF page', async () => {
      // Mock PDF.js
      const mockPage = {
        getViewport: jest.fn().mockReturnValue({
          scale: 2.0,
          height: 100,
          width: 100
        }),
        render: jest.fn().mockReturnValue({
          promise: Promise.resolve()
        })
      };
      const mockPdf = {
        getPage: jest.fn().mockResolvedValue(mockPage),
        numPages: 5
      };

      // Mock worker recognition result
      mockWorker.recognize.mockResolvedValue({
        data: {
          text: 'Sample OCR text',
          confidence: 95,
          blocks: []
        }
      });
      const result = await ocrService.performOCR(mockPdf, 1, 'eng');
      expect(result).toEqual({
        text: 'Sample OCR text',
        confidence: 95,
        language: 'eng',
        pageNumber: 1,
        blocks: []
      });
      expect(mockPdf.getPage).toHaveBeenCalledWith(1);
      expect(mockWorker.recognize).toHaveBeenCalled();
    });
    it('should handle OCR errors', async () => {
      const mockPdf = {
        getPage: jest.fn().mockRejectedValue(new Error('Failed to get page'))
      };
      await expect(ocrService.performOCR(mockPdf, 1, 'eng')).rejects.toThrow('OCR failed');
    });
  });
  describe('getSupportedLanguages', () => {
    it('should return a list of supported languages', () => {
      const languages = ocrService.getSupportedLanguages();
      expect(languages).toBeInstanceOf(Array);
      expect(languages.length).toBeGreaterThan(0);
      expect(languages[0]).toHaveProperty('code');
      expect(languages[0]).toHaveProperty('name');
    });
  });
  describe('terminate', () => {
    it('should terminate the Tesseract worker', async () => {
      await ocrService.initialize('eng');
      await ocrService.terminate();
      expect(mockWorker.terminate).toHaveBeenCalled();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJjcmVhdGVXb3JrZXIiLCJqZXN0IiwiZm4iLCJQU00iLCJBVVRPIiwiT0VNIiwiTFNUTV9PTkxZIiwicmVxdWlyZSIsIk9DUlNlcnZpY2UiLCJkZXNjcmliZSIsIm9jclNlcnZpY2UiLCJtb2NrV29ya2VyIiwiYmVmb3JlRWFjaCIsInRlcm1pbmF0ZSIsInNldFBhcmFtZXRlcnMiLCJyZWNvZ25pemUiLCJkZXRlY3QiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImNsZWFyQWxsTW9ja3MiLCJpdCIsImluaXRpYWxpemUiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsImxvZ2dlciIsImFueSIsIkZ1bmN0aW9uIiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIm1vY2tQYWdlIiwiZ2V0Vmlld3BvcnQiLCJtb2NrUmV0dXJuVmFsdWUiLCJzY2FsZSIsImhlaWdodCIsIndpZHRoIiwicmVuZGVyIiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwibW9ja1BkZiIsImdldFBhZ2UiLCJudW1QYWdlcyIsImRhdGEiLCJ0ZXh0IiwiY29uZmlkZW5jZSIsImJsb2NrcyIsInJlc3VsdCIsInBlcmZvcm1PQ1IiLCJ0b0VxdWFsIiwibGFuZ3VhZ2UiLCJwYWdlTnVtYmVyIiwibW9ja1JlamVjdGVkVmFsdWUiLCJFcnJvciIsInJlamVjdHMiLCJ0b1Rocm93IiwibGFuZ3VhZ2VzIiwiZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzIiwidG9CZUluc3RhbmNlT2YiLCJBcnJheSIsImxlbmd0aCIsInRvQmVHcmVhdGVyVGhhbiIsInRvSGF2ZVByb3BlcnR5Il0sInNvdXJjZXMiOlsiT0NSU2VydmljZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgT0NSU2VydmljZSB9ID0gcmVxdWlyZSgnLi4vLi4vc3JjL3JlbmRlcmVyL3NlcnZpY2VzL09DUlNlcnZpY2UnKTtcblxuLy8gTW9jayB0ZXNzZXJhY3QuanNcbmplc3QubW9jaygndGVzc2VyYWN0LmpzJywgKCkgPT4gKHtcbiAgY3JlYXRlV29ya2VyOiBqZXN0LmZuKCksXG4gIFBTTToge1xuICAgIEFVVE86IDBcbiAgfSxcbiAgT0VNOiB7XG4gICAgTFNUTV9PTkxZOiAxXG4gIH1cbn0pKTtcblxuZGVzY3JpYmUoJ09DUlNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBvY3JTZXJ2aWNlO1xuICBsZXQgbW9ja1dvcmtlcjtcbiAgXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG9jclNlcnZpY2UgPSBuZXcgT0NSU2VydmljZSgpO1xuICAgIG1vY2tXb3JrZXIgPSB7XG4gICAgICB0ZXJtaW5hdGU6IGplc3QuZm4oKSxcbiAgICAgIHNldFBhcmFtZXRlcnM6IGplc3QuZm4oKSxcbiAgICAgIHJlY29nbml6ZTogamVzdC5mbigpLFxuICAgICAgZGV0ZWN0OiBqZXN0LmZuKClcbiAgICB9O1xuICAgIFxuICAgIHJlcXVpcmUoJ3Rlc3NlcmFjdC5qcycpLmNyZWF0ZVdvcmtlci5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrV29ya2VyKTtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2luaXRpYWxpemUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBUZXNzZXJhY3Qgd29ya2VyJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgb2NyU2VydmljZS5pbml0aWFsaXplKCdlbmcnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlcXVpcmUoJ3Rlc3NlcmFjdC5qcycpLmNyZWF0ZVdvcmtlcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2VuZycsIDEsIHtcbiAgICAgICAgbG9nZ2VyOiBleHBlY3QuYW55KEZ1bmN0aW9uKVxuICAgICAgfSk7XG4gICAgICBleHBlY3QobW9ja1dvcmtlci5zZXRQYXJhbWV0ZXJzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCByZWluaXRpYWxpemUgaWYgYWxyZWFkeSBpbml0aWFsaXplZCB3aXRoIHNhbWUgbGFuZ3VhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBvY3JTZXJ2aWNlLmluaXRpYWxpemUoJ2VuZycpO1xuICAgICAgYXdhaXQgb2NyU2VydmljZS5pbml0aWFsaXplKCdlbmcnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlcXVpcmUoJ3Rlc3NlcmFjdC5qcycpLmNyZWF0ZVdvcmtlcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWluaXRpYWxpemUgaWYgbGFuZ3VhZ2UgY2hhbmdlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IG9jclNlcnZpY2UuaW5pdGlhbGl6ZSgnZW5nJyk7XG4gICAgICBhd2FpdCBvY3JTZXJ2aWNlLmluaXRpYWxpemUoJ3NwYScpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1dvcmtlci50ZXJtaW5hdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXF1aXJlKCd0ZXNzZXJhY3QuanMnKS5jcmVhdGVXb3JrZXIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BlcmZvcm1PQ1InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBwZXJmb3JtIE9DUiBvbiBhIFBERiBwYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBQREYuanNcbiAgICAgIGNvbnN0IG1vY2tQYWdlID0ge1xuICAgICAgICBnZXRWaWV3cG9ydDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7IHNjYWxlOiAyLjAsIGhlaWdodDogMTAwLCB3aWR0aDogMTAwIH0pLFxuICAgICAgICByZW5kZXI6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoeyBwcm9taXNlOiBQcm9taXNlLnJlc29sdmUoKSB9KVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgbW9ja1BkZiA9IHtcbiAgICAgICAgZ2V0UGFnZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQYWdlKSxcbiAgICAgICAgbnVtUGFnZXM6IDVcbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIE1vY2sgd29ya2VyIHJlY29nbml0aW9uIHJlc3VsdFxuICAgICAgbW9ja1dvcmtlci5yZWNvZ25pemUubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdGV4dDogJ1NhbXBsZSBPQ1IgdGV4dCcsXG4gICAgICAgICAgY29uZmlkZW5jZTogOTUsXG4gICAgICAgICAgYmxvY2tzOiBbXVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgb2NyU2VydmljZS5wZXJmb3JtT0NSKG1vY2tQZGYsIDEsICdlbmcnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHRleHQ6ICdTYW1wbGUgT0NSIHRleHQnLFxuICAgICAgICBjb25maWRlbmNlOiA5NSxcbiAgICAgICAgbGFuZ3VhZ2U6ICdlbmcnLFxuICAgICAgICBwYWdlTnVtYmVyOiAxLFxuICAgICAgICBibG9ja3M6IFtdXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tQZGYuZ2V0UGFnZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoMSk7XG4gICAgICBleHBlY3QobW9ja1dvcmtlci5yZWNvZ25pemUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIE9DUiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUGRmID0ge1xuICAgICAgICBnZXRQYWdlOiBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IHBhZ2UnKSlcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGF3YWl0IGV4cGVjdChvY3JTZXJ2aWNlLnBlcmZvcm1PQ1IobW9ja1BkZiwgMSwgJ2VuZycpKS5yZWplY3RzLnRvVGhyb3coJ09DUiBmYWlsZWQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFN1cHBvcnRlZExhbmd1YWdlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhIGxpc3Qgb2Ygc3VwcG9ydGVkIGxhbmd1YWdlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGxhbmd1YWdlcyA9IG9jclNlcnZpY2UuZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChsYW5ndWFnZXMpLnRvQmVJbnN0YW5jZU9mKEFycmF5KTtcbiAgICAgIGV4cGVjdChsYW5ndWFnZXMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QobGFuZ3VhZ2VzWzBdKS50b0hhdmVQcm9wZXJ0eSgnY29kZScpO1xuICAgICAgZXhwZWN0KGxhbmd1YWdlc1swXSkudG9IYXZlUHJvcGVydHkoJ25hbWUnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3Rlcm1pbmF0ZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHRlcm1pbmF0ZSB0aGUgVGVzc2VyYWN0IHdvcmtlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IG9jclNlcnZpY2UuaW5pdGlhbGl6ZSgnZW5nJyk7XG4gICAgICBhd2FpdCBvY3JTZXJ2aWNlLnRlcm1pbmF0ZSgpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1dvcmtlci50ZXJtaW5hdGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiJBQUVBO0FBQ0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPO0VBQy9CQyxZQUFZLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7RUFDdkJDLEdBQUcsRUFBRTtJQUNIQyxJQUFJLEVBQUU7RUFD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