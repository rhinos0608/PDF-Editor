/**\n * OCR Panel Component\n * Provides comprehensive OCR functionality with language detection,\n * batch processing, and text extraction capabilities\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Eye, \n  Languages, \n  FileText, \n  Download, \n  Settings, \n  Play, \n  Pause, \n  RotateCcw,\n  CheckCircle,\n  AlertCircle,\n  Loader,\n  Copy,\n  Save\n} from 'lucide-react';\nimport { toast } from 'react-toastify';\nimport './OCRPanel.css';\n\ninterface OCRResult {\n  text: string;\n  confidence: number;\n  language: string;\n  pageNumber: number;\n  blocks: any[];\n  processingTime?: number;\n}\n\ninterface OCRPanelProps {\n  isVisible: boolean;\n  onClose: () => void;\n  currentPDF: any;\n  currentPDFBytes: Uint8Array | null;\n  currentPage: number;\n  totalPages: number;\n  onTextExtracted?: (text: string, pageNumber: number) => void;\n}\n\nconst SUPPORTED_LANGUAGES = [\n  { code: 'eng', name: 'English', script: 'Latin' },\n  { code: 'spa', name: 'Spanish', script: 'Latin' },\n  { code: 'fra', name: 'French', script: 'Latin' },\n  { code: 'deu', name: 'German', script: 'Latin' },\n  { code: 'ita', name: 'Italian', script: 'Latin' },\n  { code: 'por', name: 'Portuguese', script: 'Latin' },\n  { code: 'rus', name: 'Russian', script: 'Cyrillic' },\n  { code: 'chi_sim', name: 'Chinese (Simplified)', script: 'Han' },\n  { code: 'chi_tra', name: 'Chinese (Traditional)', script: 'Han' },\n  { code: 'jpn', name: 'Japanese', script: 'Mixed' },\n  { code: 'kor', name: 'Korean', script: 'Hangul' },\n  { code: 'ara', name: 'Arabic', script: 'Arabic' },\n  { code: 'hin', name: 'Hindi', script: 'Devanagari' },\n  { code: 'tha', name: 'Thai', script: 'Thai' },\n  { code: 'vie', name: 'Vietnamese', script: 'Latin' }\n];\n\nconst OCRPanel: React.FC<OCRPanelProps> = ({\n  isVisible,\n  onClose,\n  currentPDF,\n  currentPDFBytes,\n  currentPage,\n  totalPages,\n  onTextExtracted\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState('eng');\n  const [autoDetectLanguage, setAutoDetectLanguage] = useState(true);\n  const [ocrMode, setOcrMode] = useState<'current' | 'all' | 'range'>('current');\n  const [pageRange, setPageRange] = useState({ start: 1, end: totalPages });\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [results, setResults] = useState<OCRResult[]>([]);\n  const [currentResult, setCurrentResult] = useState<OCRResult | null>(null);\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const [preprocessingOptions, setPreprocessingOptions] = useState({\n    enhanceContrast: true,\n    removeNoise: true,\n    autoRotate: false,\n    autoDeskew: true\n  });\n  const [outputFormat, setOutputFormat] = useState<'text' | 'json' | 'xml'>('text');\n\n  // Update page range when total pages change\n  useEffect(() => {\n    setPageRange({ start: 1, end: totalPages });\n  }, [totalPages]);\n\n  // Setup progress listener\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.electronAPI?.onOCRProgress) {\n      const cleanup = window.electronAPI.onOCRProgress((progressData: any) => {\n        setProgress((progressData.completed / progressData.total) * 100);\n      });\n      \n      return cleanup;\n    }\n  }, []);\n\n  const performOCR = useCallback(async () => {\n    if (!currentPDFBytes) {\n      toast.error('No PDF loaded');\n      return;\n    }\n\n    setIsProcessing(true);\n    setProgress(0);\n    setResults([]);\n    setCurrentResult(null);\n\n    try {\n      let ocrResults: OCRResult[] = [];\n\n      if (ocrMode === 'current') {\n        // OCR current page only\n        if (window.electronAPI?.performOCR) {\n          const result = await window.electronAPI.performOCR(\n            currentPDFBytes,\n            currentPage,\n            selectedLanguage\n          );\n          \n          if (result.success) {\n            ocrResults = [result.result];\n          } else {\n            throw new Error(result.error || 'OCR failed');\n          }\n        } else {\n          // Fallback for web mode\n          ocrResults = [{\n            text: `Mock OCR result for page ${currentPage}\\n\\nThis is sample extracted text that would normally come from the OCR engine. In a real implementation, this would be the actual text extracted from the PDF page using Tesseract.js or similar OCR technology.`,\n            confidence: 0.95,\n            language: selectedLanguage,\n            pageNumber: currentPage,\n            blocks: [],\n            processingTime: 2500\n          }];\n        }\n      } else if (ocrMode === 'all') {\n        // OCR all pages\n        const pageNumbers = Array.from({ length: totalPages }, (_, i) => i + 1);\n        \n        if (window.electronAPI?.batchOCR) {\n          const result = await window.electronAPI.batchOCR(\n            currentPDFBytes,\n            pageNumbers,\n            selectedLanguage\n          );\n          \n          if (result.success) {\n            ocrResults = result.results;\n          } else {\n            throw new Error(result.error || 'Batch OCR failed');\n          }\n        } else {\n          // Fallback for web mode\n          ocrResults = pageNumbers.map(pageNum => ({\n            text: `Mock OCR result for page ${pageNum}\\n\\nExtracted text content...`,\n            confidence: 0.92,\n            language: selectedLanguage,\n            pageNumber: pageNum,\n            blocks: []\n          }));\n        }\n      } else if (ocrMode === 'range') {\n        // OCR page range\n        const pageNumbers = [];\n        for (let i = pageRange.start; i <= Math.min(pageRange.end, totalPages); i++) {\n          pageNumbers.push(i);\n        }\n        \n        if (window.electronAPI?.batchOCR) {\n          const result = await window.electronAPI.batchOCR(\n            currentPDFBytes,\n            pageNumbers,\n            selectedLanguage\n          );\n          \n          if (result.success) {\n            ocrResults = result.results;\n          } else {\n            throw new Error(result.error || 'Range OCR failed');\n          }\n        } else {\n          // Fallback for web mode\n          ocrResults = pageNumbers.map(pageNum => ({\n            text: `Mock OCR result for page ${pageNum}\\n\\nExtracted text content...`,\n            confidence: 0.92,\n            language: selectedLanguage,\n            pageNumber: pageNum,\n            blocks: []\n          }));\n        }\n      }\n\n      setResults(ocrResults);\n      if (ocrResults.length > 0) {\n        setCurrentResult(ocrResults[0]);\n        \n        // Notify parent component\n        if (onTextExtracted && ocrResults[0]) {\n          onTextExtracted(ocrResults[0].text, ocrResults[0].pageNumber);\n        }\n      }\n      \n      toast.success(`OCR completed successfully! Processed ${ocrResults.length} page(s)`);\n    } catch (error: any) {\n      console.error('OCR failed:', error);\n      toast.error(`OCR failed: ${error.message}`);\n    } finally {\n      setIsProcessing(false);\n      setProgress(0);\n    }\n  }, [currentPDFBytes, currentPage, selectedLanguage, ocrMode, pageRange, totalPages, onTextExtracted]);\n\n  const copyToClipboard = useCallback(async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast.success('Text copied to clipboard');\n    } catch (error) {\n      console.error('Failed to copy text:', error);\n      toast.error('Failed to copy text');\n    }\n  }, []);\n\n  const exportResults = useCallback(() => {\n    if (results.length === 0) {\n      toast.warning('No OCR results to export');\n      return;\n    }\n\n    let content = '';\n    let filename = '';\n    let mimeType = '';\n\n    switch (outputFormat) {\n      case 'text':\n        content = results.map(r => `Page ${r.pageNumber}:\\n${r.text}`).join('\\n\\n');\n        filename = 'ocr_results.txt';\n        mimeType = 'text/plain';\n        break;\n      \n      case 'json':\n        content = JSON.stringify(results, null, 2);\n        filename = 'ocr_results.json';\n        mimeType = 'application/json';\n        break;\n      \n      case 'xml':\n        content = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<ocr-results>\\n`;\n        results.forEach(result => {\n          content += `  <page number=\"${result.pageNumber}\" confidence=\"${result.confidence}\" language=\"${result.language}\">\\n`;\n          content += `    <text><![CDATA[${result.text}]]></text>\\n`;\n          content += `  </page>\\n`;\n        });\n        content += '</ocr-results>';\n        filename = 'ocr_results.xml';\n        mimeType = 'application/xml';\n        break;\n    }\n\n    // Create and download file\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    toast.success(`OCR results exported as ${filename}`);\n  }, [results, outputFormat]);\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 0.9) return '#10b981'; // Green\n    if (confidence >= 0.7) return '#f59e0b'; // Yellow\n    return '#ef4444'; // Red\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"ocr-panel\">\n      <div className=\"ocr-panel-header\">\n        <div className=\"ocr-panel-title\">\n          <Eye className=\"icon\" />\n          <span>OCR Text Recognition</span>\n        </div>\n        <button className=\"close-button\" onClick={onClose}>\n          Ã—\n        </button>\n      </div>\n\n      <div className=\"ocr-panel-content\">\n        {/* OCR Configuration */}\n        <div className=\"ocr-config\">\n          <div className=\"config-section\">\n            <h3>Language Settings</h3>\n            <div className=\"language-controls\">\n              <div className=\"checkbox-group\">\n                <input\n                  type=\"checkbox\"\n                  id=\"auto-detect\"\n                  checked={autoDetectLanguage}\n                  onChange={(e) => setAutoDetectLanguage(e.target.checked)}\n                />\n                <label htmlFor=\"auto-detect\">Auto-detect language</label>\n              </div>\n              \n              {!autoDetectLanguage && (\n                <div className=\"language-selector\">\n                  <label htmlFor=\"language-select\">\n                    <Languages className=\"icon\" />\n                    Language:\n                  </label>\n                  <select\n                    id=\"language-select\"\n                    value={selectedLanguage}\n                    onChange={(e) => setSelectedLanguage(e.target.value)}\n                  >\n                    {SUPPORTED_LANGUAGES.map(lang => (\n                      <option key={lang.code} value={lang.code}>\n                        {lang.name} ({lang.script})\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"config-section\">\n            <h3>Processing Mode</h3>\n            <div className=\"mode-selector\">\n              <div className=\"radio-group\">\n                <input\n                  type=\"radio\"\n                  id=\"current-page\"\n                  name=\"ocr-mode\"\n                  value=\"current\"\n                  checked={ocrMode === 'current'}\n                  onChange={(e) => setOcrMode(e.target.value as any)}\n                />\n                <label htmlFor=\"current-page\">Current page ({currentPage})</label>\n              </div>\n              \n              <div className=\"radio-group\">\n                <input\n                  type=\"radio\"\n                  id=\"all-pages\"\n                  name=\"ocr-mode\"\n                  value=\"all\"\n                  checked={ocrMode === 'all'}\n                  onChange={(e) => setOcrMode(e.target.value as any)}\n                />\n                <label htmlFor=\"all-pages\">All pages (1-{totalPages})</label>\n              </div>\n              \n              <div className=\"radio-group\">\n                <input\n                  type=\"radio\"\n                  id=\"page-range\"\n                  name=\"ocr-mode\"\n                  value=\"range\"\n                  checked={ocrMode === 'range'}\n                  onChange={(e) => setOcrMode(e.target.value as any)}\n                />\n                <label htmlFor=\"page-range\">Page range:</label>\n                {ocrMode === 'range' && (\n                  <div className=\"range-inputs\">\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max={totalPages}\n                      value={pageRange.start}\n                      onChange={(e) => setPageRange(prev => ({ ...prev, start: parseInt(e.target.value) || 1 }))}\n                    />\n                    <span>to</span>\n                    <input\n                      type=\"number\"\n                      min=\"1\"\n                      max={totalPages}\n                      value={pageRange.end}\n                      onChange={(e) => setPageRange(prev => ({ ...prev, end: parseInt(e.target.value) || totalPages }))}\n                    />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Advanced Options */}\n          <div className=\"config-section\">\n            <button\n              className=\"advanced-toggle\"\n              onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}\n            >\n              <Settings className=\"icon\" />\n              Advanced Options\n            </button>\n            \n            {showAdvancedOptions && (\n              <div className=\"advanced-options\">\n                <h4>Preprocessing</h4>\n                <div className=\"preprocessing-options\">\n                  <div className=\"checkbox-group\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"enhance-contrast\"\n                      checked={preprocessingOptions.enhanceContrast}\n                      onChange={(e) => setPreprocessingOptions(prev => ({ ...prev, enhanceContrast: e.target.checked }))}\n                    />\n                    <label htmlFor=\"enhance-contrast\">Enhance contrast</label>\n                  </div>\n                  \n                  <div className=\"checkbox-group\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"remove-noise\"\n                      checked={preprocessingOptions.removeNoise}\n                      onChange={(e) => setPreprocessingOptions(prev => ({ ...prev, removeNoise: e.target.checked }))}\n                    />\n                    <label htmlFor=\"remove-noise\">Remove noise</label>\n                  </div>\n                  \n                  <div className=\"checkbox-group\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"auto-rotate\"\n                      checked={preprocessingOptions.autoRotate}\n                      onChange={(e) => setPreprocessingOptions(prev => ({ ...prev, autoRotate: e.target.checked }))}\n                    />\n                    <label htmlFor=\"auto-rotate\">Auto-rotate</label>\n                  </div>\n                  \n                  <div className=\"checkbox-group\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"auto-deskew\"\n                      checked={preprocessingOptions.autoDeskew}\n                      onChange={(e) => setPreprocessingOptions(prev => ({ ...prev, autoDeskew: e.target.checked }))}\n                    />\n                    <label htmlFor=\"auto-deskew\">Auto-deskew</label>\n                  </div>\n                </div>\n                \n                <h4>Output Format</h4>\n                <div className=\"output-format\">\n                  <select\n                    value={outputFormat}\n                    onChange={(e) => setOutputFormat(e.target.value as any)}\n                  >\n                    <option value=\"text\">Plain Text</option>\n                    <option value=\"json\">JSON</option>\n                    <option value=\"xml\">XML</option>\n                  </select>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* OCR Controls */}\n        <div className=\"ocr-controls\">\n          <button\n            className=\"ocr-start-button\"\n            onClick={performOCR}\n            disabled={isProcessing || !currentPDFBytes}\n          >\n            {isProcessing ? (\n              <>\n                <Loader className=\"icon spinning\" />\n                Processing...\n              </>\n            ) : (\n              <>\n                <Play className=\"icon\" />\n                Start OCR\n              </>\n            )}\n          </button>\n          \n          {isProcessing && (\n            <div className=\"progress-container\">\n              <div className=\"progress-bar\">\n                <div \n                  className=\"progress-fill\" \n                  style={{ width: `${progress}%` }}\n                />\n              </div>\n              <span className=\"progress-text\">{Math.round(progress)}%</span>\n            </div>\n          )}\n        </div>\n\n        {/* Results */}\n        {results.length > 0 && (\n          <div className=\"ocr-results\">\n            <div className=\"results-header\">\n              <h3>\n                <FileText className=\"icon\" />\n                OCR Results ({results.length} page{results.length !== 1 ? 's' : ''})\n              </h3>\n              \n              <div className=\"results-controls\">\n                <button\n                  className=\"export-button\"\n                  onClick={exportResults}\n                  title=\"Export results\"\n                >\n                  <Download className=\"icon\" />\n                  Export\n                </button>\n              </div>\n            </div>\n\n            {/* Page selector for multiple results */}\n            {results.length > 1 && (\n              <div className=\"page-selector\">\n                <label>View page:</label>\n                <select\n                  value={currentResult?.pageNumber || results[0].pageNumber}\n                  onChange={(e) => {\n                    const pageNum = parseInt(e.target.value);\n                    const result = results.find(r => r.pageNumber === pageNum);\n                    if (result) setCurrentResult(result);\n                  }}\n                >\n                  {results.map(result => (\n                    <option key={result.pageNumber} value={result.pageNumber}>\n                      Page {result.pageNumber}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            )}\n\n            {/* Current result display */}\n            {currentResult && (\n              <div className=\"result-display\">\n                <div className=\"result-info\">\n                  <div className=\"info-item\">\n                    <span className=\"label\">Page:</span>\n                    <span className=\"value\">{currentResult.pageNumber}</span>\n                  </div>\n                  \n                  <div className=\"info-item\">\n                    <span className=\"label\">Language:</span>\n                    <span className=\"value\">{currentResult.language}</span>\n                  </div>\n                  \n                  <div className=\"info-item\">\n                    <span className=\"label\">Confidence:</span>\n                    <span \n                      className=\"value confidence\"\n                      style={{ color: getConfidenceColor(currentResult.confidence) }}\n                    >\n                      {(currentResult.confidence * 100).toFixed(1)}%\n                      {currentResult.confidence >= 0.9 ? (\n                        <CheckCircle className=\"icon\" />\n                      ) : (\n                        <AlertCircle className=\"icon\" />\n                      )}\n                    </span>\n                  </div>\n                  \n                  {currentResult.processingTime && (\n                    <div className=\"info-item\">\n                      <span className=\"label\">Processing time:</span>\n                      <span className=\"value\">{(currentResult.processingTime / 1000).toFixed(1)}s</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"text-output\">\n                  <div className=\"text-header\">\n                    <span>Extracted Text</span>\n                    <button\n                      className=\"copy-button\"\n                      onClick={() => copyToClipboard(currentResult.text)}\n                      title=\"Copy to clipboard\"\n                    >\n                      <Copy className=\"icon\" />\n                    </button>\n                  </div>\n                  \n                  <textarea\n                    className=\"text-content\"\n                    value={currentResult.text}\n                    readOnly\n                    rows={10}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OCRPanel;\n"