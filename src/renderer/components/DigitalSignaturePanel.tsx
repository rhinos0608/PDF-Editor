/**\n * Digital Signature Panel Component\n * Provides comprehensive digital signature functionality including\n * certificate management, signature creation, and validation\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Shield, \n  FileSignature, \n  Certificate, \n  Key, \n  CheckCircle, \n  AlertTriangle, \n  X, \n  Plus, \n  Download, \n  Upload, \n  Eye, \n  Lock,\n  Unlock,\n  Calendar,\n  User,\n  Building,\n  Globe\n} from 'lucide-react';\nimport { toast } from 'react-toastify';\nimport './DigitalSignaturePanel.css';\n\ninterface Certificate {\n  id: string;\n  name: string;\n  issuer: string;\n  subject: string;\n  validFrom: string;\n  validTo: string;\n  fingerprint: string;\n  keyUsage: string[];\n  isValid: boolean;\n  isSelfSigned: boolean;\n}\n\ninterface Signature {\n  id: string;\n  certificate: Certificate;\n  position: { x: number; y: number; width: number; height: number };\n  pageIndex: number;\n  timestamp: string;\n  reason?: string;\n  location?: string;\n  contactInfo?: string;\n  appearance: {\n    showDate: boolean;\n    showReason: boolean;\n    showLocation: boolean;\n    showCertificate: boolean;\n    customText?: string;\n  };\n  valid: boolean;\n}\n\ninterface DigitalSignaturePanelProps {\n  isVisible: boolean;\n  onClose: () => void;\n  currentPDF: any;\n  currentPDFBytes: Uint8Array | null;\n  currentPage: number;\n  onSignatureAdded?: (signature: Signature) => void;\n}\n\nconst DigitalSignaturePanel: React.FC<DigitalSignaturePanelProps> = ({\n  isVisible,\n  onClose,\n  currentPDF,\n  currentPDFBytes,\n  currentPage,\n  onSignatureAdded\n}) => {\n  const [activeTab, setActiveTab] = useState<'sign' | 'validate' | 'certificates'>('sign');\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\n  const [selectedCertificate, setSelectedCertificate] = useState<Certificate | null>(null);\n  const [signatures, setSignatures] = useState<Signature[]>([]);\n  const [isCreatingSignature, setIsCreatingSignature] = useState(false);\n  const [signaturePosition, setSignaturePosition] = useState({ x: 100, y: 100, width: 200, height: 80 });\n  const [signatureOptions, setSignatureOptions] = useState({\n    reason: '',\n    location: '',\n    contactInfo: '',\n    appearance: {\n      showDate: true,\n      showReason: true,\n      showLocation: false,\n      showCertificate: true,\n      customText: ''\n    }\n  });\n  const [validationResults, setValidationResults] = useState<any[]>([]);\n  const [isValidating, setIsValidating] = useState(false);\n\n  // Load mock certificates on component mount\n  useEffect(() => {\n    loadMockCertificates();\n  }, []);\n\n  const loadMockCertificates = () => {\n    const mockCertificates: Certificate[] = [\n      {\n        id: 'cert_1',\n        name: 'John Doe - Personal Certificate',\n        issuer: 'Professional PDF Editor CA',\n        subject: 'CN=John Doe, O=Company Inc, C=US',\n        validFrom: new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString(),\n        validTo: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),\n        fingerprint: 'SHA256:1234567890abcdef1234567890abcdef12345678',\n        keyUsage: ['Digital Signature', 'Non Repudiation'],\n        isValid: true,\n        isSelfSigned: false\n      },\n      {\n        id: 'cert_2',\n        name: 'Company Seal Certificate',\n        issuer: 'Corporate CA Authority',\n        subject: 'CN=Company Inc, O=Company Inc, C=US',\n        validFrom: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString(),\n        validTo: new Date(Date.now() + 545 * 24 * 60 * 60 * 1000).toISOString(),\n        fingerprint: 'SHA256:abcdef1234567890abcdef1234567890abcdef12',\n        keyUsage: ['Digital Signature', 'Key Encipherment'],\n        isValid: true,\n        isSelfSigned: false\n      }\n    ];\n    \n    setCertificates(mockCertificates);\n    if (mockCertificates.length > 0) {\n      setSelectedCertificate(mockCertificates[0]);\n    }\n  };\n\n  const createDigitalSignature = useCallback(async () => {\n    if (!selectedCertificate || !currentPDFBytes) {\n      toast.error('Please select a certificate and ensure a PDF is loaded');\n      return;\n    }\n\n    setIsCreatingSignature(true);\n\n    try {\n      const signatureData = {\n        certificate: selectedCertificate,\n        position: {\n          ...signaturePosition,\n          pageIndex: currentPage - 1\n        },\n        reason: signatureOptions.reason,\n        location: signatureOptions.location,\n        contactInfo: signatureOptions.contactInfo,\n        appearance: signatureOptions.appearance\n      };\n\n      let result;\n      if (window.electronAPI?.createDigitalSignature) {\n        result = await window.electronAPI.createDigitalSignature(currentPDFBytes, signatureData);\n      } else {\n        // Fallback for web mode\n        result = {\n          success: true,\n          signedPdf: {\n            data: currentPDFBytes,\n            signature: {\n              id: `sig_${Date.now()}`,\n              timestamp: new Date().toISOString(),\n              certificate: selectedCertificate,\n              position: signatureData.position,\n              valid: true\n            }\n          }\n        };\n      }\n\n      if (result.success) {\n        const newSignature: Signature = {\n          id: result.signedPdf.signature.id,\n          certificate: selectedCertificate,\n          position: {\n            x: signaturePosition.x,\n            y: signaturePosition.y,\n            width: signaturePosition.width,\n            height: signaturePosition.height\n          },\n          pageIndex: currentPage - 1,\n          timestamp: result.signedPdf.signature.timestamp,\n          reason: signatureOptions.reason,\n          location: signatureOptions.location,\n          contactInfo: signatureOptions.contactInfo,\n          appearance: signatureOptions.appearance,\n          valid: true\n        };\n\n        setSignatures(prev => [...prev, newSignature]);\n        \n        if (onSignatureAdded) {\n          onSignatureAdded(newSignature);\n        }\n\n        toast.success('Digital signature created successfully!');\n        \n        // Reset form\n        setSignatureOptions({\n          reason: '',\n          location: '',\n          contactInfo: '',\n          appearance: {\n            showDate: true,\n            showReason: true,\n            showLocation: false,\n            showCertificate: true,\n            customText: ''\n          }\n        });\n      } else {\n        throw new Error(result.error || 'Failed to create digital signature');\n      }\n    } catch (error: any) {\n      console.error('Digital signature creation failed:', error);\n      toast.error(`Failed to create signature: ${error.message}`);\n    } finally {\n      setIsCreatingSignature(false);\n    }\n  }, [selectedCertificate, currentPDFBytes, currentPage, signaturePosition, signatureOptions, onSignatureAdded]);\n\n  const validateSignatures = useCallback(async () => {\n    if (!currentPDFBytes) {\n      toast.error('No PDF loaded for validation');\n      return;\n    }\n\n    setIsValidating(true);\n    setValidationResults([]);\n\n    try {\n      // In a real implementation, this would extract and validate all signatures in the PDF\n      const mockValidationResults = signatures.map(signature => ({\n        signatureId: signature.id,\n        valid: signature.valid,\n        certificate: signature.certificate,\n        timestamp: signature.timestamp,\n        documentIntegrity: true,\n        certificateChain: [\n          {\n            subject: signature.certificate.subject,\n            issuer: signature.certificate.issuer,\n            valid: signature.certificate.isValid,\n            validFrom: signature.certificate.validFrom,\n            validTo: signature.certificate.validTo\n          }\n        ],\n        warnings: signature.certificate.isSelfSigned ? ['Self-signed certificate'] : [],\n        errors: []\n      }));\n\n      setValidationResults(mockValidationResults);\n      \n      if (mockValidationResults.length === 0) {\n        toast.info('No digital signatures found in this document');\n      } else {\n        const validCount = mockValidationResults.filter(r => r.valid).length;\n        toast.success(`Validation complete: ${validCount}/${mockValidationResults.length} signatures are valid`);\n      }\n    } catch (error: any) {\n      console.error('Signature validation failed:', error);\n      toast.error(`Validation failed: ${error.message}`);\n    } finally {\n      setIsValidating(false);\n    }\n  }, [currentPDFBytes, signatures]);\n\n  const importCertificate = useCallback(() => {\n    // In a real implementation, this would open a file dialog to import certificates\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.p12,.pfx,.crt,.cer,.pem';\n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file) {\n        // Mock certificate import\n        const newCert: Certificate = {\n          id: `cert_${Date.now()}`,\n          name: file.name.replace(/\\.[^/.]+$/, ''),\n          issuer: 'Imported Certificate Authority',\n          subject: `CN=${file.name}, O=Imported`,\n          validFrom: new Date().toISOString(),\n          validTo: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),\n          fingerprint: `SHA256:${Math.random().toString(36).substr(2, 40)}`,\n          keyUsage: ['Digital Signature'],\n          isValid: true,\n          isSelfSigned: true\n        };\n        \n        setCertificates(prev => [...prev, newCert]);\n        toast.success('Certificate imported successfully');\n      }\n    };\n    input.click();\n  }, []);\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getCertificateStatus = (cert: Certificate) => {\n    const now = new Date();\n    const validTo = new Date(cert.validTo);\n    const daysUntilExpiry = Math.ceil((validTo.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (!cert.isValid) return { status: 'invalid', color: '#ef4444', text: 'Invalid' };\n    if (daysUntilExpiry < 0) return { status: 'expired', color: '#ef4444', text: 'Expired' };\n    if (daysUntilExpiry < 30) return { status: 'expiring', color: '#f59e0b', text: 'Expiring Soon' };\n    return { status: 'valid', color: '#10b981', text: 'Valid' };\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"signature-panel\">\n      <div className=\"signature-panel-header\">\n        <div className=\"signature-panel-title\">\n          <Shield className=\"icon\" />\n          <span>Digital Signatures</span>\n        </div>\n        <button className=\"close-button\" onClick={onClose}>\n          <X className=\"icon\" />\n        </button>\n      </div>\n\n      <div className=\"signature-panel-tabs\">\n        <button\n          className={`tab-button ${activeTab === 'sign' ? 'active' : ''}`}\n          onClick={() => setActiveTab('sign')}\n        >\n          <FileSignature className=\"icon\" />\n          Sign\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'validate' ? 'active' : ''}`}\n          onClick={() => setActiveTab('validate')}\n        >\n          <CheckCircle className=\"icon\" />\n          Validate\n        </button>\n        <button\n          className={`tab-button ${activeTab === 'certificates' ? 'active' : ''}`}\n          onClick={() => setActiveTab('certificates')}\n        >\n          <Certificate className=\"icon\" />\n          Certificates\n        </button>\n      </div>\n\n      <div className=\"signature-panel-content\">\n        {/* Sign Tab */}\n        {activeTab === 'sign' && (\n          <div className=\"sign-tab\">\n            <div className=\"section\">\n              <h3>Certificate Selection</h3>\n              {certificates.length === 0 ? (\n                <div className=\"no-certificates\">\n                  <Certificate className=\"icon\" />\n                  <p>No certificates available</p>\n                  <button className=\"import-button\" onClick={importCertificate}>\n                    <Upload className=\"icon\" />\n                    Import Certificate\n                  </button>\n                </div>\n              ) : (\n                <div className=\"certificate-selector\">\n                  <select\n                    value={selectedCertificate?.id || ''}\n                    onChange={(e) => {\n                      const cert = certificates.find(c => c.id === e.target.value);\n                      setSelectedCertificate(cert || null);\n                    }}\n                  >\n                    {certificates.map(cert => {\n                      const status = getCertificateStatus(cert);\n                      return (\n                        <option key={cert.id} value={cert.id}>\n                          {cert.name} ({status.text})\n                        </option>\n                      );\n                    })}\n                  </select>\n                  \n                  {selectedCertificate && (\n                    <div className=\"certificate-info\">\n                      <div className=\"info-row\">\n                        <User className=\"icon\" />\n                        <span>{selectedCertificate.subject}</span>\n                      </div>\n                      <div className=\"info-row\">\n                        <Building className=\"icon\" />\n                        <span>{selectedCertificate.issuer}</span>\n                      </div>\n                      <div className=\"info-row\">\n                        <Calendar className=\"icon\" />\n                        <span>Valid until {formatDate(selectedCertificate.validTo)}</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"section\">\n              <h3>Signature Position</h3>\n              <div className=\"position-controls\">\n                <div className=\"position-inputs\">\n                  <div className=\"input-group\">\n                    <label>X:</label>\n                    <input\n                      type=\"number\"\n                      value={signaturePosition.x}\n                      onChange={(e) => setSignaturePosition(prev => ({ ...prev, x: parseInt(e.target.value) || 0 }))}\n                    />\n                  </div>\n                  <div className=\"input-group\">\n                    <label>Y:</label>\n                    <input\n                      type=\"number\"\n                      value={signaturePosition.y}\n                      onChange={(e) => setSignaturePosition(prev => ({ ...prev, y: parseInt(e.target.value) || 0 }))}\n                    />\n                  </div>\n                  <div className=\"input-group\">\n                    <label>Width:</label>\n                    <input\n                      type=\"number\"\n                      value={signaturePosition.width}\n                      onChange={(e) => setSignaturePosition(prev => ({ ...prev, width: parseInt(e.target.value) || 0 }))}\n                    />\n                  </div>\n                  <div className=\"input-group\">\n                    <label>Height:</label>\n                    <input\n                      type=\"number\"\n                      value={signaturePosition.height}\n                      onChange={(e) => setSignaturePosition(prev => ({ ...prev, height: parseInt(e.target.value) || 0 }))}\n                    />\n                  </div>\n                </div>\n                <p className=\"position-note\">\n                  Position on page {currentPage}. Click on the PDF to set position interactively.\n                </p>\n              </div>\n            </div>\n\n            <div className=\"section\">\n              <h3>Signature Details</h3>\n              <div className=\"signature-details\">\n                <div className=\"input-group\">\n                  <label>Reason for signing:</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g., I approve this document\"\n                    value={signatureOptions.reason}\n                    onChange={(e) => setSignatureOptions(prev => ({ ...prev, reason: e.target.value }))}\n                  />\n                </div>\n                \n                <div className=\"input-group\">\n                  <label>Location:</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g., New York, NY\"\n                    value={signatureOptions.location}\n                    onChange={(e) => setSignatureOptions(prev => ({ ...prev, location: e.target.value }))}\n                  />\n                </div>\n                \n                <div className=\"input-group\">\n                  <label>Contact info:</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"e.g., john.doe@company.com\"\n                    value={signatureOptions.contactInfo}\n                    onChange={(e) => setSignatureOptions(prev => ({ ...prev, contactInfo: e.target.value }))}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"section\">\n              <h3>Appearance Options</h3>\n              <div className=\"appearance-options\">\n                <div className=\"checkbox-group\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"show-date\"\n                    checked={signatureOptions.appearance.showDate}\n                    onChange={(e) => setSignatureOptions(prev => ({\n                      ...prev,\n                      appearance: { ...prev.appearance, showDate: e.target.checked }\n                    }))}\n                  />\n                  <label htmlFor=\"show-date\">Show date and time</label>\n                </div>\n                \n                <div className=\"checkbox-group\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"show-reason\"\n                    checked={signatureOptions.appearance.showReason}\n                    onChange={(e) => setSignatureOptions(prev => ({\n                      ...prev,\n                      appearance: { ...prev.appearance, showReason: e.target.checked }\n                    }))}\n                  />\n                  <label htmlFor=\"show-reason\">Show reason</label>\n                </div>\n                \n                <div className=\"checkbox-group\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"show-location\"\n                    checked={signatureOptions.appearance.showLocation}\n                    onChange={(e) => setSignatureOptions(prev => ({\n                      ...prev,\n                      appearance: { ...prev.appearance, showLocation: e.target.checked }\n                    }))}\n                  />\n                  <label htmlFor=\"show-location\">Show location</label>\n                </div>\n                \n                <div className=\"checkbox-group\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"show-certificate\"\n                    checked={signatureOptions.appearance.showCertificate}\n                    onChange={(e) => setSignatureOptions(prev => ({\n                      ...prev,\n                      appearance: { ...prev.appearance, showCertificate: e.target.checked }\n                    }))}\n                  />\n                  <label htmlFor=\"show-certificate\">Show certificate info</label>\n                </div>\n                \n                <div className=\"input-group\">\n                  <label>Custom text:</label>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Additional text to display\"\n                    value={signatureOptions.appearance.customText}\n                    onChange={(e) => setSignatureOptions(prev => ({\n                      ...prev,\n                      appearance: { ...prev.appearance, customText: e.target.value }\n                    }))}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"sign-actions\">\n              <button\n                className=\"sign-button\"\n                onClick={createDigitalSignature}\n                disabled={!selectedCertificate || !currentPDFBytes || isCreatingSignature}\n              >\n                {isCreatingSignature ? (\n                  <>\n                    <div className=\"spinner\" />\n                    Creating Signature...\n                  </>\n                ) : (\n                  <>\n                    <FileSignature className=\"icon\" />\n                    Create Digital Signature\n                  </>\n                )}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Validate Tab */}\n        {activeTab === 'validate' && (\n          <div className=\"validate-tab\">\n            <div className=\"validation-controls\">\n              <button\n                className=\"validate-button\"\n                onClick={validateSignatures}\n                disabled={!currentPDFBytes || isValidating}\n              >\n                {isValidating ? (\n                  <>\n                    <div className=\"spinner\" />\n                    Validating...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"icon\" />\n                    Validate All Signatures\n                  </>\n                )}\n              </button>\n            </div>\n\n            {validationResults.length > 0 && (\n              <div className=\"validation-results\">\n                <h3>Validation Results</h3>\n                {validationResults.map((result, index) => (\n                  <div key={index} className={`validation-result ${result.valid ? 'valid' : 'invalid'}`}>\n                    <div className=\"result-header\">\n                      {result.valid ? (\n                        <CheckCircle className=\"icon valid\" />\n                      ) : (\n                        <AlertTriangle className=\"icon invalid\" />\n                      )}\n                      <span className=\"result-title\">\n                        Signature {index + 1} - {result.valid ? 'Valid' : 'Invalid'}\n                      </span>\n                    </div>\n                    \n                    <div className=\"result-details\">\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Certificate:</span>\n                        <span className=\"value\">{result.certificate.subject}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Signed:</span>\n                        <span className=\"value\">{formatDate(result.timestamp)}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Document integrity:</span>\n                        <span className={`value ${result.documentIntegrity ? 'valid' : 'invalid'}`}>\n                          {result.documentIntegrity ? 'Intact' : 'Modified'}\n                        </span>\n                      </div>\n                      \n                      {result.warnings.length > 0 && (\n                        <div className=\"warnings\">\n                          <h4>Warnings:</h4>\n                          <ul>\n                            {result.warnings.map((warning: string, i: number) => (\n                              <li key={i}>{warning}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {result.errors.length > 0 && (\n                        <div className=\"errors\">\n                          <h4>Errors:</h4>\n                          <ul>\n                            {result.errors.map((error: string, i: number) => (\n                              <li key={i}>{error}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Certificates Tab */}\n        {activeTab === 'certificates' && (\n          <div className=\"certificates-tab\">\n            <div className=\"certificates-header\">\n              <h3>Certificate Management</h3>\n              <button className=\"import-button\" onClick={importCertificate}>\n                <Upload className=\"icon\" />\n                Import Certificate\n              </button>\n            </div>\n\n            <div className=\"certificates-list\">\n              {certificates.map(cert => {\n                const status = getCertificateStatus(cert);\n                return (\n                  <div key={cert.id} className=\"certificate-item\">\n                    <div className=\"certificate-header\">\n                      <div className=\"certificate-name\">\n                        <Certificate className=\"icon\" />\n                        <span>{cert.name}</span>\n                      </div>\n                      <div className=\"certificate-status\" style={{ color: status.color }}>\n                        {status.status === 'valid' && <Lock className=\"icon\" />}\n                        {status.status === 'expiring' && <AlertTriangle className=\"icon\" />}\n                        {(status.status === 'invalid' || status.status === 'expired') && <Unlock className=\"icon\" />}\n                        <span>{status.text}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"certificate-details\">\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Subject:</span>\n                        <span className=\"value\">{cert.subject}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Issuer:</span>\n                        <span className=\"value\">{cert.issuer}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Valid from:</span>\n                        <span className=\"value\">{formatDate(cert.validFrom)}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Valid to:</span>\n                        <span className=\"value\">{formatDate(cert.validTo)}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Fingerprint:</span>\n                        <span className=\"value fingerprint\">{cert.fingerprint}</span>\n                      </div>\n                      <div className=\"detail-row\">\n                        <span className=\"label\">Key usage:</span>\n                        <span className=\"value\">{cert.keyUsage.join(', ')}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DigitalSignaturePanel;\n"