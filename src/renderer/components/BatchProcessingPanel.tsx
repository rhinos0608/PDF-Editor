/**\n * Batch Processing Panel Component\n * Provides enterprise-level batch processing capabilities for PDF operations\n * including merge, split, compress, watermark, OCR, and custom workflows\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { \n  Layers, \n  Plus, \n  Trash2, \n  Play, \n  Pause, \n  Square, \n  Download, \n  Upload, \n  Settings, \n  FileText, \n  Scissors, \n  Compress, \n  Droplets, \n  Eye, \n  Shield, \n  RotateCw,\n  CheckCircle,\n  AlertCircle,\n  Clock,\n  X,\n  FolderOpen,\n  Save\n} from 'lucide-react';\nimport { toast } from 'react-toastify';\nimport './BatchProcessingPanel.css';\n\ninterface BatchOperation {\n  id: string;\n  type: 'merge' | 'split' | 'compress' | 'watermark' | 'ocr' | 'rotate' | 'encrypt' | 'decrypt';\n  name: string;\n  description: string;\n  inputFiles: File[];\n  outputPath?: string;\n  options: any;\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'paused';\n  progress: number;\n  result?: any;\n  error?: string;\n  startTime?: Date;\n  endTime?: Date;\n}\n\ninterface BatchProcessingPanelProps {\n  isVisible: boolean;\n  onClose: () => void;\n}\n\nconst OPERATION_TYPES = [\n  {\n    type: 'merge',\n    name: 'Merge PDFs',\n    description: 'Combine multiple PDF files into one',\n    icon: Layers,\n    color: '#3b82f6'\n  },\n  {\n    type: 'split',\n    name: 'Split PDF',\n    description: 'Split PDF into multiple files',\n    icon: Scissors,\n    color: '#ef4444'\n  },\n  {\n    type: 'compress',\n    name: 'Compress PDFs',\n    description: 'Reduce file size of PDF documents',\n    icon: Compress,\n    color: '#10b981'\n  },\n  {\n    type: 'watermark',\n    name: 'Add Watermark',\n    description: 'Add watermark to PDF pages',\n    icon: Droplets,\n    color: '#8b5cf6'\n  },\n  {\n    type: 'ocr',\n    name: 'OCR Processing',\n    description: 'Extract text using OCR technology',\n    icon: Eye,\n    color: '#f59e0b'\n  },\n  {\n    type: 'rotate',\n    name: 'Rotate Pages',\n    description: 'Rotate PDF pages by specified degrees',\n    icon: RotateCw,\n    color: '#06b6d4'\n  },\n  {\n    type: 'encrypt',\n    name: 'Encrypt PDFs',\n    description: 'Add password protection to PDFs',\n    icon: Shield,\n    color: '#dc2626'\n  }\n];\n\nconst BatchProcessingPanel: React.FC<BatchProcessingPanelProps> = ({\n  isVisible,\n  onClose\n}) => {\n  const [operations, setOperations] = useState<BatchOperation[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentOperation, setCurrentOperation] = useState<string | null>(null);\n  const [showAddOperation, setShowAddOperation] = useState(false);\n  const [selectedOperationType, setSelectedOperationType] = useState<string>('');\n  const [operationOptions, setOperationOptions] = useState<any>({});\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [outputDirectory, setOutputDirectory] = useState('');\n  const [globalProgress, setGlobalProgress] = useState(0);\n  const [processingStats, setProcessingStats] = useState({\n    total: 0,\n    completed: 0,\n    failed: 0,\n    totalTime: 0\n  });\n\n  // Setup progress listener\n  useEffect(() => {\n    if (typeof window !== 'undefined' && window.electronAPI?.onBatchProgress) {\n      const cleanup = window.electronAPI.onBatchProgress((progressData: any) => {\n        setGlobalProgress((progressData.completed / progressData.total) * 100);\n        setCurrentOperation(progressData.currentOperation);\n      });\n      \n      return cleanup;\n    }\n  }, []);\n\n  const addOperation = useCallback(() => {\n    if (!selectedOperationType || selectedFiles.length === 0) {\n      toast.error('Please select operation type and files');\n      return;\n    }\n\n    const operationType = OPERATION_TYPES.find(op => op.type === selectedOperationType);\n    if (!operationType) return;\n\n    const newOperation: BatchOperation = {\n      id: `op_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: selectedOperationType as any,\n      name: `${operationType.name} - ${selectedFiles.length} file(s)`,\n      description: operationType.description,\n      inputFiles: [...selectedFiles],\n      outputPath: outputDirectory,\n      options: { ...operationOptions },\n      status: 'pending',\n      progress: 0\n    };\n\n    setOperations(prev => [...prev, newOperation]);\n    \n    // Reset form\n    setSelectedOperationType('');\n    setSelectedFiles([]);\n    setOperationOptions({});\n    setShowAddOperation(false);\n    \n    toast.success('Operation added to batch queue');\n  }, [selectedOperationType, selectedFiles, outputDirectory, operationOptions]);\n\n  const removeOperation = useCallback((operationId: string) => {\n    setOperations(prev => prev.filter(op => op.id !== operationId));\n    toast.info('Operation removed from queue');\n  }, []);\n\n  const startBatchProcessing = useCallback(async () => {\n    const pendingOperations = operations.filter(op => op.status === 'pending');\n    if (pendingOperations.length === 0) {\n      toast.warning('No pending operations to process');\n      return;\n    }\n\n    setIsProcessing(true);\n    setGlobalProgress(0);\n    setProcessingStats({\n      total: pendingOperations.length,\n      completed: 0,\n      failed: 0,\n      totalTime: 0\n    });\n\n    const startTime = Date.now();\n\n    try {\n      // Convert operations to the format expected by the backend\n      const batchOperations = pendingOperations.map(op => ({\n        type: op.type,\n        name: op.name,\n        files: op.inputFiles.map(file => ({\n          name: file.name,\n          data: file, // In real implementation, this would be the file data\n          pages: 1 // Mock page count\n        })),\n        options: op.options,\n        outputPath: op.outputPath\n      }));\n\n      let result;\n      if (window.electronAPI?.batchProcess) {\n        result = await window.electronAPI.batchProcess(batchOperations);\n      } else {\n        // Fallback for web mode - simulate batch processing\n        result = {\n          success: true,\n          results: batchOperations.map((op, index) => ({\n            success: Math.random() > 0.1, // 90% success rate\n            operation: op.type,\n            result: {\n              type: op.type,\n              outputFile: `${op.name}_output.pdf`,\n              processingTime: Math.random() * 5000 + 1000\n            }\n          }))\n        };\n      }\n\n      if (result.success) {\n        // Update operations with results\n        setOperations(prev => prev.map(op => {\n          const operationResult = result.results.find((r: any) => r.operation === op.type);\n          if (operationResult && pendingOperations.some(pending => pending.id === op.id)) {\n            return {\n              ...op,\n              status: operationResult.success ? 'completed' : 'failed',\n              progress: 100,\n              result: operationResult.success ? operationResult.result : undefined,\n              error: operationResult.success ? undefined : 'Processing failed',\n              startTime: new Date(startTime),\n              endTime: new Date()\n            };\n          }\n          return op;\n        }));\n\n        const completed = result.results.filter((r: any) => r.success).length;\n        const failed = result.results.filter((r: any) => !r.success).length;\n        \n        setProcessingStats({\n          total: pendingOperations.length,\n          completed,\n          failed,\n          totalTime: Date.now() - startTime\n        });\n\n        toast.success(`Batch processing completed: ${completed} successful, ${failed} failed`);\n      } else {\n        throw new Error(result.error || 'Batch processing failed');\n      }\n    } catch (error: any) {\n      console.error('Batch processing failed:', error);\n      toast.error(`Batch processing failed: ${error.message}`);\n      \n      // Mark all pending operations as failed\n      setOperations(prev => prev.map(op => \n        pendingOperations.some(pending => pending.id === op.id)\n          ? { ...op, status: 'failed', error: error.message }\n          : op\n      ));\n    } finally {\n      setIsProcessing(false);\n      setCurrentOperation(null);\n      setGlobalProgress(0);\n    }\n  }, [operations]);\n\n  const pauseBatchProcessing = useCallback(() => {\n    setIsProcessing(false);\n    setCurrentOperation(null);\n    toast.info('Batch processing paused');\n  }, []);\n\n  const clearCompleted = useCallback(() => {\n    setOperations(prev => prev.filter(op => op.status !== 'completed'));\n    toast.info('Completed operations cleared');\n  }, []);\n\n  const exportResults = useCallback(() => {\n    const completedOperations = operations.filter(op => op.status === 'completed');\n    if (completedOperations.length === 0) {\n      toast.warning('No completed operations to export');\n      return;\n    }\n\n    const results = {\n      timestamp: new Date().toISOString(),\n      summary: processingStats,\n      operations: completedOperations.map(op => ({\n        id: op.id,\n        type: op.type,\n        name: op.name,\n        inputFiles: op.inputFiles.map(f => f.name),\n        result: op.result,\n        processingTime: op.endTime && op.startTime \n          ? op.endTime.getTime() - op.startTime.getTime()\n          : 0\n      }))\n    };\n\n    const blob = new Blob([JSON.stringify(results, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `batch_processing_results_${new Date().toISOString().split('T')[0]}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    \n    toast.success('Results exported successfully');\n  }, [operations, processingStats]);\n\n  const handleFileSelection = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const pdfFiles = files.filter(file => file.type === 'application/pdf');\n    \n    if (pdfFiles.length !== files.length) {\n      toast.warning('Only PDF files are supported');\n    }\n    \n    setSelectedFiles(pdfFiles);\n  }, []);\n\n  const getOperationIcon = (type: string) => {\n    const operationType = OPERATION_TYPES.find(op => op.type === type);\n    return operationType?.icon || FileText;\n  };\n\n  const getOperationColor = (type: string) => {\n    const operationType = OPERATION_TYPES.find(op => op.type === type);\n    return operationType?.color || '#6b7280';\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return CheckCircle;\n      case 'failed': return AlertCircle;\n      case 'running': return Clock;\n      default: return Clock;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return '#10b981';\n      case 'failed': return '#ef4444';\n      case 'running': return '#f59e0b';\n      default: return '#6b7280';\n    }\n  };\n\n  const renderOperationOptions = () => {\n    switch (selectedOperationType) {\n      case 'merge':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Merge order:</label>\n              <select\n                value={operationOptions.order || 'filename'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, order: e.target.value }))}\n              >\n                <option value=\"filename\">By filename</option>\n                <option value=\"date\">By date modified</option>\n                <option value=\"size\">By file size</option>\n                <option value=\"custom\">Custom order</option>\n              </select>\n            </div>\n            <div className=\"option-group\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={operationOptions.addBookmarks || false}\n                  onChange={(e) => setOperationOptions(prev => ({ ...prev, addBookmarks: e.target.checked }))}\n                />\n                Add bookmarks for each file\n              </label>\n            </div>\n          </div>\n        );\n      \n      case 'split':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Split method:</label>\n              <select\n                value={operationOptions.method || 'pages'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, method: e.target.value }))}\n              >\n                <option value=\"pages\">By page count</option>\n                <option value=\"size\">By file size</option>\n                <option value=\"bookmarks\">By bookmarks</option>\n              </select>\n            </div>\n            {operationOptions.method === 'pages' && (\n              <div className=\"option-group\">\n                <label>Pages per file:</label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  value={operationOptions.pagesPerFile || 1}\n                  onChange={(e) => setOperationOptions(prev => ({ ...prev, pagesPerFile: parseInt(e.target.value) }))}\n                />\n              </div>\n            )}\n          </div>\n        );\n      \n      case 'compress':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Compression level:</label>\n              <select\n                value={operationOptions.level || 'medium'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, level: e.target.value }))}\n              >\n                <option value=\"low\">Low (larger file, better quality)</option>\n                <option value=\"medium\">Medium (balanced)</option>\n                <option value=\"high\">High (smaller file, lower quality)</option>\n              </select>\n            </div>\n            <div className=\"option-group\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={operationOptions.optimizeImages || true}\n                  onChange={(e) => setOperationOptions(prev => ({ ...prev, optimizeImages: e.target.checked }))}\n                />\n                Optimize images\n              </label>\n            </div>\n          </div>\n        );\n      \n      case 'watermark':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Watermark text:</label>\n              <input\n                type=\"text\"\n                placeholder=\"Enter watermark text\"\n                value={operationOptions.text || ''}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, text: e.target.value }))}\n              />\n            </div>\n            <div className=\"option-group\">\n              <label>Position:</label>\n              <select\n                value={operationOptions.position || 'center'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, position: e.target.value }))}\n              >\n                <option value=\"center\">Center</option>\n                <option value=\"top-left\">Top Left</option>\n                <option value=\"top-right\">Top Right</option>\n                <option value=\"bottom-left\">Bottom Left</option>\n                <option value=\"bottom-right\">Bottom Right</option>\n              </select>\n            </div>\n            <div className=\"option-group\">\n              <label>Opacity:</label>\n              <input\n                type=\"range\"\n                min=\"0.1\"\n                max=\"1\"\n                step=\"0.1\"\n                value={operationOptions.opacity || 0.5}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, opacity: parseFloat(e.target.value) }))}\n              />\n              <span>{Math.round((operationOptions.opacity || 0.5) * 100)}%</span>\n            </div>\n          </div>\n        );\n      \n      case 'ocr':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Language:</label>\n              <select\n                value={operationOptions.language || 'eng'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, language: e.target.value }))}\n              >\n                <option value=\"eng\">English</option>\n                <option value=\"spa\">Spanish</option>\n                <option value=\"fra\">French</option>\n                <option value=\"deu\">German</option>\n                <option value=\"chi_sim\">Chinese (Simplified)</option>\n              </select>\n            </div>\n            <div className=\"option-group\">\n              <label>Output format:</label>\n              <select\n                value={operationOptions.outputFormat || 'text'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, outputFormat: e.target.value }))}\n              >\n                <option value=\"text\">Plain Text</option>\n                <option value=\"json\">JSON</option>\n                <option value=\"xml\">XML</option>\n              </select>\n            </div>\n          </div>\n        );\n      \n      case 'rotate':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Rotation angle:</label>\n              <select\n                value={operationOptions.angle || 90}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, angle: parseInt(e.target.value) }))}\n              >\n                <option value={90}>90° Clockwise</option>\n                <option value={180}>180°</option>\n                <option value={270}>270° Clockwise (90° Counter-clockwise)</option>\n              </select>\n            </div>\n            <div className=\"option-group\">\n              <label>Apply to:</label>\n              <select\n                value={operationOptions.applyTo || 'all'}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, applyTo: e.target.value }))}\n              >\n                <option value=\"all\">All pages</option>\n                <option value=\"odd\">Odd pages only</option>\n                <option value=\"even\">Even pages only</option>\n                <option value=\"range\">Page range</option>\n              </select>\n            </div>\n          </div>\n        );\n      \n      case 'encrypt':\n        return (\n          <div className=\"operation-options\">\n            <div className=\"option-group\">\n              <label>Password:</label>\n              <input\n                type=\"password\"\n                placeholder=\"Enter password\"\n                value={operationOptions.password || ''}\n                onChange={(e) => setOperationOptions(prev => ({ ...prev, password: e.target.value }))}\n              />\n            </div>\n            <div className=\"option-group\">\n              <label>Permissions:</label>\n              <div className=\"checkbox-list\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={operationOptions.allowPrint !== false}\n                    onChange={(e) => setOperationOptions(prev => ({ ...prev, allowPrint: e.target.checked }))}\n                  />\n                  Allow printing\n                </label>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={operationOptions.allowCopy !== false}\n                    onChange={(e) => setOperationOptions(prev => ({ ...prev, allowCopy: e.target.checked }))}\n                  />\n                  Allow copying\n                </label>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={operationOptions.allowModify !== false}\n                    onChange={(e) => setOperationOptions(prev => ({ ...prev, allowModify: e.target.checked }))}\n                  />\n                  Allow modifications\n                </label>\n              </div>\n            </div>\n          </div>\n        );\n      \n      default:\n        return null;\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"batch-processing-panel\">\n      <div className=\"batch-panel-header\">\n        <div className=\"batch-panel-title\">\n          <Layers className=\"icon\" />\n          <span>Batch Processing</span>\n        </div>\n        <button className=\"close-button\" onClick={onClose}>\n          <X className=\"icon\" />\n        </button>\n      </div>\n\n      <div className=\"batch-panel-content\">\n        {/* Processing Stats */}\n        {(isProcessing || processingStats.total > 0) && (\n          <div className=\"processing-stats\">\n            <div className=\"stats-header\">\n              <h3>Processing Status</h3>\n              {isProcessing && (\n                <div className=\"current-operation\">\n                  Processing: {currentOperation}\n                </div>\n              )}\n            </div>\n            \n            {isProcessing && (\n              <div className=\"progress-container\">\n                <div className=\"progress-bar\">\n                  <div \n                    className=\"progress-fill\" \n                    style={{ width: `${globalProgress}%` }}\n                  />\n                </div>\n                <span className=\"progress-text\">{Math.round(globalProgress)}%</span>\n              </div>\n            )}\n            \n            <div className=\"stats-grid\">\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Total:</span>\n                <span className=\"stat-value\">{processingStats.total}</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Completed:</span>\n                <span className=\"stat-value success\">{processingStats.completed}</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Failed:</span>\n                <span className=\"stat-value error\">{processingStats.failed}</span>\n              </div>\n              <div className=\"stat-item\">\n                <span className=\"stat-label\">Time:</span>\n                <span className=\"stat-value\">{(processingStats.totalTime / 1000).toFixed(1)}s</span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Batch Controls */}\n        <div className=\"batch-controls\">\n          <div className=\"control-buttons\">\n            <button\n              className=\"add-operation-button\"\n              onClick={() => setShowAddOperation(true)}\n              disabled={isProcessing}\n            >\n              <Plus className=\"icon\" />\n              Add Operation\n            </button>\n            \n            <button\n              className=\"start-button\"\n              onClick={startBatchProcessing}\n              disabled={operations.filter(op => op.status === 'pending').length === 0 || isProcessing}\n            >\n              <Play className=\"icon\" />\n              Start Processing\n            </button>\n            \n            {isProcessing && (\n              <button\n                className=\"pause-button\"\n                onClick={pauseBatchProcessing}\n              >\n                <Pause className=\"icon\" />\n                Pause\n              </button>\n            )}\n            \n            <button\n              className=\"clear-button\"\n              onClick={clearCompleted}\n              disabled={operations.filter(op => op.status === 'completed').length === 0}\n            >\n              <Trash2 className=\"icon\" />\n              Clear Completed\n            </button>\n            \n            <button\n              className=\"export-button\"\n              onClick={exportResults}\n              disabled={operations.filter(op => op.status === 'completed').length === 0}\n            >\n              <Download className=\"icon\" />\n              Export Results\n            </button>\n          </div>\n        </div>\n\n        {/* Operations Queue */}\n        <div className=\"operations-queue\">\n          <h3>Operations Queue ({operations.length})</h3>\n          \n          {operations.length === 0 ? (\n            <div className=\"empty-queue\">\n              <Layers className=\"icon\" />\n              <p>No operations in queue</p>\n              <p>Click \"Add Operation\" to get started</p>\n            </div>\n          ) : (\n            <div className=\"operations-list\">\n              {operations.map(operation => {\n                const Icon = getOperationIcon(operation.type);\n                const StatusIcon = getStatusIcon(operation.status);\n                \n                return (\n                  <div key={operation.id} className={`operation-item ${operation.status}`}>\n                    <div className=\"operation-header\">\n                      <div className=\"operation-info\">\n                        <Icon \n                          className=\"operation-icon\" \n                          style={{ color: getOperationColor(operation.type) }}\n                        />\n                        <div className=\"operation-details\">\n                          <div className=\"operation-name\">{operation.name}</div>\n                          <div className=\"operation-description\">{operation.description}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"operation-status\">\n                        <StatusIcon \n                          className=\"status-icon\" \n                          style={{ color: getStatusColor(operation.status) }}\n                        />\n                        <span className=\"status-text\">{operation.status}</span>\n                        \n                        {operation.status === 'pending' && (\n                          <button\n                            className=\"remove-button\"\n                            onClick={() => removeOperation(operation.id)}\n                            disabled={isProcessing}\n                          >\n                            <Trash2 className=\"icon\" />\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"operation-meta\">\n                      <div className=\"meta-item\">\n                        <span className=\"meta-label\">Files:</span>\n                        <span className=\"meta-value\">{operation.inputFiles.length}</span>\n                      </div>\n                      \n                      {operation.startTime && (\n                        <div className=\"meta-item\">\n                          <span className=\"meta-label\">Started:</span>\n                          <span className=\"meta-value\">\n                            {operation.startTime.toLocaleTimeString()}\n                          </span>\n                        </div>\n                      )}\n                      \n                      {operation.endTime && operation.startTime && (\n                        <div className=\"meta-item\">\n                          <span className=\"meta-label\">Duration:</span>\n                          <span className=\"meta-value\">\n                            {((operation.endTime.getTime() - operation.startTime.getTime()) / 1000).toFixed(1)}s\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {operation.error && (\n                      <div className=\"operation-error\">\n                        <AlertCircle className=\"icon\" />\n                        <span>{operation.error}</span>\n                      </div>\n                    )}\n                    \n                    {operation.result && (\n                      <div className=\"operation-result\">\n                        <CheckCircle className=\"icon\" />\n                        <span>Output: {operation.result.outputFile || 'Processing completed'}</span>\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Add Operation Modal */}\n      {showAddOperation && (\n        <div className=\"modal-overlay\">\n          <div className=\"add-operation-modal\">\n            <div className=\"modal-header\">\n              <h3>Add Batch Operation</h3>\n              <button \n                className=\"close-button\"\n                onClick={() => setShowAddOperation(false)}\n              >\n                <X className=\"icon\" />\n              </button>\n            </div>\n            \n            <div className=\"modal-content\">\n              <div className=\"operation-type-selector\">\n                <h4>Select Operation Type</h4>\n                <div className=\"operation-types-grid\">\n                  {OPERATION_TYPES.map(opType => {\n                    const Icon = opType.icon;\n                    return (\n                      <button\n                        key={opType.type}\n                        className={`operation-type-button ${\n                          selectedOperationType === opType.type ? 'selected' : ''\n                        }`}\n                        onClick={() => setSelectedOperationType(opType.type)}\n                      >\n                        <Icon className=\"icon\" style={{ color: opType.color }} />\n                        <div className=\"type-info\">\n                          <div className=\"type-name\">{opType.name}</div>\n                          <div className=\"type-description\">{opType.description}</div>\n                        </div>\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n              \n              {selectedOperationType && (\n                <>\n                  <div className=\"file-selection\">\n                    <h4>Select Files</h4>\n                    <div className=\"file-input-container\">\n                      <input\n                        type=\"file\"\n                        multiple\n                        accept=\".pdf\"\n                        onChange={handleFileSelection}\n                        id=\"batch-file-input\"\n                      />\n                      <label htmlFor=\"batch-file-input\" className=\"file-input-label\">\n                        <Upload className=\"icon\" />\n                        Choose PDF Files\n                      </label>\n                    </div>\n                    \n                    {selectedFiles.length > 0 && (\n                      <div className=\"selected-files\">\n                        <h5>Selected Files ({selectedFiles.length})</h5>\n                        <div className=\"files-list\">\n                          {selectedFiles.map((file, index) => (\n                            <div key={index} className=\"file-item\">\n                              <FileText className=\"icon\" />\n                              <span className=\"file-name\">{file.name}</span>\n                              <span className=\"file-size\">\n                                {(file.size / 1024 / 1024).toFixed(1)} MB\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                  \n                  {renderOperationOptions()}\n                  \n                  <div className=\"output-settings\">\n                    <h4>Output Settings</h4>\n                    <div className=\"output-directory\">\n                      <label>Output directory:</label>\n                      <div className=\"directory-input\">\n                        <input\n                          type=\"text\"\n                          placeholder=\"Choose output directory\"\n                          value={outputDirectory}\n                          onChange={(e) => setOutputDirectory(e.target.value)}\n                        />\n                        <button className=\"browse-button\">\n                          <FolderOpen className=\"icon\" />\n                          Browse\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button\n                className=\"cancel-button\"\n                onClick={() => setShowAddOperation(false)}\n              >\n                Cancel\n              </button>\n              <button\n                className=\"add-button\"\n                onClick={addOperation}\n                disabled={!selectedOperationType || selectedFiles.length === 0}\n              >\n                <Plus className=\"icon\" />\n                Add Operation\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BatchProcessingPanel;\n"